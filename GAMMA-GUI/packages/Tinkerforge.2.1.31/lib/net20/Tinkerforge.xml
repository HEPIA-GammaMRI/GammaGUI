<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tinkerforge</name>
    </assembly>
    <members>
        <member name="T:Tinkerforge.BrickDC">
             <summary>
              Drives one brushed DC motor with up to 28V and 5A (peak)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_STACK_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_CURRENT_CONSUMPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_DISABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_IS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_CURRENT_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_CURRENT_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.DRIVE_MODE_DRIVE_BRAKE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.DRIVE_MODE_DRIVE_COAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickDC.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.UnderVoltageCallback">
             <summary>
              This callback is triggered when the input voltage drops below the value set by
              <see cref="M:Tinkerforge.BrickDC.SetMinimumVoltage(System.Int32)" />. The parameter is the current voltage.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickDC.UnderVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.UnderVoltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.EmergencyShutdownCallback">
             <summary>
              This callback is triggered if either the current consumption
              is too high (above 5A) or the temperature of the driver chip is too high
              (above 175°C). These two possibilities are essentially the same, since the
              temperature will reach this threshold immediately if the motor consumes too
              much current. In case of a voltage below 3.3V (external or stack) this
              callback is triggered as well.
              
              If this callback is triggered, the driver chip gets disabled at the same time.
              That means, <see cref="M:Tinkerforge.BrickDC.Enable" /> has to be called to drive the motor again.
              
              <note>
               This callback only works in Drive/Brake mode (see <see cref="M:Tinkerforge.BrickDC.SetDriveMode(System.Byte)" />). In
               Drive/Coast mode it is unfortunately impossible to reliably read the
               overcurrent/overtemperature signal from the driver chip.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickDC.EmergencyShutdownEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.EmergencyShutdown">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.VelocityReachedCallback">
             <summary>
              This callback is triggered whenever a set velocity is reached. For example:
              If a velocity of 0 is present, acceleration is set to 5000 and velocity
              to 10000, the <see cref="E:Tinkerforge.BrickDC.VelocityReachedCallback" /> callback will be triggered after about
              2 seconds, when the set velocity is actually reached.
              
              <note>
               Since we can't get any feedback from the DC motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickDC.SetAcceleration(System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickDC.VelocityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.VelocityReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.CurrentVelocityCallback">
             <summary>
              This callback is triggered with the period that is set by
              <see cref="M:Tinkerforge.BrickDC.SetCurrentVelocityPeriod(System.Int32)" />. The parameter is the *current*
              velocity used by the motor.
              
              The <see cref="E:Tinkerforge.BrickDC.CurrentVelocityCallback" /> callback is only triggered after the set period
              if there is a change in the velocity.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickDC.CurrentVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickDC.CurrentVelocity">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)">
             <summary>
              Sets the velocity of the motor. Whereas -32767 is full speed backward,
              0 is stop and 32767 is full speed forward. Depending on the
              acceleration (see <see cref="M:Tinkerforge.BrickDC.SetAcceleration(System.Int32)" />), the motor is not immediately
              brought to the velocity but smoothly accelerated.
              
              The velocity describes the duty cycle of the PWM with which the motor is
              controlled, e.g. a velocity of 3277 sets a PWM with a 10% duty cycle.
              You can not only control the duty cycle of the PWM but also the frequency,
              see <see cref="M:Tinkerforge.BrickDC.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the motor. This value is different
              from <see cref="M:Tinkerforge.BrickDC.GetVelocity" /> whenever the motor is currently accelerating
              to a goal set by <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetAcceleration(System.Int32)">
             <summary>
              Sets the acceleration of the motor. It is given in *velocity/s*. An
              acceleration of 10000 means, that every second the velocity is increased
              by 10000 (or about 30% duty cycle).
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 16000 (about 50% duty cycle) in 10 seconds, you should set
              an acceleration of 1600.
              
              If acceleration is set to 0, there is no speed ramping, i.e. a new velocity
              is immediately given to the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetAcceleration">
             <summary>
              Returns the acceleration as set by <see cref="M:Tinkerforge.BrickDC.SetAcceleration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetPWMFrequency(System.Int32)">
             <summary>
              Sets the frequency of the PWM with which the motor is driven.
              Often a high frequency
              is less noisy and the motor runs smoother. However, with a low frequency
              there are less switches and therefore fewer switching losses. Also with
              most motors lower frequencies enable higher torque.
              
              If you have no idea what all this means, just ignore this function and use
              the default frequency, it will very likely work fine.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetPWMFrequency">
             <summary>
              Returns the PWM frequency as set by <see cref="M:Tinkerforge.BrickDC.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" /> with 0 if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetStackInputVoltage">
             <summary>
              Returns the stack input voltage. The stack input voltage is the
              voltage that is supplied via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetExternalInputVoltage">
             <summary>
              Returns the external input voltage. The external input voltage is
              given via the black power input connector on the DC Brick.
              
              If there is an external input voltage and a stack input voltage, the motor
              will be driven by the external input voltage. If there is only a stack
              voltage present, the motor will be driven by this voltage.
              
              <note type="caution">
               This means, if you have a high stack voltage and a low external voltage,
               the motor will be driven with the low external voltage. If you then remove
               the external connection, it will immediately be driven by the high
               stack voltage.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetCurrentConsumption">
             <summary>
              Returns the current consumption of the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.Enable">
             <summary>
              Enables the driver chip. The driver parameters can be configured (velocity,
              acceleration, etc) before it is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.Disable">
             <summary>
              Disables the driver chip. The configurations are kept (velocity,
              acceleration, etc) but the motor is not driven until it is enabled again.
              
              <note type="caution">
               Disabling the driver chip while the motor is still turning can damage the
               driver chip. The motor should be stopped calling <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" /> with 0
               before disabling the motor power. The <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" /> function will **not**
               wait until the motor is actually stopped. You have to explicitly wait for the
               appropriate time after calling the <see cref="M:Tinkerforge.BrickDC.SetVelocity(System.Int16)" /> function before calling
               the <see cref="M:Tinkerforge.BrickDC.Disable" /> function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.IsEnabled">
             <summary>
              Returns *true* if the driver chip is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetMinimumVoltage(System.Int32)">
             <summary>
              Sets the minimum voltage, below which the <see cref="E:Tinkerforge.BrickDC.UnderVoltageCallback" /> callback
              is triggered. The minimum possible value that works with the DC Brick is 6V.
              You can use this function to detect the discharge of a battery that is used
              to drive the motor. If you have a fixed power supply, you likely do not need
              this functionality.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetMinimumVoltage">
             <summary>
              Returns the minimum voltage as set by <see cref="M:Tinkerforge.BrickDC.SetMinimumVoltage(System.Int32)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetDriveMode(System.Byte)">
             <summary>
              Sets the drive mode. Possible modes are:
              
              * 0 = Drive/Brake
              * 1 = Drive/Coast
              
              These modes are different kinds of motor controls.
              
              In Drive/Brake mode, the motor is always either driving or braking. There
              is no freewheeling. Advantages are: A more linear correlation between
              PWM and velocity, more exact accelerations and the possibility to drive
              with slower velocities.
              
              In Drive/Coast mode, the motor is always either driving or freewheeling.
              Advantages are: Less current consumption and less demands on the motor and
              driver chip.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetDriveMode">
             <summary>
              Returns the drive mode, as set by <see cref="M:Tinkerforge.BrickDC.SetDriveMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetCurrentVelocityPeriod(System.Int32)">
             <summary>
              Sets a period with which the <see cref="E:Tinkerforge.BrickDC.CurrentVelocityCallback" /> callback is triggered.
              A period of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetCurrentVelocityPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickDC.SetCurrentVelocityPeriod(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickDC.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickDC.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.3.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickDC.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.3.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickDC.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickDC.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickDC.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.OnUnderVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.OnEmergencyShutdownCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.OnVelocityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickDC.OnCurrentVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickESP32">
             <summary>
              ESP32 microcontroller based Brick with 6 Bricklet ports
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickESP32.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickESP32.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickESP32Ethernet">
             <summary>
              ESP32 microcontroller based Brick with Ethernet and 6 Bricklet ports
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32Ethernet.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32Ethernet.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickESP32Ethernet.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickESP32Ethernet.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickESP32Ethernet.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickHAT">
             <summary>
              HAT for Raspberry Pi with 8 Bricklets ports and real-time clock
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_SLEEP_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_SLEEP_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_BRICKLET_POWER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_BRICKLET_POWER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_VOLTAGES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_VOLTAGES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_VOLTAGES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_RTC_DRIVER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_RTC_DRIVER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.RTC_DRIVER_PCF8523">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.RTC_DRIVER_DS1338">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHAT.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickHAT.VoltagesCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickHAT.SetVoltagesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickHAT.GetVoltages(System.Int32@,System.Int32@)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickHAT.VoltagesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetSleepMode(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
              Sets the sleep mode.
              
              <note>
               Calling this function will cut the Raspberry Pi's power after Power Off Delay seconds.
               You have to shut down the operating system yourself, e.g. by calling 'sudo shutdown -h now'.
              </note>
              
              Parameters:
              
              * Power Off Delay: Time before the RPi/Bricklets are powered off.
              * Power Off Duration: Duration that the RPi/Bricklets stay powered off.
              * Raspberry Pi Off: RPi is powered off if set to true.
              * Bricklets Off: Bricklets are powered off if set to true.
              * Enable Sleep Indicator: If set to true, the status LED will blink in a 1s interval
                during the whole power off duration. This will draw additional 0.3mA.
              
              Example: To turn RPi and Bricklets off in 5 seconds for 10 minutes with sleep
              indicator enabled, call (5, 60*10, true, true, true).
              
              This function can also be used to implement a watchdog. To do this you can
              write a program that calls this function once per second in a loop with
              (10, 2, true, false, false). If the RPi crashes or gets stuck
              the HAT will reset the RPi after 10 seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetSleepMode(System.Int64@,System.Int64@,System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
              Returns the sleep mode settings as set by <see cref="M:Tinkerforge.BrickHAT.SetSleepMode(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetBrickletPower(System.Boolean)">
             <summary>
              Set to true/false to turn the power supply of the connected Bricklets on/off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetBrickletPower">
             <summary>
              Returns the power status of the connected Bricklets as set by <see cref="M:Tinkerforge.BrickHAT.SetBrickletPower(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetVoltages(System.Int32@,System.Int32@)">
             <summary>
              Returns the USB supply voltage and the DC input supply voltage.
              
              There are three possible combinations:
              
              * Only USB connected: The USB supply voltage will be fed back to the
                DC input connector. You will read the USB voltage and a slightly lower
                voltage on the DC input.
              * Only DC input connected: The DC voltage will not be fed back to the
                USB connector. You will read the DC input voltage and the USB voltage
                will be 0.
              * USB and DC input connected: You will read both voltages. In this case
                the USB supply will be without load, but it will work as backup if you
                disconnect the DC input (or if the DC input voltage falls below the
                USB voltage).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetVoltagesCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickHAT.VoltagesCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetVoltagesCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickHAT.SetVoltagesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetRTCDriver(System.Byte)">
             <summary>
              Configures the RTC driver that is given to the Raspberry Pi to be used.
              Currently there are two different RTCs used:
              
              * Hardware version &lt;= 1.5: PCF8523
              * Hardware version 1.6: DS1338
              
              The correct driver will be set during factory flashing by Tinkerforge.
              
              .. versionadded:: 2.0.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetRTCDriver">
             <summary>
              Returns the RTC driver as set by <see cref="M:Tinkerforge.BrickHAT.SetRTCDriver(System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickHAT.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickHAT.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickHAT.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickHAT.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the HAT is connected to
              (typically '0' as the HAT is the root device in the topology),
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The HAT (Zero) Brick is always at position 'i'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHAT.OnVoltagesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickHATZero">
             <summary>
              HAT for Raspberry Pi Zero with 4 Bricklets ports
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_USB_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_SET_USB_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_USB_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickHATZero.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickHATZero.USBVoltageCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickHATZero.SetUSBVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickHATZero.GetUSBVoltage" />.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickHATZero.USBVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetUSBVoltage">
             <summary>
              Returns the USB supply voltage of the Raspberry Pi.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickHATZero.USBVoltageCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickHATZero.SetUSBVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.SetUSBVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickHATZero.USBVoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickHATZero.USBVoltageCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetUSBVoltageCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickHATZero.SetUSBVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickHATZero.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickHATZero.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickHATZero.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickHATZero.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the HAT is connected to
              (typically '0' as the HAT is the root device in the topology),
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The HAT (Zero) Brick is always at position 'i'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickHATZero.OnUSBVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU">
             <summary>
              Full fledged AHRS with 9 degrees of freedom
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_MAGNETIC_FIELD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ANGULAR_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ORIENTATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_QUATERNION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_IMU_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_LEDS_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_LEDS_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_ARE_LEDS_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_ACCELERATION_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ACCELERATION_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_MAGNETOMETER_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_MAGNETOMETER_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_CONVERGENCE_SPEED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_CONVERGENCE_SPEED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_MAGNETIC_FIELD_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_MAGNETIC_FIELD_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_ANGULAR_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ANGULAR_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_ORIENTATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_ORIENTATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_QUATERNION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_QUATERNION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_ORIENTATION_CALCULATION_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_ORIENTATION_CALCULATION_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_IS_ORIENTATION_CALCULATION_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_ACCELEROMETER_GAIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_ACCELEROMETER_BIAS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_MAGNETOMETER_GAIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_MAGNETOMETER_BIAS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_GYROSCOPE_GAIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.CALIBRATION_TYPE_GYROSCOPE_BIAS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMU.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.AccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetAccelerationPeriod(System.Int64)" />. The parameters are the acceleration
              for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.AccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.Acceleration">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.MagneticFieldCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetMagneticFieldPeriod(System.Int64)" />. The parameters are the magnetic
              field for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.MagneticFieldEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.MagneticField">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.AngularVelocityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetAngularVelocityPeriod(System.Int64)" />. The parameters are the angular
              velocity for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.AngularVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.AngularVelocity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetAllDataPeriod(System.Int64)" />. The parameters are the acceleration,
              the magnetic field and the angular velocity for the x, y and z axis as
              well as the temperature of the IMU Brick.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.AllData">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.OrientationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetOrientationPeriod(System.Int64)" />. The parameters are the orientation
              (roll, pitch and yaw) of the IMU Brick in Euler angles. See
              <see cref="M:Tinkerforge.BrickIMU.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" /> for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.OrientationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.Orientation">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.QuaternionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMU.SetQuaternionPeriod(System.Int64)" />. The parameters are the orientation
              (x, y, z, w) of the IMU Brick in quaternions. See <see cref="M:Tinkerforge.BrickIMU.GetQuaternion(System.Single@,System.Single@,System.Single@,System.Single@)" />
              for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMU.QuaternionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMU.Quaternion">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated acceleration from the accelerometer for the
              x, y and z axis.
              
              If you want to get the acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.AccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated magnetic field from the magnetometer for the
              x, y and z axis.
              
              If you want to get the magnetic field periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.MagneticFieldCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetMagneticFieldPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated angular velocity from the gyroscope for the
              x, y and z axis in °/14.375s (you have to divide by 14.375 to
              get the value in °/s).
              
              If you want to get the angular velocity periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.AngularVelocityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetAngularVelocityPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAllData(System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the data from <see cref="M:Tinkerforge.BrickIMU.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)" />, <see cref="M:Tinkerforge.BrickIMU.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)" />
              and <see cref="M:Tinkerforge.BrickIMU.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)" /> as well as the temperature of the IMU Brick.
              
              If you want to get the data periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.AllDataCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetOrientation(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current orientation (roll, pitch, yaw) of the IMU Brick as Euler
              angles. Note that Euler angles always experience a
              `gimbal lock &lt;https://en.wikipedia.org/wiki/Gimbal_lock&gt;`__.
              
              We recommend that you use quaternions instead.
              
              The order to sequence in which the orientation values should be applied is
              roll, yaw, pitch.
              
              If you want to get the orientation periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.OrientationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetOrientationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetQuaternion(System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
              Returns the current orientation (x, y, z, w) of the IMU as
              `quaternions &lt;https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation&gt;`__.
              
              You can go from quaternions to Euler angles with the following formula::
              
               xAngle = atan2(2*y*w - 2*x*z, 1 - 2*y*y - 2*z*z)
               yAngle = atan2(2*x*w - 2*y*z, 1 - 2*x*x - 2*z*z)
               zAngle =  asin(2*x*y + 2*z*w)
              
              This process is not reversible, because of the
              `gimbal lock &lt;https://en.wikipedia.org/wiki/Gimbal_lock&gt;`__.
              
              It is also possible to calculate independent angles. You can calculate
              yaw, pitch and roll in a right-handed vehicle coordinate system according to
              DIN70000 with::
              
               yaw   =  atan2(2*x*y + 2*w*z, w*w + x*x - y*y - z*z)
               pitch = -asin(2*w*y - 2*x*z)
               roll  = -atan2(2*y*z + 2*w*x, -w*w + x*x + y*y - z*z))
              
              Converting the quaternions to an OpenGL transformation matrix is
              possible with the following formula::
              
               matrix = [[1 - 2*(y*y + z*z),     2*(x*y - w*z),     2*(x*z + w*y), 0],
                         [    2*(x*y + w*z), 1 - 2*(x*x + z*z),     2*(y*z - w*x), 0],
                         [    2*(x*z - w*y),     2*(y*z + w*x), 1 - 2*(x*x + y*y), 0],
                         [                0,                 0,                 0, 1]]
              
              If you want to get the quaternions periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMU.QuaternionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMU.SetQuaternionPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetIMUTemperature">
             <summary>
              Returns the temperature of the IMU Brick.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.LedsOn">
             <summary>
              Turns the orientation and direction LEDs of the IMU Brick on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.LedsOff">
             <summary>
              Turns the orientation and direction LEDs of the IMU Brick off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.AreLedsOn">
             <summary>
              Returns *true* if the orientation and direction LEDs of the IMU Brick
              are on, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetAccelerationRange(System.Byte)">
             <summary>
              Not implemented yet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAccelerationRange">
             <summary>
              Not implemented yet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetMagnetometerRange(System.Byte)">
             <summary>
              Not implemented yet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetMagnetometerRange">
             <summary>
              Not implemented yet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetConvergenceSpeed(System.Int32)">
             <summary>
              Sets the convergence speed of the IMU Brick. The convergence speed
              determines how the different sensor measurements are fused.
              
              If the orientation of the IMU Brick is off by 10° and the convergence speed is
              set to 20°/s, it will take 0.5s until the orientation is corrected. However,
              if the correct orientation is reached and the convergence speed is too high,
              the orientation will fluctuate with the fluctuations of the accelerometer and
              the magnetometer.
              
              If you set the convergence speed to 0, practically only the gyroscope is used
              to calculate the orientation. This gives very smooth movements, but errors of the
              gyroscope will not be corrected. If you set the convergence speed to something
              above 500, practically only the magnetometer and the accelerometer are used to
              calculate the orientation. In this case the movements are abrupt and the values
              will fluctuate, but there won't be any errors that accumulate over time.
              
              In an application with high angular velocities, we recommend a high convergence
              speed, so the errors of the gyroscope can be corrected fast. In applications with
              only slow movements we recommend a low convergence speed. You can change the
              convergence speed on the fly. So it is possible (and recommended) to increase
              the convergence speed before an abrupt movement and decrease it afterwards
              again.
              
              You might want to play around with the convergence speed in the Brick Viewer to
              get a feeling for a good value for your application.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetConvergenceSpeed">
             <summary>
              Returns the convergence speed as set by <see cref="M:Tinkerforge.BrickIMU.SetConvergenceSpeed(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetCalibration(System.Byte,System.Int16[])">
             <summary>
              There are several different types that can be calibrated:
              
              <code>
               "Type", "Description", "Values"
              
               "0",    "Accelerometer Gain", "``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``"
               "1",    "Accelerometer Bias", "``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``"
               "2",    "Magnetometer Gain",  "``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``"
               "3",    "Magnetometer Bias",  "``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``"
               "4",    "Gyroscope Gain",     "``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``"
               "5",    "Gyroscope Bias",     "``[bias xl, bias yl, bias zl, temp l, bias xh, bias yh, bias zh, temp h, 0, 0]``"
              </code>
              
              The calibration via gain and bias is done with the following formula::
              
               new_value = (bias + orig_value) * gain_mul / gain_div
              
              If you really want to write your own calibration software, please keep
              in mind that you first have to undo the old calibration (set bias to 0 and
              gain to 1/1) and that you have to average over several thousand values
              to obtain a usable result in the end.
              
              The gyroscope bias is highly dependent on the temperature, so you have to
              calibrate the bias two times with different temperatures. The values ``xl``,
              ``yl``, ``zl`` and ``temp l`` are the bias for ``x``, ``y``, ``z`` and the
              corresponding temperature for a low temperature. The values ``xh``, ``yh``,
              ``zh`` and ``temp h`` are the same for a high temperatures. The temperature
              difference should be at least 5°C. If you have a temperature where the
              IMU Brick is mostly used, you should use this temperature for one of the
              sampling points.
              
              <note>
               We highly recommend that you use the Brick Viewer to calibrate your
               IMU Brick.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetCalibration(System.Byte)">
             <summary>
              Returns the calibration for a given type as set by <see cref="M:Tinkerforge.BrickIMU.SetCalibration(System.Byte,System.Int16[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetAccelerationPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.AccelerationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAccelerationPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetMagneticFieldPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.MagneticFieldCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetMagneticFieldPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetMagneticFieldPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetAngularVelocityPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.AngularVelocityCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAngularVelocityPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetAngularVelocityPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetAllDataPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.AllDataCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetAllDataPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetOrientationPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.OrientationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetOrientationPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetOrientationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetQuaternionPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMU.QuaternionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetQuaternionPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMU.SetQuaternionPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OrientationCalculationOn">
             <summary>
              Turns the orientation calculation of the IMU Brick on.
              
              As default the calculation is on.
              
              .. versionadded:: 2.0.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OrientationCalculationOff">
             <summary>
              Turns the orientation calculation of the IMU Brick off.
              
              If the calculation is off, <see cref="M:Tinkerforge.BrickIMU.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" /> will return
              the last calculated value until the calculation is turned on again.
              
              The trigonometric functions that are needed to calculate the orientation
              are very expensive. We recommend to turn the orientation calculation
              off if the orientation is not needed, to free calculation time for the
              sensor fusion algorithm.
              
              As default the calculation is on.
              
              .. versionadded:: 2.0.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.IsOrientationCalculationOn">
             <summary>
              Returns *true* if the orientation calculation of the IMU Brick
              is on, *false* otherwise.
              
              .. versionadded:: 2.0.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickIMU.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickIMU.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.3.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickIMU.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.3.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickIMU.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickIMU.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickIMU.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnMagneticFieldCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnAngularVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnOrientationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMU.OnQuaternionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2">
             <summary>
              Full fledged AHRS with 9 degrees of freedom
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_MAGNETIC_FIELD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ANGULAR_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ORIENTATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_LINEAR_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_GRAVITY_VECTOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_QUATERNION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_LEDS_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_LEDS_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_ARE_LEDS_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SAVE_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_MAGNETIC_FIELD_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_MAGNETIC_FIELD_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_ANGULAR_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ANGULAR_VELOCITY_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_TEMPERATURE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_TEMPERATURE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_ORIENTATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ORIENTATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_LINEAR_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_LINEAR_ACCELERATION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_GRAVITY_VECTOR_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_GRAVITY_VECTOR_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_QUATERNION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_QUATERNION_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_SENSOR_FUSION_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SENSOR_FUSION_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_2HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_6HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_8HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_10HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_15HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_20HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.MAGNETOMETER_RATE_30HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_RANGE_2000DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_RANGE_1000DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_RANGE_500DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_RANGE_250DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_RANGE_125DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_523HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_230HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_116HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_47HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_23HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_12HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_64HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.GYROSCOPE_BANDWIDTH_32HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_RANGE_2G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_RANGE_4G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_RANGE_8G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_RANGE_16G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_7_81HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_15_63HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_31_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_62_5HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_125HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_250HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_500HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.ACCELEROMETER_BANDWIDTH_1000HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.SENSOR_FUSION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.SENSOR_FUSION_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.SENSOR_FUSION_ON_WITHOUT_MAGNETOMETER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.SENSOR_FUSION_ON_WITHOUT_FAST_MAGNETOMETER_CALIBRATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickIMUV2.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.AccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetAccelerationPeriod(System.Int64)" />. The parameters are the acceleration
              for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.AccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.Acceleration">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.MagneticFieldCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetMagneticFieldPeriod(System.Int64)" />. The parameters are the magnetic
              field for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.MagneticFieldEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.MagneticField">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.AngularVelocityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetAngularVelocityPeriod(System.Int64)" />. The parameters are the angular
              velocity for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.AngularVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.AngularVelocity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetTemperaturePeriod(System.Int64)" />. The parameter is the temperature.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.Temperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.LinearAccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetLinearAccelerationPeriod(System.Int64)" />. The parameters are the
              linear acceleration for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.LinearAccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.LinearAcceleration">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.GravityVectorCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetGravityVectorPeriod(System.Int64)" />. The parameters gravity vector
              for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.GravityVectorEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.GravityVector">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.OrientationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetOrientationPeriod(System.Int64)" />. The parameters are the orientation
              (heading (yaw), roll, pitch) of the IMU Brick in Euler angles. See
              <see cref="M:Tinkerforge.BrickIMUV2.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" /> for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.OrientationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.Orientation">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.QuaternionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetQuaternionPeriod(System.Int64)" />. The parameters are the orientation
              (w, x, y, z) of the IMU Brick in quaternions. See <see cref="M:Tinkerforge.BrickIMUV2.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)" />
              for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.QuaternionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.Quaternion">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickIMUV2.SetAllDataPeriod(System.Int64)" />. The parameters are as for
              <see cref="M:Tinkerforge.BrickIMUV2.GetAllData(System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickIMUV2.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickIMUV2.AllData">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated acceleration from the accelerometer for the
              x, y and z axis. The acceleration is in the range configured with
              <see cref="M:Tinkerforge.BrickIMUV2.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              If you want to get the acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.AccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated magnetic field from the magnetometer for the
              x, y and z axis.
              
              If you want to get the magnetic field periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.MagneticFieldCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetMagneticFieldPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated angular velocity from the gyroscope for the
              x, y and z axis. The angular velocity is in the range configured with
              <see cref="M:Tinkerforge.BrickIMUV2.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              If you want to get the angular velocity periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.AngularVelocityCallback" /> acallback nd set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetAngularVelocityPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetTemperature">
             <summary>
              Returns the temperature of the IMU Brick.
              The temperature is measured in the core of the BNO055 IC, it is not the
              ambient temperature
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetOrientation(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current orientation (heading, roll, pitch) of the IMU Brick as
              independent Euler angles. Note that Euler angles always
              experience a `gimbal lock &lt;https://en.wikipedia.org/wiki/Gimbal_lock&gt;`__.
              We recommend that you use quaternions instead, if you need the absolute
              orientation.
              
              If you want to get the orientation periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.OrientationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetOrientationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the linear acceleration of the IMU Brick for the
              x, y and z axis. The acceleration is in the range configured with
              <see cref="M:Tinkerforge.BrickIMUV2.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              The linear acceleration is the acceleration in each of the three
              axis of the IMU Brick with the influences of gravity removed.
              
              It is also possible to get the gravity vector with the influence of linear
              acceleration removed, see <see cref="M:Tinkerforge.BrickIMUV2.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)" />.
              
              If you want to get the linear acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.LinearAccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetLinearAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current gravity vector of the IMU Brick for the
              x, y and z axis.
              
              The gravity vector is the acceleration that occurs due to gravity.
              Influences of additional linear acceleration are removed.
              
              It is also possible to get the linear acceleration with the influence
              of gravity removed, see <see cref="M:Tinkerforge.BrickIMUV2.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)" />.
              
              If you want to get the gravity vector periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.GravityVectorCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetGravityVectorPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current orientation (w, x, y, z) of the IMU Brick as
              `quaternions &lt;https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation&gt;`__.
              
              You have to divide the return values by 16383 (14 bit) to get
              the usual range of -1.0 to +1.0 for quaternions.
              
              If you want to get the quaternions periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.QuaternionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetQuaternionPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAllData(System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16@,System.Byte@)">
             <summary>
              Return all of the available data of the IMU Brick.
              
              * acceleration (see <see cref="M:Tinkerforge.BrickIMUV2.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)" />)
              * magnetic field (see <see cref="M:Tinkerforge.BrickIMUV2.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)" />)
              * angular velocity (see <see cref="M:Tinkerforge.BrickIMUV2.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)" />)
              * Euler angles (see <see cref="M:Tinkerforge.BrickIMUV2.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" />)
              * quaternion (see <see cref="M:Tinkerforge.BrickIMUV2.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)" />)
              * linear acceleration (see <see cref="M:Tinkerforge.BrickIMUV2.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)" />)
              * gravity vector (see <see cref="M:Tinkerforge.BrickIMUV2.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)" />)
              * temperature (see <see cref="M:Tinkerforge.BrickIMUV2.GetTemperature" />)
              * calibration status (see below)
              
              The calibration status consists of four pairs of two bits. Each pair
              of bits represents the status of the current calibration.
              
              * bit 0-1: Magnetometer
              * bit 2-3: Accelerometer
              * bit 4-5: Gyroscope
              * bit 6-7: System
              
              A value of 0 means for "not calibrated" and a value of 3 means
              "fully calibrated". In your program you should always be able to
              ignore the calibration status, it is used by the calibration
              window of the Brick Viewer and it can be ignored after the first
              calibration. See the documentation in the calibration window for
              more information regarding the calibration of the IMU Brick.
              
              If you want to get the data periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickIMUV2.AllDataCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickIMUV2.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.LedsOn">
             <summary>
              Turns the orientation and direction LEDs of the IMU Brick on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.LedsOff">
             <summary>
              Turns the orientation and direction LEDs of the IMU Brick off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.AreLedsOn">
             <summary>
              Returns *true* if the orientation and direction LEDs of the IMU Brick
              are on, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SaveCalibration">
             <summary>
              A call of this function saves the current calibration to be used
              as a starting point for the next restart of continuous calibration
              of the IMU Brick.
              
              A return value of *true* means that the calibration could be used and
              *false* means that it could not be used (this happens if the calibration
              status is not "fully calibrated").
              
              This function is used by the calibration window of the Brick Viewer, you
              should not need to call it in your program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetAccelerationPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.AccelerationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAccelerationPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetMagneticFieldPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.MagneticFieldCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetMagneticFieldPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetMagneticFieldPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetAngularVelocityPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.AngularVelocityCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAngularVelocityPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetAngularVelocityPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetTemperaturePeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetTemperaturePeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetTemperaturePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetOrientationPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.OrientationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetOrientationPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetOrientationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetLinearAccelerationPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.LinearAccelerationCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetLinearAccelerationPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetLinearAccelerationPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetGravityVectorPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.GravityVectorCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetGravityVectorPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetGravityVectorPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetQuaternionPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.QuaternionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetQuaternionPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetQuaternionPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetAllDataPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickIMUV2.AllDataCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetAllDataPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickIMUV2.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the available sensor configuration for the Magnetometer, Gyroscope and
              Accelerometer. The Accelerometer Range is user selectable in all fusion modes,
              all other configurations are auto-controlled in fusion mode.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSensorConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the sensor configuration as set by <see cref="M:Tinkerforge.BrickIMUV2.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetSensorFusionMode(System.Byte)">
             <summary>
              If the fusion mode is turned off, the functions <see cref="M:Tinkerforge.BrickIMUV2.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)" />,
              <see cref="M:Tinkerforge.BrickIMUV2.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)" /> and <see cref="M:Tinkerforge.BrickIMUV2.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)" /> return uncalibrated
              and uncompensated sensor data. All other sensor data getters return no data.
              
              Since firmware version 2.0.6 you can also use a fusion mode without magnetometer.
              In this mode the calculated orientation is relative (with magnetometer it is
              absolute with respect to the earth). However, the calculation can't be influenced
              by spurious magnetic fields.
              
              Since firmware version 2.0.13 you can also use a fusion mode without fast
              magnetometer calibration. This mode is the same as the normal fusion mode,
              but the fast magnetometer calibration is turned off. So to find the orientation
              the first time will likely take longer, but small magnetic influences might
              not affect the automatic calibration as much.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSensorFusionMode">
             <summary>
              Returns the sensor fusion mode as set by <see cref="M:Tinkerforge.BrickIMUV2.SetSensorFusionMode(System.Byte)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.0.10$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.0.10$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.0.7$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickIMUV2.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickIMUV2.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnMagneticFieldCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnAngularVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnLinearAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnGravityVectorCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnOrientationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnQuaternionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickIMUV2.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster">
             <summary>
              Basis to build stacks and has 4 Bricklet ports
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_EXTENSION_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_EXTENSION_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_CHIBI_PRESENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_CHIBI_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_CHIBI_MASTER_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_MASTER_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_CHIBI_SLAVE_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_SLAVE_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_SIGNAL_STRENGTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_ERROR_LOG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_CHIBI_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_CHIBI_CHANNEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIBI_CHANNEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_RS485_PRESENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_RS485_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_RS485_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_RS485_SLAVE_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_RS485_SLAVE_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_RS485_ERROR_LOG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_RS485_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_RS485_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_WIFI_PRESENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_ENCRYPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_ENCRYPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_REFRESH_WIFI_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_CERTIFICATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_CERTIFICATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_POWER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_POWER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_BUFFER_INFO">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_REGULATORY_DOMAIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_REGULATORY_DOMAIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_USB_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_LONG_WIFI_KEY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_LONG_WIFI_KEY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_HOSTNAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_HOSTNAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_STACK_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_STACK_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_USB_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_USB_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_STACK_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_STACK_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_STACK_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_USB_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_USB_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_ETHERNET_PRESENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_ETHERNET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_ETHERNET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_ETHERNET_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_ETHERNET_HOSTNAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_ETHERNET_MAC_ADDRESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_ETHERNET_WEBSOCKET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_ETHERNET_WEBSOCKET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_ETHERNET_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_ETHERNET_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CONNECTION_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_WIFI2_PRESENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_START_WIFI2_BOOTLOADER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_WRITE_WIFI2_SERIAL_PORT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_READ_WIFI2_SERIAL_PORT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_AUTHENTICATION_SECRET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_CLIENT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_CLIENT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_CLIENT_HOSTNAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_CLIENT_HOSTNAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_CLIENT_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_CLIENT_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_AP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_AP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_AP_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_AP_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SAVE_WIFI2_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_FIRMWARE_VERSION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_ENABLE_WIFI2_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_DISABLE_WIFI2_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_WIFI2_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_MESH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_MESH_ROUTER_SSID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_ROUTER_SSID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_WIFI2_MESH_ROUTER_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_ROUTER_PASSWORD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_COMMON_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_CLIENT_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_WIFI2_MESH_AP_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_BRICKLET_XMC_FLASH_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_BRICKLET_XMC_FLASH_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_BRICKLETS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_BRICKLETS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.EXTENSION_TYPE_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.EXTENSION_TYPE_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.EXTENSION_TYPE_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.EXTENSION_TYPE_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.EXTENSION_TYPE_WIFI2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CHIBI_FREQUENCY_OQPSK_868_MHZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CHIBI_FREQUENCY_OQPSK_915_MHZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CHIBI_FREQUENCY_OQPSK_780_MHZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CHIBI_FREQUENCY_BPSK40_915_MHZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.RS485_PARITY_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.RS485_PARITY_EVEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.RS485_PARITY_ODD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_DHCP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_STATIC_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_ACCESS_POINT_DHCP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_ACCESS_POINT_STATIC_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_AD_HOC_DHCP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_CONNECTION_AD_HOC_STATIC_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_ENCRYPTION_WPA_WPA2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_ENCRYPTION_WPA_ENTERPRISE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_ENCRYPTION_WEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_ENCRYPTION_NO_ENCRYPTION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_OUTER_AUTH_EAP_FAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_OUTER_AUTH_EAP_TLS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_OUTER_AUTH_EAP_TTLS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_OUTER_AUTH_EAP_PEAP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_INNER_AUTH_EAP_MSCHAP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_INNER_AUTH_EAP_GTC">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_CERT_TYPE_CA_CERT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_CERT_TYPE_CLIENT_CERT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_EAP_OPTION_CERT_TYPE_PRIVATE_KEY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_STATE_DISASSOCIATED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_STATE_ASSOCIATED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_STATE_ASSOCIATING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_STATE_NOT_INITIALIZED_YET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_POWER_MODE_FULL_SPEED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_POWER_MODE_LOW_POWER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_DOMAIN_CHANNEL_1TO11">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_DOMAIN_CHANNEL_1TO13">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI_DOMAIN_CHANNEL_1TO14">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.ETHERNET_CONNECTION_DHCP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.ETHERNET_CONNECTION_STATIC_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.CONNECTION_TYPE_WIFI2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_PHY_MODE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_PHY_MODE_G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_PHY_MODE_N">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_CONNECTING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_WRONG_PASSWORD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_NO_AP_FOUND">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_CONNECT_FAILED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_GOT_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_CLIENT_STATUS_UNKNOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_AP_ENCRYPTION_OPEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_AP_ENCRYPTION_WEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_AP_ENCRYPTION_WPA_PSK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_AP_ENCRYPTION_WPA2_PSK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_AP_ENCRYPTION_WPA_WPA2_PSK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_WIFI_CONNECTING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_GOT_IP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_MESH_LOCAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_MESH_ONLINE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_AP_AVAILABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_AP_SETUP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.WIFI2_MESH_STATUS_LEAF_AVAILABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickMaster.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackCurrentCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackPeriod(System.Int64)" />. The parameter is the current
              of the sensor.
              
              The <see cref="E:Tinkerforge.BrickMaster.StackCurrentCallback" /> callback is only triggered if the current has changed
              since the last triggering.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.StackCurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackCurrent">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackVoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackPeriod(System.Int64)" />. The parameter is the voltage
              of the sensor.
              
              The <see cref="E:Tinkerforge.BrickMaster.StackVoltageCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.StackVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackVoltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.USBVoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackPeriod(System.Int64)" />. The parameter is the USB
              voltage.
              
              The <see cref="E:Tinkerforge.BrickMaster.USBVoltageCallback" /> callback is only triggered if the USB voltage has changed
              since the last triggering.
              
              Does not work with hardware version 2.1 or newer.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.USBVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.USBVoltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackCurrentReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the stack current.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickMaster.SetDebouncePeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.StackCurrentReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackCurrentReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackVoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the stack voltage.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickMaster.SetDebouncePeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.StackVoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.StackVoltageReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.USBVoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickMaster.SetDebouncePeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickMaster.USBVoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickMaster.USBVoltageReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackVoltage">
             <summary>
              Returns the stack voltage. The stack voltage is the
              voltage that is supplied via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
              
              <note>
               It is not possible to measure voltages supplied per PoE or USB with this function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackCurrent">
             <summary>
              Returns the stack current. The stack current is the
              current that is drawn via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
              
              <note>
               It is not possible to measure the current drawn via PoE or USB with this function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetExtensionType(System.Byte,System.Int64)">
             <summary>
              Writes the extension type to the EEPROM of a specified extension.
              The extension is either 0 or 1 (0 is the lower one, 1 is the upper one,
              if only one extension is present use 0).
              
              Possible extension types:
              
              <code>
               "Type", "Description"
              
               "1",    "Chibi"
               "2",    "RS485"
               "3",    "WIFI"
               "4",    "Ethernet"
               "5",    "WIFI 2.0"
              </code>
              
              The extension type is already set when bought and it can be set with the
              Brick Viewer, it is unlikely that you need this function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetExtensionType(System.Byte)">
             <summary>
              Returns the type for a given extension as set by <see cref="M:Tinkerforge.BrickMaster.SetExtensionType(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsChibiPresent">
             <summary>
              Returns *true* if the Master Brick is at position 0 in the stack and a Chibi
              Extension is available.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetChibiAddress(System.Byte)">
             <summary>
              Sets the address belonging to the Chibi Extension.
              
              It is possible to set the address with the Brick Viewer and it will be
              saved in the EEPROM of the Chibi Extension, it does not
              have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiAddress">
             <summary>
              Returns the address as set by <see cref="M:Tinkerforge.BrickMaster.SetChibiAddress(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetChibiMasterAddress(System.Byte)">
             <summary>
              Sets the address of the Chibi Master. This address is used if the
              Chibi Extension is used as slave (i.e. it does not have a USB connection).
              
              It is possible to set the address with the Brick Viewer and it will be
              saved in the EEPROM of the Chibi Extension, it does not
              have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiMasterAddress">
             <summary>
              Returns the address as set by <see cref="M:Tinkerforge.BrickMaster.SetChibiMasterAddress(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetChibiSlaveAddress(System.Byte,System.Byte)">
             <summary>
              Sets up to 254 slave addresses. 0 has a
              special meaning, it is used as list terminator and not allowed as normal slave
              address. The address numeration (via num parameter) has to be used
              ascending from 0. For example: If you use the Chibi Extension in Master mode
              (i.e. the stack has an USB connection) and you want to talk to three other
              Chibi stacks with the slave addresses 17, 23, and 42, you should call with
              ``(0, 17)``, ``(1, 23)``, ``(2, 42)`` and ``(3, 0)``. The last call with
              ``(3, 0)`` is a list terminator and indicates that the Chibi slave address
              list contains 3 addresses in this case.
              
              It is possible to set the addresses with the Brick Viewer, that will take care
              of correct address numeration and list termination.
              
              The slave addresses will be saved in the EEPROM of the Chibi Extension, they
              don't have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiSlaveAddress(System.Byte)">
             <summary>
              Returns the slave address for a given num as set by
              <see cref="M:Tinkerforge.BrickMaster.SetChibiSlaveAddress(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiSignalStrength">
             <summary>
              Returns the signal strength in dBm. The signal strength updates every time a
              packet is received.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiErrorLog(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns underrun, CRC error, no ACK and overflow error counts of the Chibi
              communication. If these errors start rising, it is likely that either the
              distance between two Chibi stacks is becoming too big or there are
              interferences.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetChibiFrequency(System.Byte)">
             <summary>
              Sets the Chibi frequency range for the Chibi Extension. Possible values are:
              
              <code>
               "Type", "Description"
              
               "0",    "OQPSK 868MHz (Europe)"
               "1",    "OQPSK 915MHz (US)"
               "2",    "OQPSK 780MHz (China)"
               "3",    "BPSK40 915MHz"
              </code>
              
              It is possible to set the frequency with the Brick Viewer and it will be
              saved in the EEPROM of the Chibi Extension, it does not
              have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiFrequency">
             <summary>
              Returns the frequency value as set by <see cref="M:Tinkerforge.BrickMaster.SetChibiFrequency(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetChibiChannel(System.Byte)">
             <summary>
              Sets the channel used by the Chibi Extension. Possible channels are
              different for different frequencies:
              
              <code>
               "Frequency", "Possible Channels"
              
               "OQPSK 868MHz (Europe)", "0"
               "OQPSK 915MHz (US)",     "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
               "OQPSK 780MHz (China)",  "0, 1, 2, 3"
               "BPSK40 915MHz",         "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
              </code>
              
              It is possible to set the channel with the Brick Viewer and it will be
              saved in the EEPROM of the Chibi Extension, it does not
              have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChibiChannel">
             <summary>
              Returns the channel as set by <see cref="M:Tinkerforge.BrickMaster.SetChibiChannel(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsRS485Present">
             <summary>
              Returns *true* if the Master Brick is at position 0 in the stack and a RS485
              Extension is available.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetRS485Address(System.Byte)">
             <summary>
              Sets the address (0-255) belonging to the RS485 Extension.
              
              Set to 0 if the RS485 Extension should be the RS485 Master (i.e.
              connected to a PC via USB).
              
              It is possible to set the address with the Brick Viewer and it will be
              saved in the EEPROM of the RS485 Extension, it does not
              have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetRS485Address">
             <summary>
              Returns the address as set by <see cref="M:Tinkerforge.BrickMaster.SetRS485Address(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetRS485SlaveAddress(System.Byte,System.Byte)">
             <summary>
              Sets up to 255 slave addresses. Valid addresses are in range 1-255. 0 has a
              special meaning, it is used as list terminator and not allowed as normal slave
              address. The address numeration (via ``num`` parameter) has to be used
              ascending from 0. For example: If you use the RS485 Extension in Master mode
              (i.e. the stack has an USB connection) and you want to talk to three other
              RS485 stacks with the addresses 17, 23, and 42, you should call with
              ``(0, 17)``, ``(1, 23)``, ``(2, 42)`` and ``(3, 0)``. The last call with
              ``(3, 0)`` is a list terminator and indicates that the RS485 slave address list
              contains 3 addresses in this case.
              
              It is possible to set the addresses with the Brick Viewer, that will take care
              of correct address numeration and list termination.
              
              The slave addresses will be saved in the EEPROM of the Chibi Extension, they
              don't have to be set on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetRS485SlaveAddress(System.Byte)">
             <summary>
              Returns the slave address for a given ``num`` as set by
              <see cref="M:Tinkerforge.BrickMaster.SetRS485SlaveAddress(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetRS485ErrorLog">
             <summary>
              Returns CRC error counts of the RS485 communication.
              If this counter starts rising, it is likely that the distance
              between the RS485 nodes is too big or there is some kind of
              interference.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetRS485Configuration(System.Int64,System.Char,System.Byte)">
             <summary>
              Sets the configuration of the RS485 Extension. The
              Master Brick will try to match the given baud rate as exactly as possible.
              The maximum recommended baud rate is 2000000 (2MBd).
              Possible values for parity are 'n' (none), 'e' (even) and 'o' (odd).
              
              If your RS485 is unstable (lost messages etc.), the first thing you should
              try is to decrease the speed. On very large bus (e.g. 1km), you probably
              should use a value in the range of 100000 (100kBd).
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetRS485Configuration(System.Int64@,System.Char@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetRS485Configuration(System.Int64,System.Char,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsWifiPresent">
             <summary>
              Returns *true* if the Master Brick is at position 0 in the stack and a WIFI
              Extension is available.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiConfiguration(System.String,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Int32)">
             <summary>
              Sets the configuration of the WIFI Extension. The ``ssid`` can have a max length
              of 32 characters. Possible values for ``connection`` are:
              
              <code>
               "Value", "Description"
              
               "0", "DHCP"
               "1", "Static IP"
               "2", "Access Point: DHCP"
               "3", "Access Point: Static IP"
               "4", "Ad Hoc: DHCP"
               "5", "Ad Hoc: Static IP"
              </code>
              
              If you set ``connection`` to one of the static IP options then you have to
              supply ``ip``, ``subnet_mask`` and ``gateway`` as an array of size 4 (first
              element of the array is the least significant byte of the address). If
              ``connection`` is set to one of the DHCP options then ``ip``, ``subnet_mask``
              and ``gateway`` are ignored, you can set them to 0.
              
              The last parameter is the port that your program will connect to.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the WIFI configuration.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiConfiguration(System.String@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiConfiguration(System.String,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiEncryption(System.Byte,System.String,System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
             <summary>
              Sets the encryption of the WIFI Extension. The first parameter is the
              type of the encryption. Possible values are:
              
              <code>
               "Value", "Description"
              
               "0", "WPA/WPA2"
               "1", "WPA Enterprise (EAP-FAST, EAP-TLS, EAP-TTLS, PEAP)"
               "2", "WEP"
               "3", "No Encryption"
              </code>
              
              The ``key`` has a max length of 50 characters and is used if ``encryption``
              is set to 0 or 2 (WPA/WPA2 or WEP). Otherwise the value is ignored.
              
              For WPA/WPA2 the key has to be at least 8 characters long. If you want to set
              a key with more than 50 characters, see <see cref="M:Tinkerforge.BrickMaster.SetLongWifiKey(System.String)" />.
              
              For WEP the key has to be either 10 or 26 hexadecimal digits long. It is
              possible to set the WEP ``key_index`` (1-4). If you don't know your
              ``key_index``, it is likely 1.
              
              If you choose WPA Enterprise as encryption, you have to set ``eap_options`` and
              the length of the certificates (for other encryption types these parameters
              are ignored). The certificates
              themselves can be set with <see cref="M:Tinkerforge.BrickMaster.SetWifiCertificate(System.Int32,System.Byte[],System.Byte)" />. ``eap_options`` consist
              of the outer authentication (bits 1-2), inner authentication (bit 3) and
              certificate type (bits 4-5):
              
              <code>
               "Option", "Bits", "Description"
              
               "outer authentication", "1-2", "0=EAP-FAST, 1=EAP-TLS, 2=EAP-TTLS, 3=EAP-PEAP"
               "inner authentication", "3", "0=EAP-MSCHAP, 1=EAP-GTC"
               "certificate type", "4-5", "0=CA Certificate, 1=Client Certificate, 2=Private Key"
              </code>
              
              Example for EAP-TTLS + EAP-GTC + Private Key: ``option = 2 | (1 &lt;&lt; 2) | (2 &lt;&lt; 3)``.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the Wi-Fi encryption.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiEncryption(System.Byte@,System.String@,System.Byte@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the encryption as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiEncryption(System.Byte,System.String,System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)" />.
              
              <note>
               Since Master Brick Firmware version 2.4.4 the key is not returned anymore.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiStatus(System.Byte[]@,System.Byte[]@,System.Byte@,System.Int16@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.Byte@)">
             <summary>
              Returns the status of the WIFI Extension. The ``state`` is updated automatically,
              all of the other parameters are updated on startup and every time
              <see cref="M:Tinkerforge.BrickMaster.RefreshWifiStatus" /> is called.
              
              Possible states are:
              
              <code>
               "State", "Description"
              
               "0", "Disassociated"
               "1", "Associated"
               "2", "Associating"
               "3", "Error"
               "255", "Not initialized yet"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.RefreshWifiStatus">
             <summary>
              Refreshes the Wi-Fi status (see <see cref="M:Tinkerforge.BrickMaster.GetWifiStatus(System.Byte[]@,System.Byte[]@,System.Byte@,System.Int16@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.Byte@)" />). To read the status
              of the Wi-Fi module, the Master Brick has to change from data mode to
              command mode and back. This transaction and the readout itself is
              unfortunately time consuming. This means, that it might take some ms
              until the stack with attached WIFI Extension reacts again after this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiCertificate(System.Int32,System.Byte[],System.Byte)">
             <summary>
              This function is used to set the certificate as well as password and username
              for WPA Enterprise. To set the username use index 0xFFFF,
              to set the password use index 0xFFFE. The max length of username and
              password is 32.
              
              The certificate is written in chunks of size 32 and the index is used as
              the index of the chunk. ``data_length`` should nearly always be 32. Only
              the last chunk can have a length that is not equal to 32.
              
              The starting index of the CA Certificate is 0, of the Client Certificate
              10000 and for the Private Key 20000. Maximum sizes are 1312, 1312 and
              4320 byte respectively.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after uploading the certificate.
              
              It is recommended to use the Brick Viewer to set the certificate, username
              and password.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiCertificate(System.Int32,System.Byte[]@,System.Byte@)">
             <summary>
              Returns the certificate for a given index as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiCertificate(System.Int32,System.Byte[],System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiPowerMode(System.Byte)">
             <summary>
              Sets the power mode of the WIFI Extension. Possible modes are:
              
              <code>
               "Mode", "Description"
              
               "0", "Full Speed (high power consumption, high throughput)"
               "1", "Low Power (low power consumption, low throughput)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiPowerMode">
             <summary>
              Returns the power mode as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiPowerMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiBufferInfo(System.Int64@,System.Int32@,System.Int32@)">
             <summary>
              Returns informations about the Wi-Fi receive buffer. The Wi-Fi
              receive buffer has a max size of 1500 byte and if data is transfered
              too fast, it might overflow.
              
              The return values are the number of overflows, the low watermark
              (i.e. the smallest number of bytes that were free in the buffer) and
              the bytes that are currently used.
              
              You should always try to keep the buffer empty, otherwise you will
              have a permanent latency. A good rule of thumb is, that you can transfer
              1000 messages per second without problems.
              
              Try to not send more then 50 messages at a time without any kind of
              break between them.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiRegulatoryDomain(System.Byte)">
             <summary>
              Sets the regulatory domain of the WIFI Extension. Possible domains are:
              
              <code>
               "Domain", "Description"
              
               "0", "FCC: Channel 1-11 (N/S America, Australia, New Zealand)"
               "1", "ETSI: Channel 1-13 (Europe, Middle East, Africa)"
               "2", "TELEC: Channel 1-14 (Japan)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiRegulatoryDomain">
             <summary>
              Returns the regulatory domain as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiRegulatoryDomain(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetUSBVoltage">
             <summary>
              Returns the USB voltage. Does not work with hardware version 2.1 or newer.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetLongWifiKey(System.String)">
             <summary>
              Sets a long Wi-Fi key (up to 63 chars, at least 8 chars) for WPA encryption.
              This key will be used
              if the key in <see cref="M:Tinkerforge.BrickMaster.SetWifiEncryption(System.Byte,System.String,System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)" /> is set to "-". In the old protocol,
              a payload of size 63 was not possible, so the maximum key length was 50 chars.
              
              With the new protocol this is possible, since we didn't want to break API,
              this function was added additionally.
              
              .. versionadded:: 2.0.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetLongWifiKey">
             <summary>
              Returns the encryption key as set by <see cref="M:Tinkerforge.BrickMaster.SetLongWifiKey(System.String)" />.
              
              <note>
               Since Master Brick firmware version 2.4.4 the key is not returned anymore.
              </note>
              
              .. versionadded:: 2.0.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiHostname(System.String)">
             <summary>
              Sets the hostname of the WIFI Extension. The hostname will be displayed
              by access points as the hostname in the DHCP clients table.
              
              Setting an empty String will restore the default hostname.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiHostname">
             <summary>
              Returns the hostname as set by <see cref="M:Tinkerforge.BrickMaster.SetWifiHostname(System.String)" />.
              
              An empty String means, that the default hostname is used.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickMaster.StackCurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickMaster.StackCurrentCallback" /> callback is only triggered if the current has changed
              since the last triggering.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackCurrentCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackPeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickMaster.StackVoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickMaster.StackVoltageCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackPeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickMaster.USBVoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickMaster.USBVoltageCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetUSBVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackPeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickMaster.StackCurrentReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the current is *outside* the min and max values"
               "'i'",    "Callback is triggered when the current is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the current is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the current is greater than the min value (max is ignored)"
              </code>
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackCurrentCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickMaster.StackVoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetStackVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickMaster.USBVoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetUSBVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickMaster.StackCurrentReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickMaster.StackVoltageReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickMaster.USBVoltageReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickMaster.SetStackCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickMaster.SetStackVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickMaster.SetUSBVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickMaster.SetDebouncePeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsEthernetPresent">
             <summary>
              Returns *true* if the Master Brick is at position 0 in the stack and an Ethernet
              Extension is available.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetEthernetConfiguration(System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Int32)">
             <summary>
              Sets the configuration of the Ethernet Extension. Possible values for
              ``connection`` are:
              
              <code>
               "Value", "Description"
              
               "0", "DHCP"
               "1", "Static IP"
              </code>
              
              If you set ``connection`` to static IP options then you have to supply ``ip``,
              ``subnet_mask`` and ``gateway`` as an array of size 4 (first element of the
              array is the least significant byte of the address). If ``connection`` is set
              to the DHCP options then ``ip``, ``subnet_mask`` and ``gateway`` are ignored,
              you can set them to 0.
              
              The last parameter is the port that your program will connect to.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the Ethernet configuration.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetEthernetConfiguration(System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetEthernetConfiguration(System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Int32)" />.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetEthernetStatus(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.String@)">
             <summary>
              Returns the status of the Ethernet Extension.
              
              ``mac_address``, ``ip``, ``subnet_mask`` and ``gateway`` are given as an array.
              The first element of the array is the least significant byte of the address.
              
              ``rx_count`` and ``tx_count`` are the number of bytes that have been
              received/send since last restart.
              
              ``hostname`` is the currently used hostname.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetEthernetHostname(System.String)">
             <summary>
              Sets the hostname of the Ethernet Extension. The hostname will be displayed
              by access points as the hostname in the DHCP clients table.
              
              Setting an empty String will restore the default hostname.
              
              The current hostname can be discovered with <see cref="M:Tinkerforge.BrickMaster.GetEthernetStatus(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.String@)" />.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetEthernetMACAddress(System.Byte[])">
             <summary>
              Sets the MAC address of the Ethernet Extension. The Ethernet Extension should
              come configured with a valid MAC address, that is also written on a
              sticker of the extension itself.
              
              The MAC address can be read out again with <see cref="M:Tinkerforge.BrickMaster.GetEthernetStatus(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.String@)" />.
              
              .. versionadded:: 2.1.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetEthernetWebsocketConfiguration(System.Byte,System.Int32)">
             <summary>
              Sets the Ethernet WebSocket configuration. The first parameter sets the number of socket
              connections that are reserved for WebSockets. The range is 0-7. The connections
              are shared with the plain sockets. Example: If you set the connections to 3,
              there will be 3 WebSocket and 4 plain socket connections available.
              
              The second parameter is the port for the WebSocket connections. The port can
              not be the same as the port for the plain socket connections.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the Ethernet configuration.
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetEthernetWebsocketConfiguration(System.Byte@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetEthernetConfiguration(System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Int32)" />.
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetEthernetAuthenticationSecret(System.String)">
             <summary>
              Sets the Ethernet authentication secret. The secret can be a string of up to 64
              characters. An empty string disables the authentication.
              
              See the :ref:`authentication tutorial &lt;tutorial_authentication&gt;` for more
              information.
              
              The secret is stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the Ethernet authentication secret.
              
              The default value is an empty string (authentication disabled).
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetEthernetAuthenticationSecret">
             <summary>
              Returns the authentication secret as set by
              <see cref="M:Tinkerforge.BrickMaster.SetEthernetAuthenticationSecret(System.String)" />.
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifiAuthenticationSecret(System.String)">
             <summary>
              Sets the WIFI authentication secret. The secret can be a string of up to 64
              characters. An empty string disables the authentication.
              
              See the :ref:`authentication tutorial &lt;tutorial_authentication&gt;` for more
              information.
              
              The secret is stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              It is recommended to use the Brick Viewer to set the WIFI authentication secret.
              
              The default value is an empty string (authentication disabled).
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifiAuthenticationSecret">
             <summary>
              Returns the authentication secret as set by
              <see cref="M:Tinkerforge.BrickMaster.SetWifiAuthenticationSecret(System.String)" />.
              
              .. versionadded:: 2.2.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetConnectionType">
             <summary>
              Returns the type of the connection over which this function was called.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsWifi2Present">
             <summary>
              Returns *true* if the Master Brick is at position 0 in the stack and a WIFI
              Extension 2.0 is available.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.StartWifi2Bootloader">
             <summary>
              Starts the bootloader of the WIFI Extension 2.0. Returns 0 on success.
              Afterwards the <see cref="M:Tinkerforge.BrickMaster.WriteWifi2SerialPort(System.Byte[],System.Byte)" /> and <see cref="M:Tinkerforge.BrickMaster.ReadWifi2SerialPort(System.Byte,System.Byte[]@,System.Byte@)" />
              functions can be used to communicate with the bootloader to flash a new
              firmware.
              
              The bootloader should only be started over a USB connection. It cannot be
              started over a WIFI2 connection, see the <see cref="M:Tinkerforge.BrickMaster.GetConnectionType" /> function.
              
              It is recommended to use the Brick Viewer to update the firmware of the WIFI
              Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.WriteWifi2SerialPort(System.Byte[],System.Byte)">
             <summary>
              Writes up to 60 bytes (number of bytes to be written specified by ``length``)
              to the serial port of the bootloader of the WIFI Extension 2.0. Returns 0 on
              success.
              
              Before this function can be used the bootloader has to be started using the
              <see cref="M:Tinkerforge.BrickMaster.StartWifi2Bootloader" /> function.
              
              It is recommended to use the Brick Viewer to update the firmware of the WIFI
              Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.ReadWifi2SerialPort(System.Byte,System.Byte[]@,System.Byte@)">
             <summary>
              Reads up to 60 bytes (number of bytes to be read specified by ``length``)
              from the serial port of the bootloader of the WIFI Extension 2.0.
              Returns the number of actually read bytes.
              
              Before this function can be used the bootloader has to be started using the
              <see cref="M:Tinkerforge.BrickMaster.StartWifi2Bootloader" /> function.
              
              It is recommended to use the Brick Viewer to update the firmware of the WIFI
              Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2AuthenticationSecret(System.String)">
             <summary>
              Sets the WIFI authentication secret. The secret can be a string of up to 64
              characters. An empty string disables the authentication. The default value is
              an empty string (authentication disabled).
              
              See the :ref:`authentication tutorial &lt;tutorial_authentication&gt;` for more
              information.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2AuthenticationSecret">
             <summary>
              Returns the WIFI authentication secret as set by
              <see cref="M:Tinkerforge.BrickMaster.SetWifi2AuthenticationSecret(System.String)" />.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2Configuration(System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the general configuration of the WIFI Extension 2.0.
              
              The ``port`` parameter sets the port number that your programm will connect
              to.
              
              The ``websocket_port`` parameter sets the WebSocket port number that your
              JavaScript programm will connect to.
              
              The ``website_port`` parameter sets the port number for the website of the
              WIFI Extension 2.0.
              
              The ``phy_mode`` parameter sets the specific wireless network mode to be used.
              Possible values are B, G and N.
              
              The ``sleep_mode`` parameter is currently unused.
              
              The ``website`` parameter is used to enable or disable the web interface of
              the WIFI Extension 2.0, which is available from firmware version 2.0.1. Note
              that, for firmware version 2.0.3 and older, to disable the the web interface
              the ``website_port`` parameter must be set to 1 and greater than 1 to enable
              the web interface. For firmware version 2.0.4 and later, setting this parameter
              to 1 will enable the web interface and setting it to 0 will disable the web
              interface.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2Configuration(System.Int32@,System.Int32@,System.Int32@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the general configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2Configuration(System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2Status(System.Boolean@,System.Byte@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.Int16@,System.Boolean@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Int64@,System.Int64@,System.Byte@)">
             <summary>
              Returns the client and access point status of the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2ClientConfiguration(System.Boolean,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             <summary>
              Sets the client specific configuration of the WIFI Extension 2.0.
              
              The ``enable`` parameter enables or disables the client part of the
              WIFI Extension 2.0.
              
              The ``ssid`` parameter sets the SSID (up to 32 characters) of the access point
              to connect to.
              
              If the ``ip`` parameter is set to all zero then ``subnet_mask`` and ``gateway``
              parameters are also set to all zero and DHCP is used for IP address configuration.
              Otherwise those three parameters can be used to configure a static IP address.
              The default configuration is DHCP.
              
              If the ``mac_address`` parameter is set to all zero then the factory MAC
              address is used. Otherwise this parameter can be used to set a custom MAC
              address.
              
              If the ``bssid`` parameter is set to all zero then WIFI Extension 2.0 will
              connect to any access point that matches the configured SSID. Otherwise this
              parameter can be used to make the WIFI Extension 2.0 only connect to an
              access point if SSID and BSSID match.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2ClientConfiguration(System.Boolean@,System.String@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
             <summary>
              Returns the client configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2ClientConfiguration(System.Boolean,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])" />.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2ClientHostname(System.String)">
             <summary>
              Sets the client hostname (up to 32 characters) of the WIFI Extension 2.0. The
              hostname will be displayed by access points as the hostname in the DHCP clients
              table.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2ClientHostname">
             <summary>
              Returns the client hostname as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2ClientHostname(System.String)" />.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2ClientPassword(System.String)">
             <summary>
              Sets the client password (up to 63 chars) for WPA/WPA2 encryption.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2ClientPassword">
             <summary>
              Returns the client password as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2ClientPassword(System.String)" />.
              
              <note>
               Since WIFI Extension 2.0 firmware version 2.1.3 the password is not
               returned anymore.
              </note>
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2APConfiguration(System.Boolean,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Boolean,System.Byte,System.Byte[])">
             <summary>
              Sets the access point specific configuration of the WIFI Extension 2.0.
              
              The ``enable`` parameter enables or disables the access point part of the
              WIFI Extension 2.0.
              
              The ``ssid`` parameter sets the SSID (up to 32 characters) of the access point.
              
              If the ``ip`` parameter is set to all zero then ``subnet_mask`` and ``gateway``
              parameters are also set to all zero and DHCP is used for IP address configuration.
              Otherwise those three parameters can be used to configure a static IP address.
              The default configuration is DHCP.
              
              The ``encryption`` parameter sets the encryption mode to be used. Possible
              values are Open (no encryption), WEP or WPA/WPA2 PSK.
              Use the <see cref="M:Tinkerforge.BrickMaster.SetWifi2APPassword(System.String)" /> function to set the encryption
              password.
              
              The ``hidden`` parameter makes the access point hide or show its SSID.
              
              The ``channel`` parameter sets the channel (1 to 13) of the access point.
              
              If the ``mac_address`` parameter is set to all zero then the factory MAC
              address is used. Otherwise this parameter can be used to set a custom MAC
              address.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2APConfiguration(System.Boolean@,System.String@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte@,System.Boolean@,System.Byte@,System.Byte[]@)">
             <summary>
              Returns the access point configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2APConfiguration(System.Boolean,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Boolean,System.Byte,System.Byte[])" />.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2APPassword(System.String)">
             <summary>
              Sets the access point password (at least 8 and up to 63 chars) for the configured encryption
              mode, see <see cref="M:Tinkerforge.BrickMaster.SetWifi2APConfiguration(System.Boolean,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Boolean,System.Byte,System.Byte[])" />.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2APPassword">
             <summary>
              Returns the access point password as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2APPassword(System.String)" />.
              
              <note>
               Since WIFI Extension 2.0 firmware version 2.1.3 the password is not
               returned anymore.
              </note>
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SaveWifi2Configuration">
             <summary>
              All configuration functions for the WIFI Extension 2.0 do not change the
              values permanently. After configuration this function has to be called to
              permanently store the values.
              
              The values are stored in the EEPROM and only applied on startup. That means
              you have to restart the Master Brick after configuration.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2FirmwareVersion">
             <summary>
              Returns the current version of the WIFI Extension 2.0 firmware.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.EnableWifi2StatusLED">
             <summary>
              Turns the green status LED of the WIFI Extension 2.0 on.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.DisableWifi2StatusLED">
             <summary>
              Turns the green status LED of the WIFI Extension 2.0 off.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsWifi2StatusLEDEnabled">
             <summary>
              Returns *true* if the green status LED of the WIFI Extension 2.0 is turned on.
              
              .. versionadded:: 2.4.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2MeshConfiguration(System.Boolean,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Byte[],System.Int32)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Sets the mesh specific configuration of the WIFI Extension 2.0.
              
              The ``enable`` parameter enables or disables the mesh part of the
              WIFI Extension 2.0. The mesh part cannot be
              enabled together with the client and access-point part.
              
              If the ``root_ip`` parameter is set to all zero then ``root_subnet_mask``
              and ``root_gateway`` parameters are also set to all zero and DHCP is used for
              IP address configuration. Otherwise those three parameters can be used to
              configure a static IP address. The default configuration is DHCP.
              
              If the ``router_bssid`` parameter is set to all zero then the information is
              taken from Wi-Fi scan when connecting the SSID as set by
              <see cref="M:Tinkerforge.BrickMaster.SetWifi2MeshRouterSSID(System.String)" />. This only works if the the SSID is not hidden.
              In case the router has hidden SSID this parameter must be specified, otherwise
              the node will not be able to reach the mesh router.
              
              The ``group_id`` and the ``group_ssid_prefix`` parameters identifies a
              particular mesh network and nodes configured with same ``group_id`` and the
              ``group_ssid_prefix`` are considered to be in the same mesh network.
              
              The ``gateway_ip`` and the ``gateway_port`` parameters specifies the location
              of the brickd that supports mesh feature.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshConfiguration(System.Boolean@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.String@,System.Byte[]@,System.Int32@)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the mesh configuration as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2MeshConfiguration(System.Boolean,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Byte[],System.Int32)" />.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2MeshRouterSSID(System.String)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Sets the mesh router SSID of the WIFI Extension 2.0.
              It is used to specify the mesh router to connect to.
              
              Note that even though in the argument of this function a 32 characters long SSID
              is allowed, in practice valid SSID should have a maximum of 31 characters. This
              is due to a bug in the mesh library that we use in the firmware of the extension.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshRouterSSID">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the mesh router SSID as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2MeshRouterSSID(System.String)" />.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetWifi2MeshRouterPassword(System.String)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Sets the mesh router password (up to 64 characters) for WPA/WPA2 encryption.
              The password will be used to connect to the mesh router.
              
              To apply configuration changes to the WIFI Extension 2.0 the
              <see cref="M:Tinkerforge.BrickMaster.SaveWifi2Configuration" /> function has to be called and the Master Brick
              has to be restarted afterwards.
              
              It is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshRouterPassword">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the mesh router password as set by <see cref="M:Tinkerforge.BrickMaster.SetWifi2MeshRouterPassword(System.String)" />.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshCommonStatus(System.Byte@,System.Boolean@,System.Boolean@,System.Int32@,System.Int64@,System.Int64@)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the common mesh status of the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshClientStatus(System.String@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the mesh client status of the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetWifi2MeshAPStatus(System.String@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
             <summary>
              Requires WIFI Extension 2.0 firmware 2.1.0.
              
              Returns the mesh AP status of the WIFI Extension 2.0.
              
              .. versionadded:: 2.4.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetBrickletXMCFlashConfig(System.Int64,System.Int64,System.Int64,System.Byte[],System.Int64@,System.Byte[]@)">
             <summary>
              This function is for internal use to flash the initial
              bootstrapper and bootloader to the Bricklets.
              
              If you need to flash a boostrapper/bootloader (for exmaple
              because you made your own Bricklet from scratch) please
              take a look at our open source flash and test tool at
              `https://github.com/Tinkerforge/flash-test &lt;https://github.com/Tinkerforge/flash-test&gt;`__
              
              Don't use this function directly.
              
              .. versionadded:: 2.5.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetBrickletXMCFlashData(System.Byte[])">
             <summary>
              This function is for internal use to flash the initial
              bootstrapper and bootloader to the Bricklets.
              
              If you need to flash a boostrapper/bootloader (for exmaple
              because you made your own Bricklet from scratch) please
              take a look at our open source flash and test tool at
              `https://github.com/Tinkerforge/flash-test &lt;https://github.com/Tinkerforge/flash-test&gt;`__
              
              Don't use this function directly.
              
              .. versionadded:: 2.5.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetBrickletsEnabled(System.Boolean)">
             <summary>
              This function is only available in Master Brick hardware version &gt;= 3.0.
              
              Enables/disables all four Bricklets if set to true/false.
              
              If you disable the Bricklets the power supply to the Bricklets will be disconnected.
              The Bricklets will lose all configurations if disabled.
              
              .. versionadded:: 2.5.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetBrickletsEnabled">
             <summary>
              Returns *true* if the Bricklets are enabled, *false* otherwise.
              
              .. versionadded:: 2.5.0$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickMaster.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickMaster.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.4.6$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickMaster.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.4.6$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.4.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickMaster.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickMaster.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.4.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickMaster.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.4.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.4.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnStackCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnStackVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnUSBVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnStackCurrentReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnStackVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickMaster.OnUSBVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED">
             <summary>
              Executes user programs and controls other Bricks/Bricklets standalone
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_CREATE_SESSION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_EXPIRE_SESSION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_EXPIRE_SESSION_UNCHECKED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_KEEP_SESSION_ALIVE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_RELEASE_OBJECT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_RELEASE_OBJECT_UNCHECKED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_ALLOCATE_STRING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_TRUNCATE_STRING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_STRING_LENGTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_STRING_CHUNK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_STRING_CHUNK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_ALLOCATE_LIST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_LIST_LENGTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_LIST_ITEM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_APPEND_TO_LIST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_REMOVE_FROM_LIST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_OPEN_FILE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_CREATE_PIPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_FILE_INFO">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_READ_FILE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_READ_FILE_ASYNC">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_ABORT_ASYNC_FILE_READ">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_WRITE_FILE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_WRITE_FILE_UNCHECKED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_WRITE_FILE_ASYNC">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_FILE_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_FILE_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_FILE_EVENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_FILE_EVENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_OPEN_DIRECTORY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_DIRECTORY_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_NEXT_DIRECTORY_ENTRY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_REWIND_DIRECTORY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_CREATE_DIRECTORY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROCESSES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SPAWN_PROCESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_KILL_PROCESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROCESS_COMMAND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROCESS_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROCESS_STDIO">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROCESS_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAMS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_DEFINE_PROGRAM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_PURGE_PROGRAM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_IDENTIFIER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_ROOT_DIRECTORY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_PROGRAM_COMMAND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_COMMAND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_PROGRAM_STDIO_REDIRECTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_STDIO_REDIRECTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_PROGRAM_SCHEDULE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_SCHEDULE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_PROGRAM_SCHEDULER_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_CONTINUE_PROGRAM_SCHEDULE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_START_PROGRAM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_LAST_SPAWNED_PROGRAM_PROCESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_CUSTOM_PROGRAM_OPTION_NAMES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_SET_CUSTOM_PROGRAM_OPTION_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_CUSTOM_PROGRAM_OPTION_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_REMOVE_CUSTOM_PROGRAM_OPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_SUCCESS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_UNKNOWN_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_INVALID_OPERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_OPERATION_ABORTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_INTERNAL_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_UNKNOWN_SESSION_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NO_FREE_SESSION_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_UNKNOWN_OBJECT_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NO_FREE_OBJECT_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_OBJECT_IS_LOCKED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NO_MORE_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_WRONG_LIST_ITEM_TYPE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_PROGRAM_IS_PURGED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_INVALID_PARAMETER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NO_FREE_MEMORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NO_FREE_SPACE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_ACCESS_DENIED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_ALREADY_EXISTS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_DOES_NOT_EXIST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_INTERRUPTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_IS_DIRECTORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NOT_A_DIRECTORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_WOULD_BLOCK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_OVERFLOW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_BAD_FILE_DESCRIPTOR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_OUT_OF_RANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NAME_TOO_LONG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_INVALID_SEEK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_NOT_SUPPORTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.ERROR_CODE_TOO_MANY_OPEN_FILES">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_STRING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_LIST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_FILE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_DIRECTORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_PROCESS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.OBJECT_TYPE_PROGRAM">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_READ_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_WRITE_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_READ_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_APPEND">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_CREATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_EXCLUSIVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_NON_BLOCKING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_TRUNCATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_TEMPORARY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_FLAG_REPLACE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_USER_ALL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_USER_READ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_USER_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_USER_EXECUTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_GROUP_ALL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_GROUP_READ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_GROUP_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_GROUP_EXECUTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_OTHERS_ALL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_OTHERS_READ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_OTHERS_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_PERMISSION_OTHERS_EXECUTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PIPE_FLAG_NON_BLOCKING_READ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PIPE_FLAG_NON_BLOCKING_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_UNKNOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_REGULAR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_DIRECTORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_CHARACTER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_BLOCK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_FIFO">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_SYMLINK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_SOCKET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_TYPE_PIPE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_ORIGIN_BEGINNING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_ORIGIN_CURRENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_ORIGIN_END">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_EVENT_READABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.FILE_EVENT_WRITABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_UNKNOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_REGULAR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_DIRECTORY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_CHARACTER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_BLOCK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_FIFO">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_SYMLINK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_ENTRY_TYPE_SOCKET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_FLAG_RECURSIVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.DIRECTORY_FLAG_EXCLUSIVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_INTERRUPT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_QUIT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_ABORT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_KILL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_USER1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_USER2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_TERMINATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_CONTINUE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_SIGNAL_STOP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_UNKNOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_RUNNING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_EXITED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_KILLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROCESS_STATE_STOPPED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_DEV_NULL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_PIPE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_FILE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_INDIVIDUAL_LOG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_CONTINUOUS_LOG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_STDIO_REDIRECTION_STDOUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_START_MODE_NEVER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_START_MODE_ALWAYS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_START_MODE_INTERVAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_START_MODE_CRON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_SCHEDULER_STATE_STOPPED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickRED.PROGRAM_SCHEDULER_STATE_RUNNING">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.AsyncFileReadCallback">
             <summary>
              This callback reports the result of a call to the <see cref="M:Tinkerforge.BrickRED.ReadFileAsync(System.Int32,System.Int64)" />
              function.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.AsyncFileReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.AsyncFileRead">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.AsyncFileWriteCallback">
             <summary>
              This callback reports the result of a call to the <see cref="M:Tinkerforge.BrickRED.WriteFileAsync(System.Int32,System.Byte[],System.Byte)" />
              function.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.AsyncFileWriteEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.AsyncFileWrite">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.FileEventsOccurredCallback">
             <summary>
              
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.FileEventsOccurredEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.FileEventsOccurred">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProcessStateChangedCallback">
             <summary>
              
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.ProcessStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProcessStateChanged">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProgramSchedulerStateChangedCallback">
             <summary>
              
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.ProgramSchedulerStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProgramSchedulerStateChanged">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProgramProcessSpawnedCallback">
             <summary>
              
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickRED.ProgramProcessSpawnedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickRED.ProgramProcessSpawned">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.CreateSession(System.Int64,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ExpireSession(System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ExpireSessionUnchecked(System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.KeepSessionAlive(System.Int32,System.Int64)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ReleaseObject(System.Int32,System.Int32)">
             <summary>
              Decreases the reference count of an object by one and returns the resulting
              error code. If the reference count reaches zero the object gets destroyed.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ReleaseObjectUnchecked(System.Int32,System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.AllocateString(System.Int64,System.String,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Allocates a new string object, reserves ``length_to_reserve`` bytes memory
              for it and sets up to the first 60 bytes. Set ``length_to_reserve`` to the
              length of the string that should be stored in the string object.
              
              Returns the object ID of the new string object and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.TruncateString(System.Int32,System.Int64)">
             <summary>
              Truncates a string object to ``length`` bytes and returns the resulting
              error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetStringLength(System.Int32,System.Byte@,System.Int64@)">
             <summary>
              Returns the length of a string object and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetStringChunk(System.Int32,System.Int64,System.String)">
             <summary>
              Sets a chunk of up to 58 bytes in a string object beginning at ``offset``.
              
              Returns the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetStringChunk(System.Int32,System.Int64,System.Byte@,System.String@)">
             <summary>
              Returns a chunk up to 63 bytes from a string object beginning at ``offset`` and
              returns the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.AllocateList(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Allocates a new list object and reserves memory for ``length_to_reserve``
              items. Set ``length_to_reserve`` to the number of items that should be stored
              in the list object.
              
              Returns the object ID of the new list object and the resulting error code.
              
              When a list object gets destroyed then the reference count of each object in
              the list object is decreased by one.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetListLength(System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Returns the length of a list object in items and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetListItem(System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@,System.Byte@)">
             <summary>
              Returns the object ID and type of the object stored at ``index`` in a list
              object and returns the resulting error code.
              
              Possible object types are:
              
              * String = 0
              * List = 1
              * File = 2
              * Directory = 3
              * Process = 4
              * Program = 5
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.AppendToList(System.Int32,System.Int32)">
             <summary>
              Appends an object to a list object and increases the reference count of the
              appended object by one.
              
              Returns the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.RemoveFromList(System.Int32,System.Int32)">
             <summary>
              Removes the object stored at ``index`` from a list object and decreases the
              reference count of the removed object by one.
              
              Returns the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Opens an existing file or creates a new file and allocates a new file object
              for it.
              
              FIXME: name has to be absolute
              
              The reference count of the name string object is increased by one. When the
              file object gets destroyed then the reference count of the name string object is
              decreased by one. Also the name string object is locked and cannot be modified
              while the file object holds a reference to it.
              
              The ``flags`` parameter takes a ORed combination of the following possible file
              flags (in hexadecimal notation):
              
              * ReadOnly = 0x0001 (O_RDONLY)
              * WriteOnly = 0x0002 (O_WRONLY)
              * ReadWrite = 0x0004 (O_RDWR)
              * Append = 0x0008 (O_APPEND)
              * Create = 0x0010 (O_CREAT)
              * Exclusive = 0x0020 (O_EXCL)
              * NonBlocking = 0x0040 (O_NONBLOCK)
              * Truncate = 0x0080 (O_TRUNC)
              * Temporary = 0x0100
              * Replace = 0x0200
              
              FIXME: explain *Temporary* and *Replace* flag
              
              The ``permissions`` parameter takes a ORed combination of the following
              possible file permissions (in octal notation) that match the common UNIX
              permission bits:
              
              * UserRead = 00400
              * UserWrite = 00200
              * UserExecute = 00100
              * GroupRead = 00040
              * GroupWrite = 00020
              * GroupExecute = 00010
              * OthersRead = 00004
              * OthersWrite = 00002
              * OthersExecute = 00001
              
              Returns the object ID of the new file object and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Creates a new pipe and allocates a new file object for it.
              
              The ``flags`` parameter takes a ORed combination of the following possible
              pipe flags (in hexadecimal notation):
              
              * NonBlockingRead = 0x0001
              * NonBlockingWrite = 0x0002
              
              The length of the pipe buffer can be specified with the ``length`` parameter
              in bytes. If length is set to zero, then the default pipe buffer length is used.
              
              Returns the object ID of the new file object and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetFileInfo(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Int32@,System.Int64@,System.Int32@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns various information about a file and the resulting error code.
              
              Possible file types are:
              
              * Unknown = 0
              * Regular = 1
              * Directory = 2
              * Character = 3
              * Block = 4
              * FIFO = 5
              * Symlink = 6
              * Socket = 7
              * Pipe = 8
              
              If the file type is *Pipe* then the returned name string object is invalid,
              because a pipe has no name. Otherwise the returned name string object was used
              to open or create the file object, as passed to <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" />.
              
              The returned flags were used to open or create the file object, as passed to
              <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> or <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" />. See the respective function for a list
              of possible file and pipe flags.
              
              FIXME: everything except flags and length is invalid if file type is *Pipe*
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ReadFile(System.Int32,System.Byte,System.Byte@,System.Byte[]@,System.Byte@)">
             <summary>
              Reads up to 62 bytes from a file object.
              
              Returns the bytes read, the actual number of bytes read and the resulting
              error code.
              
              If there is not data to be read, either because the file position reached
              end-of-file or because there is not data in the pipe, then zero bytes are
              returned.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlocking*
              flag or by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlockingRead* flag then the
              error code *NotSupported* is returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ReadFileAsync(System.Int32,System.Int64)">
             <summary>
              Reads up to 2\ :sup:`63`\  - 1 bytes from a file object asynchronously.
              
              Reports the bytes read (in 60 byte chunks), the actual number of bytes read and
              the resulting error code via the <see cref="E:Tinkerforge.BrickRED.AsyncFileReadCallback" /> callback.
              
              If there is not data to be read, either because the file position reached
              end-of-file or because there is not data in the pipe, then zero bytes are
              reported.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlocking*
              flag or by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlockingRead* flag then the error
              code *NotSupported* is reported via the <see cref="E:Tinkerforge.BrickRED.AsyncFileReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.AbortAsyncFileRead(System.Int32)">
             <summary>
              Aborts a <see cref="M:Tinkerforge.BrickRED.ReadFileAsync(System.Int32,System.Int64)" /> operation in progress.
              
              Returns the resulting error code.
              
              On success the <see cref="E:Tinkerforge.BrickRED.AsyncFileReadCallback" /> callback will report *OperationAborted*.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.WriteFile(System.Int32,System.Byte[],System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Writes up to 61 bytes to a file object.
              
              Returns the actual number of bytes written and the resulting error code.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlocking*
              flag or by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlockingWrite* flag then the
              error code *NotSupported* is returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.WriteFileUnchecked(System.Int32,System.Byte[],System.Byte)">
             <summary>
              Writes up to 61 bytes to a file object.
              
              Does neither report the actual number of bytes written nor the resulting error
              code.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlocking*
              flag or by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlockingWrite* flag then the
              write operation will fail silently.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.WriteFileAsync(System.Int32,System.Byte[],System.Byte)">
             <summary>
              Writes up to 61 bytes to a file object.
              
              Reports the actual number of bytes written and the resulting error code via the
              <see cref="E:Tinkerforge.BrickRED.AsyncFileWriteCallback" /> callback.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.OpenFile(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlocking*
              flag or by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> without the *NonBlockingWrite* flag then the
              error code *NotSupported* is reported via the <see cref="E:Tinkerforge.BrickRED.AsyncFileWriteCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetFilePosition(System.Int32,System.Int64,System.Byte,System.Byte@,System.Int64@)">
             <summary>
              Set the current seek position of a file object relative to ``origin``.
              
              Possible file origins are:
              
              * Beginning = 0
              * Current = 1
              * End = 2
              
              Returns the resulting absolute seek position and error code.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> then it has no seek
              position and the error code *InvalidSeek* is returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetFilePosition(System.Int32,System.Byte@,System.Int64@)">
             <summary>
              Returns the current seek position of a file object and returns the
              resulting error code.
              
              If the file object was created by <see cref="M:Tinkerforge.BrickRED.CreatePipe(System.Int64,System.Int64,System.Int32,System.Byte@,System.Int32@)" /> then it has no seek
              position and the error code *InvalidSeek* is returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetFileEvents(System.Int32,System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetFileEvents(System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OpenDirectory(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Opens an existing directory and allocates a new directory object for it.
              
              FIXME: name has to be absolute
              
              The reference count of the name string object is increased by one. When the
              directory object is destroyed then the reference count of the name string
              object is decreased by one. Also the name string object is locked and cannot be
              modified while the directory object holds a reference to it.
              
              Returns the object ID of the new directory object and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetDirectoryName(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              Returns the name of a directory object, as passed to <see cref="M:Tinkerforge.BrickRED.OpenDirectory(System.Int32,System.Int32,System.Byte@,System.Int32@)" />, and
              the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetNextDirectoryEntry(System.Int32,System.Int32,System.Byte@,System.Int32@,System.Byte@)">
             <summary>
              Returns the next entry in a directory object and the resulting error code.
              
              If there is not next entry then error code *NoMoreData* is returned. To rewind
              a directory object call <see cref="M:Tinkerforge.BrickRED.RewindDirectory(System.Int32)" />.
              
              Possible directory entry types are:
              
              * Unknown = 0
              * Regular = 1
              * Directory = 2
              * Character = 3
              * Block = 4
              * FIFO = 5
              * Symlink = 6
              * Socket = 7
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.RewindDirectory(System.Int32)">
             <summary>
              Rewinds a directory object and returns the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.CreateDirectory(System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
             <summary>
              FIXME: name has to be absolute
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProcesses(System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SpawnProcess(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.KillProcess(System.Int32,System.Byte)">
             <summary>
              Sends a UNIX signal to a process object and returns the resulting error code.
              
              Possible UNIX signals are:
              
              * Interrupt = 2
              * Quit = 3
              * Abort = 6
              * Kill = 9
              * User1 = 10
              * User2 = 12
              * Terminate = 15
              * Continue =  18
              * Stop = 19
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProcessCommand(System.Int32,System.Int32,System.Byte@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the executable, arguments, environment and working directory used to
              spawn a process object, as passed to <see cref="M:Tinkerforge.BrickRED.SpawnProcess(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@)" />, and the resulting
              error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProcessIdentity(System.Int32,System.Byte@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the process ID and the user and group ID used to spawn a process object,
              as passed to <see cref="M:Tinkerforge.BrickRED.SpawnProcess(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@)" />, and the resulting error code.
              
              The process ID is only valid if the state is *Running* or *Stopped*, see
              <see cref="M:Tinkerforge.BrickRED.GetProcessState(System.Int32,System.Byte@,System.Byte@,System.Int64@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProcessStdio(System.Int32,System.Int32,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the stdin, stdout and stderr files used to spawn a process object, as
              passed to <see cref="M:Tinkerforge.BrickRED.SpawnProcess(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@)" />, and the resulting error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProcessState(System.Int32,System.Byte@,System.Byte@,System.Int64@,System.Byte@)">
             <summary>
              Returns the current state, timestamp and exit code of a process object, and
              the resulting error code.
              
              Possible process states are:
              
              * Unknown = 0
              * Running = 1
              * Error = 2
              * Exited = 3
              * Killed = 4
              * Stopped = 5
              
              The timestamp represents the UNIX time since when the process is in its current
              state.
              
              The exit code is only valid if the state is *Error*, *Exited*, *Killed* or
              *Stopped* and has different meanings depending on the state:
              
              * Error: error code for error occurred while spawning the process (see below)
              * Exited: exit status of the process
              * Killed: UNIX signal number used to kill the process
              * Stopped: UNIX signal number used to stop the process
              
              Possible exit/error codes in *Error* state are:
              
              * InternalError = 125
              * CannotExecute = 126
              * DoesNotExist = 127
              
              The *CannotExecute* error can be caused by the executable being opened for
              writing.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetPrograms(System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.DefineProgram(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.PurgeProgram(System.Int32,System.Int64)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramIdentifier(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramRootDirectory(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              FIXME: root directory is absolute: &lt;home&gt;/programs/&lt;identifier&gt;
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetProgramCommand(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              FIXME: working directory is relative to &lt;home&gt;/programs/&lt;identifier&gt;/bin
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramCommand(System.Int32,System.Int32,System.Byte@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              FIXME: working directory is relative to &lt;home&gt;/programs/&lt;identifier&gt;/bin
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetProgramStdioRedirection(System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32)">
             <summary>
              FIXME: stdio file names are relative to &lt;home&gt;/programs/&lt;identifier&gt;/bin
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramStdioRedirection(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Int32@,System.Byte@,System.Int32@,System.Byte@,System.Int32@)">
             <summary>
              FIXME: stdio file names are relative to &lt;home&gt;/programs/&lt;identifier&gt;/bin
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetProgramSchedule(System.Int32,System.Byte,System.Boolean,System.Int64,System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramSchedule(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Boolean@,System.Int64@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetProgramSchedulerState(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Int64@,System.Int32@)">
             <summary>
              FIXME: message is currently valid in error-occurred state only
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.ContinueProgramSchedule(System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.StartProgram(System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetLastSpawnedProgramProcess(System.Int32,System.Int32,System.Byte@,System.Int32@,System.Int64@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetCustomProgramOptionNames(System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.SetCustomProgramOptionValue(System.Int32,System.Int32,System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetCustomProgramOptionValue(System.Int32,System.Int32,System.Int32,System.Byte@,System.Int32@)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.RemoveCustomProgramOption(System.Int32,System.Int32)">
             <summary>
              
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnAsyncFileReadCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnAsyncFileWriteCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnFileEventsOccurredCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnProcessStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnProgramSchedulerStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickRED.OnProgramProcessSpawnedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickServo">
             <summary>
              Drives up to 7 RC Servos with up to 3A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_DISABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_IS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_PULSE_WIDTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_PULSE_WIDTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_DEGREE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_DEGREE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_SERVO_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_OVERALL_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_STACK_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_ENABLE_POSITION_REACHED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_DISABLE_POSITION_REACHED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_IS_POSITION_REACHED_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_ENABLE_VELOCITY_REACHED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_DISABLE_VELOCITY_REACHED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_IS_VELOCITY_REACHED_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickServo.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.UnderVoltageCallback">
             <summary>
              This callback is triggered when the input voltage drops below the value set by
              <see cref="M:Tinkerforge.BrickServo.SetMinimumVoltage(System.Int32)" />. The parameter is the current voltage.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickServo.UnderVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.UnderVoltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.PositionReachedCallback">
             <summary>
              This callback is triggered when a position set by <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" />
              is reached. If the new position matches the current position then the
              callback is not triggered, because the servo didn't move.
              The parameters are the servo and the position that is reached.
              
              You can enable this callback with <see cref="M:Tinkerforge.BrickServo.EnablePositionReachedCallback" />.
              
              <note>
               Since we can't get any feedback from the servo, this only works if the
               velocity (see <see cref="M:Tinkerforge.BrickServo.SetVelocity(System.Byte,System.Int32)" />) is set smaller or equal to the
               maximum velocity of the servo. Otherwise the servo will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickServo.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.PositionReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.VelocityReachedCallback">
             <summary>
              This callback is triggered when a velocity set by <see cref="M:Tinkerforge.BrickServo.SetVelocity(System.Byte,System.Int32)" />
              is reached. The parameters are the servo and the velocity that is reached.
              
              You can enable this callback with <see cref="M:Tinkerforge.BrickServo.EnableVelocityReachedCallback" />.
              
              <note>
               Since we can't get any feedback from the servo, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickServo.SetAcceleration(System.Byte,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the servo. Otherwise the servo will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickServo.VelocityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickServo.VelocityReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.Enable(System.Byte)">
             <summary>
              Enables a servo (0 to 6). If a servo is enabled, the configured position,
              velocity, acceleration, etc. are applied immediately.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.Disable(System.Byte)">
             <summary>
              Disables a servo (0 to 6). Disabled servos are not driven at all, i.e. a
              disabled servo will not hold its position if a load is applied.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.IsEnabled(System.Byte)">
             <summary>
              Returns *true* if the specified servo is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)">
             <summary>
              Sets the position for the specified servo.
              
              The default range of the position is -9000 to 9000, but it can be specified
              according to your servo with <see cref="M:Tinkerforge.BrickServo.SetDegree(System.Byte,System.Int16,System.Int16)" />.
              
              If you want to control a linear servo or RC brushless motor controller or
              similar with the Servo Brick, you can also define lengths or speeds with
              <see cref="M:Tinkerforge.BrickServo.SetDegree(System.Byte,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetPosition(System.Byte)">
             <summary>
              Returns the position of the specified servo as set by <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetCurrentPosition(System.Byte)">
             <summary>
              Returns the *current* position of the specified servo. This may not be the
              value of <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" /> if the servo is currently approaching a
              position goal.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetVelocity(System.Byte,System.Int32)">
             <summary>
              Sets the maximum velocity of the specified servo. The velocity
              is accelerated according to the value set by <see cref="M:Tinkerforge.BrickServo.SetAcceleration(System.Byte,System.Int32)" />.
              
              The minimum velocity is 0 (no movement) and the maximum velocity is 65535.
              With a value of 65535 the position will be set immediately (no velocity).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetVelocity(System.Byte)">
             <summary>
              Returns the velocity of the specified servo as set by <see cref="M:Tinkerforge.BrickServo.SetVelocity(System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetCurrentVelocity(System.Byte)">
             <summary>
              Returns the *current* velocity of the specified servo. This may not be the
              value of <see cref="M:Tinkerforge.BrickServo.SetVelocity(System.Byte,System.Int32)" /> if the servo is currently approaching a
              velocity goal.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetAcceleration(System.Byte,System.Int32)">
             <summary>
              Sets the acceleration of the specified servo.
              
              The minimum acceleration is 1 and the maximum acceleration is 65535.
              With a value of 65535 the velocity will be set immediately (no acceleration).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetAcceleration(System.Byte)">
             <summary>
              Returns the acceleration for the specified servo as set by
              <see cref="M:Tinkerforge.BrickServo.SetAcceleration(System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetOutputVoltage(System.Int32)">
             <summary>
              Sets the output voltages with which the servos are driven.
              
              <note>
               We recommend that you set this value to the maximum voltage that is
               specified for your servo, most servos achieve their maximum force only
               with high voltages.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetOutputVoltage">
             <summary>
              Returns the output voltage as specified by <see cref="M:Tinkerforge.BrickServo.SetOutputVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetPulseWidth(System.Byte,System.Int32,System.Int32)">
             <summary>
              Sets the minimum and maximum pulse width of the specified servo.
              
              Usually, servos are controlled with a
              `PWM &lt;https://en.wikipedia.org/wiki/Pulse-width_modulation&gt;`__, whereby the
              length of the pulse controls the position of the servo. Every servo has
              different minimum and maximum pulse widths, these can be specified with
              this function.
              
              If you have a datasheet for your servo that specifies the minimum and
              maximum pulse width, you should set the values accordingly. If your servo
              comes without any datasheet you have to find the values via trial and error.
              
              The minimum must be smaller than the maximum.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetPulseWidth(System.Byte,System.Int32@,System.Int32@)">
             <summary>
              Returns the minimum and maximum pulse width for the specified servo as set by
              <see cref="M:Tinkerforge.BrickServo.SetPulseWidth(System.Byte,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetDegree(System.Byte,System.Int16,System.Int16)">
             <summary>
              Sets the minimum and maximum degree for the specified servo (by default
              given as °/100).
              
              This only specifies the abstract values between which the minimum and maximum
              pulse width is scaled. For example: If you specify a pulse width of 1000µs
              to 2000µs and a degree range of -90° to 90°, a call of <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" />
              with 0 will result in a pulse width of 1500µs
              (-90° = 1000µs, 90° = 2000µs, etc.).
              
              Possible usage:
              
              * The datasheet of your servo specifies a range of 200° with the middle position
                at 110°. In this case you can set the minimum to -9000 and the maximum to 11000.
              * You measure a range of 220° on your servo and you don't have or need a middle
                position. In this case you can set the minimum to 0 and the maximum to 22000.
              * You have a linear servo with a drive length of 20cm, In this case you could
                set the minimum to 0 and the maximum to 20000. Now you can set the Position
                with <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" /> with a resolution of cm/100. Also the velocity will
                have a resolution of cm/100s and the acceleration will have a resolution of
                cm/100s².
              * You don't care about units and just want the highest possible resolution. In
                this case you should set the minimum to -32767 and the maximum to 32767.
              * You have a brushless motor with a maximum speed of 10000 rpm and want to
                control it with a RC brushless motor controller. In this case you can set the
                minimum to 0 and the maximum to 10000. <see cref="M:Tinkerforge.BrickServo.SetPosition(System.Byte,System.Int16)" /> now controls the rpm.
              
              The minimum must be smaller than the maximum.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetDegree(System.Byte,System.Int16@,System.Int16@)">
             <summary>
              Returns the minimum and maximum degree for the specified servo as set by
              <see cref="M:Tinkerforge.BrickServo.SetDegree(System.Byte,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetPeriod(System.Byte,System.Int32)">
             <summary>
              Sets the period of the specified servo.
              
              Usually, servos are controlled with a
              `PWM &lt;https://en.wikipedia.org/wiki/Pulse-width_modulation&gt;`__. Different
              servos expect PWMs with different periods. Most servos run well with a
              period of about 20ms.
              
              If your servo comes with a datasheet that specifies a period, you should
              set it accordingly. If you don't have a datasheet and you have no idea
              what the correct period is, the default value will most likely
              work fine.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetPeriod(System.Byte)">
             <summary>
              Returns the period for the specified servo as set by <see cref="M:Tinkerforge.BrickServo.SetPeriod(System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetServoCurrent(System.Byte)">
             <summary>
              Returns the current consumption of the specified servo.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetOverallCurrent">
             <summary>
              Returns the current consumption of all servos together.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetStackInputVoltage">
             <summary>
              Returns the stack input voltage. The stack input voltage is the
              voltage that is supplied via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetExternalInputVoltage">
             <summary>
              Returns the external input voltage. The external input voltage is
              given via the black power input connector on the Servo Brick.
              
              If there is an external input voltage and a stack input voltage, the motors
              will be driven by the external input voltage. If there is only a stack
              voltage present, the motors will be driven by this voltage.
              
              <note type="caution">
               This means, if you have a high stack voltage and a low external voltage,
               the motors will be driven with the low external voltage. If you then remove
               the external connection, it will immediately be driven by the high
               stack voltage
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetMinimumVoltage(System.Int32)">
             <summary>
              Sets the minimum voltage, below which the <see cref="E:Tinkerforge.BrickServo.UnderVoltageCallback" /> callback
              is triggered. The minimum possible value that works with the Servo Brick is 5V.
              You can use this function to detect the discharge of a battery that is used
              to drive the stepper motor. If you have a fixed power supply, you likely do
              not need this functionality.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetMinimumVoltage">
             <summary>
              Returns the minimum voltage as set by <see cref="M:Tinkerforge.BrickServo.SetMinimumVoltage(System.Int32)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.EnablePositionReachedCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickServo.PositionReachedCallback" /> callback.
              
              Default is disabled.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.DisablePositionReachedCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickServo.PositionReachedCallback" /> callback.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.IsPositionReachedCallbackEnabled">
             <summary>
              Returns *true* if <see cref="E:Tinkerforge.BrickServo.PositionReachedCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.EnableVelocityReachedCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickServo.VelocityReachedCallback" /> callback.
              
              Default is disabled.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.DisableVelocityReachedCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickServo.VelocityReachedCallback" /> callback.
              
              Default is disabled.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.IsVelocityReachedCallbackEnabled">
             <summary>
              Returns *true* if <see cref="E:Tinkerforge.BrickServo.VelocityReachedCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickServo.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickServo.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.3.4$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickServo.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.3.4$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickServo.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickServo.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickServo.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.3.2$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.OnUnderVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickServo.OnVelocityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickSilentStepper">
             <summary>
              Silently drives one bipolar stepper motor with up to 46V and 1.6A per phase
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_REMAINING_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_STEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_STEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_DRIVE_FORWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_DRIVE_BACKWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_STOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_STACK_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_DISABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_IS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_BASIC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_BASIC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_SPREADCYCLE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SPREADCYCLE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_STEALTH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_STEALTH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_COOLSTEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_COOLSTEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_MISC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_MISC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_DRIVER_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STEP_RESOLUTION_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CHOPPER_MODE_SPREAD_CYCLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CHOPPER_MODE_FAST_DECAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FREEWHEEL_MODE_NORMAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FREEWHEEL_MODE_FREEWHEELING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FREEWHEEL_MODE_COIL_SHORT_LS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.FREEWHEEL_MODE_COIL_SHORT_HS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_UP_STEP_INCREMENT_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_UP_STEP_INCREMENT_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_UP_STEP_INCREMENT_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_UP_STEP_INCREMENT_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_DOWN_STEP_DECREMENT_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_DOWN_STEP_DECREMENT_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_DOWN_STEP_DECREMENT_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.CURRENT_DOWN_STEP_DECREMENT_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.MINIMUM_CURRENT_HALF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.MINIMUM_CURRENT_QUARTER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STALLGUARD_MODE_STANDARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STALLGUARD_MODE_FILTERED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OPEN_LOAD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OPEN_LOAD_PHASE_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OPEN_LOAD_PHASE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OPEN_LOAD_PHASE_AB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.SHORT_TO_GROUND_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.SHORT_TO_GROUND_PHASE_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.SHORT_TO_GROUND_PHASE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.SHORT_TO_GROUND_PHASE_AB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OVER_TEMPERATURE_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OVER_TEMPERATURE_WARNING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.OVER_TEMPERATURE_LIMIT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_STOP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_ACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_RUN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_DEACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_DIRECTION_CHANGE_TO_FORWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.STATE_DIRECTION_CHANGE_TO_BACKWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickSilentStepper.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickSilentStepper.UnderVoltageCallback">
             <summary>
              This callback is triggered when the input voltage drops below the value set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetMinimumVoltage(System.Int32)" />. The parameter is the current voltage.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickSilentStepper.UnderVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickSilentStepper.PositionReachedCallback">
             <summary>
              This callback is triggered when a position set by <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" /> or
              <see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" /> is reached.
              
              <note>
               Since we can't get any feedback from the stepper motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickSilentStepper.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickSilentStepper.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetAllDataPeriod(System.Int64)" />. The parameters are: the current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickSilentStepper.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickSilentStepper.NewStateCallback">
             <summary>
              This callback is triggered whenever the Silent Stepper Brick enters a new state.
              It returns the new state as well as the previous state.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickSilentStepper.NewStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)">
             <summary>
              Sets the maximum velocity of the stepper motor.
              This function does *not* start the motor, it merely sets the maximum
              velocity the stepper motor is accelerated to. To get the motor running use
              either <see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickSilentStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickSilentStepper.DriveBackward" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetMaxVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the stepper motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)">
             <summary>
              Sets the acceleration and deacceleration of the stepper motor.
              An acceleration of 1000 means, that
              every second the velocity is increased by 1000 *steps/s*.
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 8000 *steps/s* in 10 seconds, you should set an acceleration
              of 800 *steps/s²*.
              
              An acceleration/deacceleration of 0 means instantaneous
              acceleration/deacceleration (not recommended)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSpeedRamping(System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetCurrentPosition(System.Int32)">
             <summary>
              Sets the current steps of the internal step counter. This can be used to
              set the current position to 0 when some kind of starting position
              is reached (e.g. when a CNC machine reaches a corner).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetCurrentPosition">
             <summary>
              Returns the current position of the stepper motor in steps. On startup
              the position is 0. The steps are counted with all possible driving
              functions (<see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickSilentStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickSilentStepper.DriveBackward" />). It also is possible to reset the steps to 0 or
              set them to any other desired value with <see cref="M:Tinkerforge.BrickSilentStepper.SetCurrentPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)">
             <summary>
              Sets the target position of the stepper motor in steps. For example,
              if the current position of the motor is 500 and <see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" /> is
              called with 1000, the stepper motor will drive 500 steps forward. It will
              use the velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
              
              A call of <see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" /> with the parameter *x* is equivalent to
              a call of <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" /> with the parameter
              (*x* - <see cref="M:Tinkerforge.BrickSilentStepper.GetCurrentPosition" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetTargetPosition">
             <summary>
              Returns the last target position as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetTargetPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)">
             <summary>
              Sets the number of steps the stepper motor should run. Positive values
              will drive the motor forward and negative values backward.
              The velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSteps">
             <summary>
              Returns the last steps as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetRemainingSteps">
             <summary>
              Returns the remaining steps of the last call of <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" />.
              For example, if <see cref="M:Tinkerforge.BrickSilentStepper.SetSteps(System.Int32)" /> is called with 2000 and
              <see cref="M:Tinkerforge.BrickSilentStepper.GetRemainingSteps" /> is called after the motor has run for 500 steps,
              it will return 1500.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetStepConfiguration(System.Byte,System.Boolean)">
             <summary>
              Sets the step resolution from full-step up to 1/256-step.
              
              If interpolation is turned on, the Silent Stepper Brick will always interpolate
              your step inputs as 1/256-step. If you use full-step mode with interpolation, each
              step will generate 256 1/256 steps.
              
              For maximum torque use full-step without interpolation. For maximum resolution use
              1/256-step. Turn interpolation on to make the Stepper driving less noisy.
              
              If you often change the speed with high acceleration you should turn the
              interpolation off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetStepConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the step mode as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetStepConfiguration(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.DriveForward">
             <summary>
              Drives the stepper motor forward until <see cref="M:Tinkerforge.BrickSilentStepper.DriveBackward" /> or
              <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> is called. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.DriveBackward">
             <summary>
              Drives the stepper motor backward until <see cref="M:Tinkerforge.BrickSilentStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> is triggered. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.Stop">
             <summary>
              Stops the stepper motor with the deacceleration as set by
              <see cref="M:Tinkerforge.BrickSilentStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetStackInputVoltage">
             <summary>
              Returns the stack input voltage. The stack input voltage is the
              voltage that is supplied via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetExternalInputVoltage">
             <summary>
              Returns the external input voltage. The external input voltage is
              given via the black power input connector on the Silent Stepper Brick.
              
              If there is an external input voltage and a stack input voltage, the motor
              will be driven by the external input voltage. If there is only a stack
              voltage present, the motor will be driven by this voltage.
              
              <note type="caution">
               This means, if you have a high stack voltage and a low external voltage,
               the motor will be driven with the low external voltage. If you then remove
               the external connection, it will immediately be driven by the high
               stack voltage
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetMotorCurrent(System.Int32)">
             <summary>
              Sets the current with which the motor will be driven.
              
              <note type="caution">
               Do not set this value above the specifications of your stepper motor.
               Otherwise it may damage your motor.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetMotorCurrent">
             <summary>
              Returns the current as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMotorCurrent(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.Enable">
             <summary>
              Enables the driver chip. The driver parameters can be configured (maximum velocity,
              acceleration, etc) before it is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.Disable">
             <summary>
              Disables the driver chip. The configurations are kept (maximum velocity,
              acceleration, etc) but the motor is not driven until it is enabled again.
              
              <note type="caution">
               Disabling the driver chip while the motor is still turning can damage the
               driver chip. The motor should be stopped calling <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> function
               before disabling the motor power. The <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> function will **not**
               wait until the motor is actually stopped. You have to explicitly wait for the
               appropriate time after calling the <see cref="M:Tinkerforge.BrickSilentStepper.Stop" /> function before calling
               the <see cref="M:Tinkerforge.BrickSilentStepper.Disable" /> function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.IsEnabled">
             <summary>
              Returns *true* if the driver chip is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
              Sets the basic configuration parameters for the different modes (Stealth, Coolstep, Classic).
              
              * Standstill Current: This value can be used to lower the current during stand still. This might
                be reasonable to reduce the heating of the motor and the Brick. When the motor is in standstill
                the configured motor phase current will be driven until the configured
                Power Down Time is elapsed. After that the phase current will be reduced to the standstill
                current. The elapsed time for this reduction can be configured with the Standstill Delay Time.
                The maximum allowed value is the configured maximum motor current
                (see <see cref="M:Tinkerforge.BrickSilentStepper.SetMotorCurrent(System.Int32)" />).
              
              * Motor Run Current: The value sets the motor current when the motor is running.
                Use a value of at least one half of the global maximum motor current for a good
                microstep performance. The maximum allowed value is the current
                motor current. The API maps the entered value to 1/32 ... 32/32 of the maximum
                motor current. This value should be used to change the motor current during motor movement,
                whereas the global maximum motor current should not be changed while the motor is moving
                (see <see cref="M:Tinkerforge.BrickSilentStepper.SetMotorCurrent(System.Int32)" />).
              
              * Standstill Delay Time: Controls the duration for motor power down after a motion
                as soon as standstill is detected and the Power Down Time is expired. A high Standstill Delay
                Time results in a smooth transition that avoids motor jerk during power down.
              
              * Power Down Time: Sets the delay time after a stand still.
              
              * Stealth Threshold: Sets the upper threshold for Stealth mode.
                If the velocity of the motor goes above this value, Stealth mode is turned
                off. Otherwise it is turned on. In Stealth mode the torque declines with high speed.
              
              * Coolstep Threshold: Sets the lower threshold for Coolstep mode.
                The Coolstep Threshold needs to be above the Stealth Threshold.
              
              * Classic Threshold: Sets the lower threshold for classic mode.
                In classic mode the stepper becomes more noisy, but the torque is maximized.
              
              * High Velocity Chopper Mode: If High Velocity Chopper Mode is enabled, the stepper control
                is optimized to run the stepper motors at high velocities.
              
              If you want to use all three thresholds make sure that
              Stealth Threshold &lt; Coolstep Threshold &lt; Classic Threshold.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetBasicConfiguration(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetSpreadcycleConfiguration(System.Byte,System.Boolean,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte,System.Boolean)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the Spreadcycle configuration parameters. Spreadcycle is a chopper algorithm which actively
              controls the motor current flow. More information can be found in the TMC2130 datasheet on page
              47 (7 spreadCycle and Classic Chopper).
              
              * Slow Decay Duration: Controls duration of off time setting of slow decay phase.
                0 = driver disabled, all bridges off. Use 1 only with Comparator Blank time &gt;= 2.
              
              * Enable Random Slow Decay: Set to false to fix chopper off time as set by Slow Decay Duration.
                If you set it to true, Decay Duration is randomly modulated.
              
              * Fast Decay Duration: Sets the fast decay duration. This parameters is
                only used if the Chopper Mode is set to Fast Decay.
              
              * Hysteresis Start Value: Sets the hysteresis start value. This parameter is
                only used if the Chopper Mode is set to Spread Cycle.
              
              * Hysteresis End Value: Sets the hysteresis end value. This parameter is
                only used if the Chopper Mode is set to Spread Cycle.
              
              * Sine Wave Offset: Sets the sine wave offset. This parameters is
                only used if the Chopper Mode is set to Fast Decay. 1/512 of the value becomes added to the absolute
                value of the sine wave.
              
              * Chopper Mode: 0 = Spread Cycle, 1 = Fast Decay.
              
              * Comparator Blank Time: Sets the blank time of the comparator. Available values are
              
                * 0 = 16 clocks,
                * 1 = 24 clocks,
                * 2 = 36 clocks and
                * 3 = 54 clocks.
              
                A value of 1 or 2 is recommended for most applications.
              
              * Fast Decay Without Comparator: If set to true the current comparator usage for termination of the
                fast decay cycle is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSpreadcycleConfiguration(System.Byte@,System.Boolean@,System.Byte@,System.Byte@,System.Int16@,System.Int16@,System.Byte@,System.Byte@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the configuration relevant for Stealth mode.
              
              * Enable Stealth: If set to true the stealth mode is enabled, if set to false the
                stealth mode is disabled, even if the speed is below the threshold set in <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
              
              * Amplitude: If autoscale is disabled, the PWM amplitude is scaled by this value. If autoscale is enabled,
                this value defines the maximum PWM amplitude change per half wave.
              
              * Gradient: If autoscale is disabled, the PWM gradient is scaled by this value. If autoscale is enabled,
                this value defines the maximum PWM gradient. With autoscale a value above 64 is recommended,
                otherwise the regulation might not be able to measure the current.
              
              * Enable Autoscale: If set to true, automatic current control is used. Otherwise the user defined
                amplitude and gradient are used.
              
              * Force Symmetric: If true, A symmetric PWM cycle is enforced. Otherwise the PWM value may change within each
                PWM cycle.
              
              * Freewheel Mode: The freewheel mode defines the behavior in stand still if the Standstill Current
                (see <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />) is set to 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetStealthConfiguration(System.Boolean@,System.Byte@,System.Byte@,System.Boolean@,System.Boolean@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetCoolstepConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Int16,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the configuration relevant for Coolstep.
              
              * Minimum Stallguard Value: If the Stallguard result falls below this value*32, the motor current
                is increased to reduce motor load angle. A value of 0 turns Coolstep off.
              
              * Maximum Stallguard Value: If the Stallguard result goes above
                (Min Stallguard Value + Max Stallguard Value + 1) * 32, the motor current is decreased to save
                energy.
              
              * Current Up Step Width: Sets the up step increment per Stallguard value. The value range is 0-3,
                corresponding to the increments 1, 2, 4 and 8.
              
              * Current Down Step Width: Sets the down step decrement per Stallguard value. The value range is 0-3,
                corresponding to the decrements 1, 2, 8 and 16.
              
              * Minimum Current: Sets the minimum current for Coolstep current control. You can choose between
                half and quarter of the run current.
              
              * Stallguard Threshold Value: Sets the level for stall output (see <see cref="M:Tinkerforge.BrickSilentStepper.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)" />).
                A lower value gives a higher sensitivity. You have to find a suitable value for your
                motor by trial and error, 0 works for most motors.
              
              * Stallguard Mode: Set to 0 for standard resolution or 1 for filtered mode. In filtered mode the Stallguard
                signal will be updated every four full-steps.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetCoolstepConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Int16@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetCoolstepConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Int16,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetMiscConfiguration(System.Boolean,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets miscellaneous configuration parameters.
              
              * Disable Short To Ground Protection: Set to false to enable short to ground protection, otherwise
                it is disabled.
              
              * Synchronize Phase Frequency: With this parameter you can synchronize the chopper for both phases
                of a two phase motor to avoid the occurrence of a beat. The value range is 0-15. If set to 0,
                the synchronization is turned off. Otherwise the synchronization is done through the formula
                f_sync = f_clk/(value*64). In Classic Mode the synchronization is automatically switched off.
                f_clk is 12.8MHz.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetMiscConfiguration(System.Boolean@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMiscConfiguration(System.Boolean,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)">
             <summary>
              Returns the current driver status.
              
              * Open Load: Indicates if an open load is present on phase A, B or both. This could mean that there is a problem
                with the wiring of the motor. False detection can occur in fast motion as well as during stand still.
              
              * Short To Ground: Indicates if a short to ground is present on phase A, B or both. If this is detected the driver
                automatically becomes disabled and stays disabled until it is enabled again manually.
              
              * Over Temperature: The over temperature indicator switches to "Warning" if the driver IC warms up. The warning flag
                is expected during long duration stepper uses. If the temperature limit is reached the indicator switches
                to "Limit". In this case the driver becomes disabled until it cools down again.
              
              * Motor Stalled: Is true if a motor stall was detected.
              
              * Actual Motor Current: Indicates the actual current control scaling as used in Coolstep mode.
                It represents a multiplier of 1/32 to 32/32 of the
                ``Motor Run Current`` as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />. Example: If a ``Motor Run Current``
                of 1000mA was set and the returned value is 15, the ``Actual Motor Current`` is 16/32*1000mA = 500mA.
              
              * Stallguard Result: Indicates the load of the motor. A lower value signals a higher load. Per trial and error
                you can find out which value corresponds to a suitable torque for the velocity used in your application.
                After that you can use this threshold value to find out if a motor stall becomes probable and react on it (e.g.
                decrease velocity).
                During stand still this value can not be used for stall detection, it shows the chopper on-time for motor coil A.
              
              * Stealth Voltage Amplitude: Shows the actual PWM scaling. In Stealth mode it can be used to detect motor load and
                stall if autoscale is enabled (see <see cref="M:Tinkerforge.BrickSilentStepper.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetMinimumVoltage(System.Int32)">
             <summary>
              Sets the minimum voltage, below which the <see cref="E:Tinkerforge.BrickSilentStepper.UnderVoltageCallback" /> callback
              is triggered. The minimum possible value that works with the Silent Stepper
              Brick is 8V.
              You can use this function to detect the discharge of a battery that is used
              to drive the stepper motor. If you have a fixed power supply, you likely do
              not need this functionality.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetMinimumVoltage">
             <summary>
              Returns the minimum voltage as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetMinimumVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetTimeBase(System.Int64)">
             <summary>
              Sets the time base of the velocity and the acceleration of the Silent Stepper
              Brick.
              
              For example, if you want to make one step every 1.5 seconds, you can set
              the time base to 15 and the velocity to 10. Now the velocity is
              10steps/15s = 1steps/1.5s.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetTimeBase">
             <summary>
              Returns the time base as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetTimeBase(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetAllData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the following parameters: The current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
              
              The current consumption is calculated by multiplying the ``Actual Motor Current``
              value (see <see cref="M:Tinkerforge.BrickSilentStepper.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />) with the ``Motor Run Current``
              (see <see cref="M:Tinkerforge.BrickSilentStepper.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)" />). This is an internal calculation of the
              driver, not an independent external measurement.
              
              The current consumption calculation was broken up to firmware 2.0.1, it is fixed
              since firmware 2.0.2.
              
              There is also a callback for this function, see <see cref="E:Tinkerforge.BrickSilentStepper.AllDataCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetAllDataPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickSilentStepper.AllDataCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetAllDataPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.0.4$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.0.4$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickSilentStepper.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickSilentStepper.SetSPITFPBaudrate(System.Char,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.OnUnderVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickSilentStepper.OnNewStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickStepper">
             <summary>
              Drives one bipolar stepper motor with up to 38V and 2.5A per phase
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_REMAINING_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_STEP_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_STEP_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_DRIVE_FORWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_DRIVE_BACKWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_STOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_STACK_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_CURRENT_CONSUMPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_DISABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_IS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_DECAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_DECAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_SYNC_RECT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_IS_SYNC_RECT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_ALL_DATA_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_SEND_TIMEOUT_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_ENABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_DISABLE_STATUS_LED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_IS_STATUS_LED_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_PROTOCOL1_BRICKLET_NAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_WRITE_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_READ_BRICKLET_PLUGIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STEP_MODE_FULL_STEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STEP_MODE_HALF_STEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STEP_MODE_QUARTER_STEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STEP_MODE_EIGHTH_STEP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_STOP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_ACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_RUN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_DEACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_DIRECTION_CHANGE_TO_FORWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.STATE_DIRECTION_CHANGE_TO_BACKWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_USB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_SPI_STACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_CHIBI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_WIFI">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_ETHERNET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickStepper.COMMUNICATION_METHOD_WIFI_V2">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.UnderVoltageCallback">
             <summary>
              This callback is triggered when the input voltage drops below the value set by
              <see cref="M:Tinkerforge.BrickStepper.SetMinimumVoltage(System.Int32)" />. The parameter is the current voltage.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickStepper.UnderVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.UnderVoltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.PositionReachedCallback">
             <summary>
              This callback is triggered when a position set by <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" /> or
              <see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" /> is reached.
              
              <note>
               Since we can't get any feedback from the stepper motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickStepper.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.PositionReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickStepper.SetAllDataPeriod(System.Int64)" />. The parameters are: the current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickStepper.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.AllData">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.NewStateCallback">
             <summary>
              This callback is triggered whenever the Stepper Brick enters a new state.
              It returns the new state as well as the previous state.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickStepper.NewStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickStepper.NewState">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)">
             <summary>
              Sets the maximum velocity of the stepper motor.
              This function does *not* start the motor, it merely sets the maximum
              velocity the stepper motor is accelerated to. To get the motor running use
              either <see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickStepper.DriveBackward" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetMaxVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the stepper motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)">
             <summary>
              Sets the acceleration and deacceleration of the stepper motor.
              An acceleration of 1000 means, that
              every second the velocity is increased by 1000 *steps/s*.
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 8000 *steps/s* in 10 seconds, you should set an acceleration
              of 800 *steps/s²*.
              
              An acceleration/deacceleration of 0 means instantaneous
              acceleration/deacceleration (not recommended)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSpeedRamping(System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickStepper.Stop" /> if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetCurrentPosition(System.Int32)">
             <summary>
              Sets the current steps of the internal step counter. This can be used to
              set the current position to 0 when some kind of starting position
              is reached (e.g. when a CNC machine reaches a corner).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetCurrentPosition">
             <summary>
              Returns the current position of the stepper motor in steps. On startup
              the position is 0. The steps are counted with all possible driving
              functions (<see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickStepper.DriveBackward" />). It also is possible to reset the steps to 0 or
              set them to any other desired value with <see cref="M:Tinkerforge.BrickStepper.SetCurrentPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)">
             <summary>
              Sets the target position of the stepper motor in steps. For example,
              if the current position of the motor is 500 and <see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" /> is
              called with 1000, the stepper motor will drive 500 steps forward. It will
              use the velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
              
              A call of <see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" /> with the parameter *x* is equivalent to
              a call of <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" /> with the parameter
              (*x* - <see cref="M:Tinkerforge.BrickStepper.GetCurrentPosition" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetTargetPosition">
             <summary>
              Returns the last target position as set by <see cref="M:Tinkerforge.BrickStepper.SetTargetPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)">
             <summary>
              Sets the number of steps the stepper motor should run. Positive values
              will drive the motor forward and negative values backward.
              The velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSteps">
             <summary>
              Returns the last steps as set by <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetRemainingSteps">
             <summary>
              Returns the remaining steps of the last call of <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" />.
              For example, if <see cref="M:Tinkerforge.BrickStepper.SetSteps(System.Int32)" /> is called with 2000 and
              <see cref="M:Tinkerforge.BrickStepper.GetRemainingSteps" /> is called after the motor has run for 500 steps,
              it will return 1500.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetStepMode(System.Byte)">
             <summary>
              Sets the step mode of the stepper motor. Possible values are:
              
              * Full Step = 1
              * Half Step = 2
              * Quarter Step = 4
              * Eighth Step = 8
              
              A higher value will increase the resolution and
              decrease the torque of the stepper motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetStepMode">
             <summary>
              Returns the step mode as set by <see cref="M:Tinkerforge.BrickStepper.SetStepMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.DriveForward">
             <summary>
              Drives the stepper motor forward until <see cref="M:Tinkerforge.BrickStepper.DriveBackward" /> or
              <see cref="M:Tinkerforge.BrickStepper.Stop" /> is called. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.DriveBackward">
             <summary>
              Drives the stepper motor backward until <see cref="M:Tinkerforge.BrickStepper.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickStepper.Stop" /> is triggered. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickStepper.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.Stop">
             <summary>
              Stops the stepper motor with the deacceleration as set by
              <see cref="M:Tinkerforge.BrickStepper.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetStackInputVoltage">
             <summary>
              Returns the stack input voltage. The stack input voltage is the
              voltage that is supplied via the stack, i.e. it is given by a
              Step-Down or Step-Up Power Supply.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetExternalInputVoltage">
             <summary>
              Returns the external input voltage. The external input voltage is
              given via the black power input connector on the Stepper Brick.
              
              If there is an external input voltage and a stack input voltage, the motor
              will be driven by the external input voltage. If there is only a stack
              voltage present, the motor will be driven by this voltage.
              
              <note type="caution">
               This means, if you have a high stack voltage and a low external voltage,
               the motor will be driven with the low external voltage. If you then remove
               the external connection, it will immediately be driven by the high
               stack voltage
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetCurrentConsumption">
             <summary>
              Returns the current consumption of the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetMotorCurrent(System.Int32)">
             <summary>
              Sets the current with which the motor will be driven.
              
              <note type="caution">
               Do not set this value above the specifications of your stepper motor.
               Otherwise it may damage your motor.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetMotorCurrent">
             <summary>
              Returns the current as set by <see cref="M:Tinkerforge.BrickStepper.SetMotorCurrent(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.Enable">
             <summary>
              Enables the driver chip. The driver parameters can be configured (maximum velocity,
              acceleration, etc) before it is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.Disable">
             <summary>
              Disables the driver chip. The configurations are kept (maximum velocity,
              acceleration, etc) but the motor is not driven until it is enabled again.
              
              <note type="caution">
               Disabling the driver chip while the motor is still turning can damage the
               driver chip. The motor should be stopped calling <see cref="M:Tinkerforge.BrickStepper.Stop" /> function
               before disabling the motor power. The <see cref="M:Tinkerforge.BrickStepper.Stop" /> function will **not**
               wait until the motor is actually stopped. You have to explicitly wait for the
               appropriate time after calling the <see cref="M:Tinkerforge.BrickStepper.Stop" /> function before calling
               the <see cref="M:Tinkerforge.BrickStepper.Disable" /> function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.IsEnabled">
             <summary>
              Returns *true* if the driver chip is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetDecay(System.Int32)">
             <summary>
              Sets the decay mode of the stepper motor.
              A value of 0 sets the fast decay mode, a value of
              65535 sets the slow decay mode and a value in between sets the mixed
              decay mode.
              
              Changing the decay mode is only possible if synchronous rectification
              is enabled (see <see cref="M:Tinkerforge.BrickStepper.SetSyncRect(System.Boolean)" />).
              
              For a good explanation of the different decay modes see
              `this &lt;https://ebldc.com/?p=86/&gt;`__ blog post by Avayan.
              
              A good decay mode is unfortunately different for every motor. The best
              way to work out a good decay mode for your stepper motor, if you can't
              measure the current with an oscilloscope, is to listen to the sound of
              the motor. If the value is too low, you often hear a high pitched
              sound and if it is too high you can often hear a humming sound.
              
              Generally, fast decay mode (small value) will be noisier but also
              allow higher motor speeds.
              
              <note>
               There is unfortunately no formula to calculate a perfect decay
               mode for a given stepper motor. If you have problems with loud noises
               or the maximum motor speed is too slow, you should try to tinker with
               the decay value
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetDecay">
             <summary>
              Returns the decay mode as set by <see cref="M:Tinkerforge.BrickStepper.SetDecay(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetMinimumVoltage(System.Int32)">
             <summary>
              Sets the minimum voltage, below which the <see cref="E:Tinkerforge.BrickStepper.UnderVoltageCallback" /> callback
              is triggered. The minimum possible value that works with the Stepper Brick is 8V.
              You can use this function to detect the discharge of a battery that is used
              to drive the stepper motor. If you have a fixed power supply, you likely do
              not need this functionality.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetMinimumVoltage">
             <summary>
              Returns the minimum voltage as set by <see cref="M:Tinkerforge.BrickStepper.SetMinimumVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetSyncRect(System.Boolean)">
             <summary>
              Turns synchronous rectification on or off (*true* or *false*).
              
              With synchronous rectification on, the decay can be changed
              (see <see cref="M:Tinkerforge.BrickStepper.SetDecay(System.Int32)" />). Without synchronous rectification fast
              decay is used.
              
              For an explanation of synchronous rectification see
              `here &lt;https://en.wikipedia.org/wiki/Active_rectification&gt;`__.
              
              <note type="caution">
               If you want to use high speeds (&gt; 10000 steps/s) for a large
               stepper motor with a large inductivity we strongly
               suggest that you disable synchronous rectification. Otherwise the
               Brick may not be able to cope with the load and overheat.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.IsSyncRect">
             <summary>
              Returns *true* if synchronous rectification is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetTimeBase(System.Int64)">
             <summary>
              Sets the time base of the velocity and the acceleration of the stepper brick.
              
              For example, if you want to make one step every 1.5 seconds, you can set
              the time base to 15 and the velocity to 10. Now the velocity is
              10steps/15s = 1steps/1.5s.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetTimeBase">
             <summary>
              Returns the time base as set by <see cref="M:Tinkerforge.BrickStepper.SetTimeBase(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetAllData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the following parameters: The current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
              
              There is also a callback for this function, see <see cref="E:Tinkerforge.BrickStepper.AllDataCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetAllDataPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickStepper.AllDataCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetAllDataPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickStepper.SetAllDataPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Brick will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickStepper.SetSPITFPBaudrate(System.Char,System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickStepper.SetSPITFPBaudrate(System.Char,System.Int64)" /> will be used statically.
              
              .. versionadded:: 2.3.6$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
              
              .. versionadded:: 2.3.6$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSendTimeoutCount(System.Byte)">
             <summary>
              Returns the timeout count for the different communication methods.
              
              The methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.
              
              This function is mostly used for debugging during development, in normal operation
              the counters should nearly always stay at 0.
              
              .. versionadded:: 2.3.4$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.SetSPITFPBaudrate(System.Char,System.Int64)">
             <summary>
              Sets the baudrate for a specific Bricklet port.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickStepper.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickStepper.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSPITFPBaudrate(System.Char)">
             <summary>
              Returns the baudrate for a given Bricklet port, see <see cref="M:Tinkerforge.BrickStepper.SetSPITFPBaudrate(System.Char,System.Int64)" />.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetSPITFPErrorCount(System.Char,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Brick side. All
              Bricklets have a similar function that returns the errors on the Bricklet side.
              
              .. versionadded:: 2.3.3$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.EnableStatusLED">
             <summary>
              Enables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.DisableStatusLED">
             <summary>
              Disables the status LED.
              
              The status LED is the blue LED next to the USB connector. If enabled is is
              on and it flickers if data is transfered. If disabled it is always off.
              
              The default state is enabled.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.IsStatusLEDEnabled">
             <summary>
              Returns *true* if the status LED is enabled, *false* otherwise.
              
              .. versionadded:: 2.3.1$nbsp;(Firmware)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetProtocol1BrickletName(System.Char,System.Byte@,System.Byte[]@,System.String@)">
             <summary>
              Returns the firmware and protocol version and the name of the Bricklet for a
              given port.
              
              This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet
              plugins.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has an
              accuracy of ±15%. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.Reset">
             <summary>
              Calling this function will reset the Brick. Calling this function
              on a Brick inside of a stack will reset the whole stack.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.WriteBrickletPlugin(System.Char,System.Byte,System.Byte[])">
             <summary>
              Writes 32 bytes of firmware to the bricklet attached at the given port.
              The bytes are written to the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.ReadBrickletPlugin(System.Char,System.Byte)">
             <summary>
              Reads 32 bytes of firmware from the bricklet attached at the given port.
              The bytes are read starting at the position offset * 32.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position is the position in the stack from '0' (bottom) to '8' (top).
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.OnUnderVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickStepper.OnNewStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometer">
             <summary>
              Measures acceleration in three axis
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_SET_ACCELERATION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_ACCELERATION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_SET_ACCELERATION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_ACCELERATION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_LED_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_LED_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_IS_LED_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_3HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_6HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_12HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_100HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_400HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_800HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.DATA_RATE_1600HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FULL_SCALE_2G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FULL_SCALE_4G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FULL_SCALE_6G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FULL_SCALE_8G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FULL_SCALE_16G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FILTER_BANDWIDTH_800HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FILTER_BANDWIDTH_400HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FILTER_BANDWIDTH_200HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometer.FILTER_BANDWIDTH_50HZ">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometer.AccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackPeriod(System.Int64)" />. The parameters are the
              X, Y and Z acceleration. The range is
              configured with <see cref="M:Tinkerforge.BrickletAccelerometer.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              The <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationCallback" /> callback is only triggered if the acceleration has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometer.AccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometer.Acceleration">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometer.AccelerationReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)" /> is reached.
              The parameters are the X, Y and Z acceleration. The range is
              configured with <see cref="M:Tinkerforge.BrickletAccelerometer.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAccelerometer.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometer.AccelerationReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometer.AccelerationReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the acceleration in x, y and z direction. The values
              are given in gₙ/1000 (1gₙ = 9.80665m/s²). The range is
              configured with <see cref="M:Tinkerforge.BrickletAccelerometer.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              If you want to get the acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationCallback" /> callback is only triggered if the acceleration has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetAccelerationCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the acceleration is *outside* the min and max values"
               "'i'",    "Callback is triggered when the acceleration is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the acceleration is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the acceleration is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetAccelerationCallbackThreshold(System.Char@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletAccelerometer.AccelerationReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletAccelerometer.SetAccelerationCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletAccelerometer.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetTemperature">
             <summary>
              Returns the temperature of the accelerometer.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.SetConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the data rate, full scale range and filter bandwidth.
              Possible values are:
              
              * Data rate of 0Hz to 1600Hz.
              * Full scale range of ±2gₙ up to ±16gₙ.
              * Filter bandwidth between 50Hz and 800Hz.
              
              Decreasing data rate or full scale range will also decrease the noise on
              the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetConfiguration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAccelerometer.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.LEDOn">
             <summary>
              Enables the LED on the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.LEDOff">
             <summary>
              Disables the LED on the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.IsLEDOn">
             <summary>
              Returns *true* if the LED is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.OnAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometer.OnAccelerationReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometerV2">
             <summary>
              Measures acceleration in three axis
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_INFO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_INFO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_CONTINUOUS_ACCELERATION_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_CONTINUOUS_ACCELERATION_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_FILTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_FILTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_0_781HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_1_563HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_3_125HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_6_2512HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_12_5HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_100HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_200HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_400HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_800HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_1600HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_3200HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_6400HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_12800HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.DATA_RATE_25600HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FULL_SCALE_2G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FULL_SCALE_4G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.FULL_SCALE_8G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.INFO_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.INFO_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.INFO_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.RESOLUTION_8BIT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.RESOLUTION_16BIT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.IIR_BYPASS_APPLIED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.IIR_BYPASS_BYPASSED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.LOW_PASS_FILTER_NINTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.LOW_PASS_FILTER_HALF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAccelerometerV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometerV2.AccelerationCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletAccelerometerV2.GetAcceleration(System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometerV2.AccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration16BitCallback">
             <summary>
              Returns 30 acceleration values with 16 bit resolution. The data rate can
              be configured with <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" /> and this callback can be
              enabled with <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetContinuousAccelerationConfiguration(System.Boolean,System.Boolean,System.Boolean,System.Byte)" />.
              
              The returned values are raw ADC data. If you want to put this data into
              a FFT to determine the occurrences of specific frequencies we recommend
              that you use the data as is. It has all of the ADC noise in it. This noise
              looks like pure noise at first glance, but it might still have some frequnecy
              information in it that can be utilized by the FFT.
              
              Otherwise you have to use the following formulas that depend on the
              full scale range (see <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" />) to calculate
              the data in gₙ/10000 (same unit that is returned by <see cref="M:Tinkerforge.BrickletAccelerometerV2.GetAcceleration(System.Int32@,System.Int32@,System.Int32@)" />):
              
              * Full scale 2g: acceleration = value * 625 / 1024
              * Full scale 4g: acceleration = value * 1250 / 1024
              * Full scale 8g: acceleration = value * 2500 / 1024
              
              The data is formated in the sequence "x, y, z, x, y, z, ..." depending on
              the enabled axis. Examples:
              
              * x, y, z enabled: "x, y, z, ..." 10x repeated
              * x, z enabled: "x, z, ..." 15x repeated
              * y enabled: "y, ..." 30x repeated
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration16BitEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration8BitCallback">
             <summary>
              Returns 60 acceleration values with 8 bit resolution. The data rate can
              be configured with <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" /> and this callback can be
              enabled with <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetContinuousAccelerationConfiguration(System.Boolean,System.Boolean,System.Boolean,System.Byte)" />.
              
              The returned values are raw ADC data. If you want to put this data into
              a FFT to determine the occurrences of specific frequencies we recommend
              that you use the data as is. It has all of the ADC noise in it. This noise
              looks like pure noise at first glance, but it might still have some frequnecy
              information in it that can be utilized by the FFT.
              
              Otherwise you have to use the following formulas that depend on the
              full scale range (see <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" />) to calculate
              the data in gₙ/10000 (same unit that is returned by <see cref="M:Tinkerforge.BrickletAccelerometerV2.GetAcceleration(System.Int32@,System.Int32@,System.Int32@)" />):
              
              * Full scale 2g: acceleration = value * 256 * 625 / 1024
              * Full scale 4g: acceleration = value * 256 * 1250 / 1024
              * Full scale 8g: acceleration = value * 256 * 2500 / 1024
              
              The data is formated in the sequence "x, y, z, x, y, z, ..." depending on
              the enabled axis. Examples:
              
              * x, y, z enabled: "x, y, z, ..." 20x repeated
              * x, z enabled: "x, z, ..." 30x repeated
              * y enabled: "y, ..." 60x repeated
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration8BitEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetAcceleration(System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration in x, y and z direction. The values
              are given in gₙ/10000 (1gₙ = 9.80665m/s²). The range is
              configured with <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" />.
              
              If you want to get the acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletAccelerometerV2.AccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Configures the data rate and full scale range.
              Possible values are:
              
              * Data rate of 0.781Hz to 25600Hz.
              * Full scale range of ±2g up to ±8g.
              
              Decreasing data rate or full scale range will also decrease the noise on
              the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAccelerometerV2.AccelerationCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              If this callback is enabled, the <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration16BitCallback" /> callback
              and <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration8BitCallback" /> callback will automatically be disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetAccelerationCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetInfoLEDConfig(System.Byte)">
             <summary>
              Configures the info LED (marked as "Force" on the Bricklet) to be either turned off,
              turned on, or blink in heartbeat mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetInfoLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetInfoLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetContinuousAccelerationConfiguration(System.Boolean,System.Boolean,System.Boolean,System.Byte)">
             <summary>
              For high throughput of acceleration data (&gt; 1000Hz) you have to use the
              <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration16BitCallback" /> or <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration8BitCallback" />
              callbacks.
              
              You can enable the callback for each axis (x, y, z) individually and choose a
              resolution of 8 bit or 16 bit.
              
              If at least one of the axis is enabled and the resolution is set to 8 bit,
              the <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration8BitCallback" /> callback is activated. If at least
              one of the axis is enabled and the resolution is set to 16 bit,
              the <see cref="E:Tinkerforge.BrickletAccelerometerV2.ContinuousAcceleration16BitCallback" /> callback is activated.
              
              The returned values are raw ADC data. If you want to put this data into
              a FFT to determine the occurrences of specific frequencies we recommend
              that you use the data as is. It has all of the ADC noise in it. This noise
              looks like pure noise at first glance, but it might still have some frequnecy
              information in it that can be utilized by the FFT.
              
              Otherwise you have to use the following formulas that depend on the configured
              resolution (8/16 bit) and the full scale range (see <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetConfiguration(System.Byte,System.Byte)" />) to calculate
              the data in gₙ/10000 (same unit that is returned by <see cref="M:Tinkerforge.BrickletAccelerometerV2.GetAcceleration(System.Int32@,System.Int32@,System.Int32@)" />):
              
              * 16 bit, full scale 2g: acceleration = value * 625 / 1024
              * 16 bit, full scale 4g: acceleration = value * 1250 / 1024
              * 16 bit, full scale 8g: acceleration = value * 2500 / 1024
              
              If a resolution of 8 bit is used, only the 8 most significant bits will be
              transferred, so you can use the following formulas:
              
              * 8 bit, full scale 2g: acceleration = value * 256 * 625 / 1024
              * 8 bit, full scale 4g: acceleration = value * 256 * 1250 / 1024
              * 8 bit, full scale 8g: acceleration = value * 256 * 2500 / 1024
              
              If no axis is enabled, both callbacks are disabled. If one of the continuous
              callbacks is enabled, the <see cref="E:Tinkerforge.BrickletAccelerometerV2.AccelerationCallback" /> callback is disabled.
              
              The maximum throughput depends on the exact configuration:
              
              <code>
               "Number of axis enabled", "Throughput 8 bit", "Throughout 16 bit"
              
               "1", "25600Hz", "25600Hz"
               "2", "25600Hz", "15000Hz"
               "3", "20000Hz", "10000Hz"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetContinuousAccelerationConfiguration(System.Boolean@,System.Boolean@,System.Boolean@,System.Byte@)">
             <summary>
              Returns the continuous acceleration configuration as set by
              <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetContinuousAccelerationConfiguration(System.Boolean,System.Boolean,System.Boolean,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetFilterConfiguration(System.Byte,System.Byte)">
             <summary>
              Configures IIR Bypass filter mode and low pass filter roll off corner frequency.
              
              The filter can be applied or bypassed and the corner frequency can be
              half or a ninth of the output data rate.
              
              .. image:: /Images/Bricklets/bricklet_accelerometer_v2_filter.png
                 :scale: 100 %
                 :alt: Accelerometer filter
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_accelerometer_v2_filter.png
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetFilterConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetFilterConfiguration(System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletAccelerometerV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAccelerometerV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.OnAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.OnContinuousAcceleration16BitCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAccelerometerV2.OnContinuousAcceleration8BitCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality">
             <summary>
              Measures IAQ index, temperature, humidity and air pressure
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_ALL_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_TEMPERATURE_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_TEMPERATURE_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_ALL_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_ALL_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_IAQ_INDEX">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_IAQ_INDEX_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_IAQ_INDEX_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_HUMIDITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_AIR_PRESSURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_AIR_PRESSURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_REMOVE_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_BACKGROUND_CALIBRATION_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_BACKGROUND_CALIBRATION_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.ACCURACY_UNRELIABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.ACCURACY_LOW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.ACCURACY_MEDIUM">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.ACCURACY_HIGH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.DURATION_4_DAYS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.DURATION_28_DAYS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAirQuality.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAirQuality.AllValuesCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletAirQuality.GetAllValues(System.Int32@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality.AllValuesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAirQuality.IAQIndexCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetIAQIndexCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletAirQuality.GetIAQIndex(System.Int32@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality.IAQIndexEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAirQuality.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletAirQuality.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAirQuality.HumidityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletAirQuality.GetHumidity" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality.HumidityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAirQuality.AirPressureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletAirQuality.GetAirPressure" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAirQuality.AirPressureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetAllValues(System.Int32@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns all values measured by the Air Quality Bricklet. The values are
              IAQ (Indoor Air Quality) Index (higher value means greater level of air pollution), IAQ Index Accuracy, Temperature, Humidity and
              Air Pressure.
              
              .. image:: /Images/Misc/bricklet_air_quality_iaq_index.png
                 :scale: 100 %
                 :alt: Air Quality Index description
                 :align: center
                 :target: ../../_images/Misc/bricklet_air_quality_iaq_index.png
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetTemperatureOffset(System.Int32)">
             <summary>
              Sets a temperature offset. A offset of 10 will decrease the measured temperature by 0.1 °C.
              
              If you install this Bricklet into an enclosure and you want to measure the ambient
              temperature, you may have to decrease the measured temperature by some value to
              compensate for the error because of the heating inside of the enclosure.
              
              We recommend that you leave the parts in the enclosure running for at least
              24 hours such that a temperature equilibrium can be reached. After that you can measure
              the temperature directly outside of enclosure and set the difference as offset.
              
              This temperature offset is used to calculate the relative humidity and
              IAQ index measurements. In case the Bricklet is installed in an enclosure, we
              recommend to measure and set the temperature offset to improve the accuracy of
              the measurements.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetTemperatureOffset">
             <summary>
              Returns the temperature offset as set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetTemperatureOffset(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAirQuality.AllValuesCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetAllValuesCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetIAQIndex(System.Int32@,System.Byte@)">
             <summary>
              Returns the IAQ index and accuracy. The higher the IAQ index, the greater the level of air pollution.
              
              .. image:: /Images/Misc/bricklet_air_quality_iaq_index.png
                 :scale: 100 %
                 :alt: IAQ index description
                 :align: center
                 :target: ../../_images/Misc/bricklet_air_quality_iaq_index.png
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAirQuality.IAQIndexCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAirQuality.SetIAQIndexCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetIAQIndexCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAirQuality.IAQIndexCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetIAQIndexCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetIAQIndexCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetTemperature">
             <summary>
              Returns temperature.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAirQuality.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAirQuality.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAirQuality.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletAirQuality.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletAirQuality.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetHumidity">
             <summary>
              Returns relative humidity.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAirQuality.HumidityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAirQuality.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAirQuality.HumidityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletAirQuality.HumidityCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetHumidityCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletAirQuality.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetAirPressure">
             <summary>
              Returns air pressure.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAirQuality.AirPressureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAirQuality.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAirQuality.AirPressureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletAirQuality.AirPressureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetAirPressureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletAirQuality.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.RemoveCalibration">
             <summary>
              Deletes the calibration from flash. After you call this function,
              you need to power cycle the Air Quality Bricklet.
              
              On the next power up the Bricklet will start a new calibration, as
              if it was started for the very first time.
              
              The calibration is based on the data of the last four days, so it takes
              four days until a full calibration is re-established.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetBackgroundCalibrationDuration(System.Byte)">
             <summary>
              The Air Quality Bricklet uses an automatic background calibration mechanism to
              calculate the IAQ Index. This calibration mechanism considers a history of
              measured data. The duration of this history can be configured to either be
              4 days or 28 days.
              
              If you keep the Bricklet mostly at one place and it does not get moved around
              to different environments, we recommend that you use a duration of 28 days.
              
              If you change the duration, the current calibration will be discarded and
              the calibration will start from beginning again. The configuration of the
              duration is saved in flash, so you should only have to call this function
              once in the lifetime of the Bricklet.
              
              The Bricklet has to be power cycled after this function is called
              for a duration change to take effect.
              
              Before firmware version 2.0.3 this was not configurable and the duration was
              4 days.
              
              The default value (since firmware version 2.0.3) is 28 days.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetBackgroundCalibrationDuration">
             <summary>
              Returns the background calibration duration as set by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetBackgroundCalibrationDuration(System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletAirQuality.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletAirQuality.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletAirQuality.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAirQuality.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.OnAllValuesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.OnIAQIndexCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.OnHumidityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAirQuality.OnAirPressureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLight">
             <summary>
              Measures ambient light up to 900lux
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ILLUMINANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_SET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_SET_ILLUMINANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ILLUMINANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLight.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.IlluminanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackPeriod(System.Int64)" />. The parameter is the illuminance of the
              ambient light sensor.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceCallback" /> callback is only triggered if the illuminance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLight.IlluminanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.Illuminance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog value of the
              ambient light sensor.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLight.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.IlluminanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the illuminance of the ambient light sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLight.IlluminanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.IlluminanceReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the ambient light sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLight.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLight.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetIlluminance">
             <summary>
              Returns the illuminance of the ambient light sensor.
              
              If you want to get the illuminance periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletAmbientLight.GetIlluminance" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletAmbientLight.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletAmbientLight.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
               Also, the analog-to-digital converter covers three different ranges that are
               set dynamically depending on the light intensity. It is impossible to
               distinguish between these ranges with the analog value.
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceCallback" /> callback is only triggered if the illuminance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetIlluminanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the illuminance is *outside* the min and max values"
               "'i'",    "Callback is triggered when the illuminance is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the illuminance is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the illuminance is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetIlluminanceCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletAmbientLight.IlluminanceReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletAmbientLight.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletAmbientLight.SetIlluminanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletAmbientLight.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletAmbientLight.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.OnIlluminanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.OnIlluminanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLight.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLightV2">
             <summary>
              Measures ambient light up to 64000lux
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_ILLUMINANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_SET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_SET_ILLUMINANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_ILLUMINANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_UNLIMITED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_64000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_32000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_16000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_8000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_1300LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.ILLUMINANCE_RANGE_600LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_50MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_100MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_150MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_200MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_250MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_300MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_350MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV2.INTEGRATION_TIME_400MS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackPeriod(System.Int64)" />. The parameter is the illuminance of the
              ambient light sensor.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback is only triggered if the illuminance has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLightV2.IlluminanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLightV2.Illuminance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackThreshold(System.Char,System.Int64,System.Int64)" /> is reached.
              The parameter is the illuminance of the ambient light sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLightV2.IlluminanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetIlluminance">
             <summary>
              Returns the illuminance of the ambient light sensor. The measurement range goes
              up to about 100000lux, but above 64000lux the precision starts to drop.
              
              .. versionchanged:: 2.0.2$nbsp;(Plugin)
                An illuminance of 0lux indicates an error condition where the sensor cannot
                perform a reasonable measurement. This can happen with very dim or very bright
                light conditions. In bright light conditions this might indicate that the sensor
                is saturated and the configuration should be modified (<see cref="M:Tinkerforge.BrickletAmbientLightV2.SetConfiguration(System.Byte,System.Byte)" />)
                to better match the light conditions.
              
              If you want to get the illuminance periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback is only triggered if the illuminance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetIlluminanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackThreshold(System.Char,System.Int64,System.Int64)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the illuminance is *outside* the min and max values"
               "'i'",    "Callback is triggered when the illuminance is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the illuminance is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the illuminance is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetIlluminanceCallbackThreshold(System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackThreshold(System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceReachedCallback" />,
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetIlluminanceCallbackThreshold(System.Char,System.Int64,System.Int64)" />,
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Sets the configuration. It is possible to configure an illuminance range
              between 0-600lux and 0-64000lux and an integration time between 50ms and 400ms.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
                The unlimited illuminance range allows to measure up to about 100000lux, but
                above 64000lux the precision starts to drop.
              
              A smaller illuminance range increases the resolution of the data. A longer
              integration time will result in less noise on the data.
              
              .. versionchanged:: 2.0.2$nbsp;(Plugin)
                If the actual measure illuminance is out-of-range then the current illuminance
                range maximum +0.01lux is reported by <see cref="M:Tinkerforge.BrickletAmbientLightV2.GetIlluminance" /> and the
                <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback. For example, 800001 for the 0-8000lux range.
              
              .. versionchanged:: 2.0.2$nbsp;(Plugin)
                With a long integration time the sensor might be saturated before the measured
                value reaches the maximum of the selected illuminance range. In this case 0lux
                is reported by <see cref="M:Tinkerforge.BrickletAmbientLightV2.GetIlluminance" /> and the <see cref="E:Tinkerforge.BrickletAmbientLightV2.IlluminanceCallback" /> callback.
              
              If the measurement is out-of-range or the sensor is saturated then you should
              configure the next higher illuminance range. If the highest range is already
              in use, then start to reduce the integration time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAmbientLightV2.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.OnIlluminanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV2.OnIlluminanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLightV3">
             <summary>
              Measures ambient light up to 64000lux
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_ILLUMINANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_SET_ILLUMINANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_ILLUMINANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_UNLIMITED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_64000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_32000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_16000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_8000LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_1300LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.ILLUMINANCE_RANGE_600LUX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_50MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_100MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_150MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_200MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_250MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_300MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_350MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.INTEGRATION_TIME_400MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAmbientLightV3.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletAmbientLightV3.GetIlluminance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAmbientLightV3.IlluminanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetIlluminance">
             <summary>
              Returns the illuminance of the ambient light sensor. The measurement range goes
              up to about 100000lux, but above 64000lux the precision starts to drop.
              The illuminance is given in lux/100, i.e. a value of 450000 means that an
              illuminance of 4500lux is measured.
              
              An illuminance of 0lux indicates an error condition where the sensor cannot
              perform a reasonable measurement. This can happen with very dim or very bright
              light conditions. In bright light conditions this might indicate that the sensor
              is saturated and the configuration should be modified (<see cref="M:Tinkerforge.BrickletAmbientLightV3.SetConfiguration(System.Byte,System.Byte)" />)
              to better match the conditions.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetIlluminanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Sets the configuration. It is possible to configure an illuminance range
              between 0-600lux and 0-64000lux and an integration time between 50ms and 400ms.
              
              The unlimited illuminance range allows to measure up to about 100000lux, but
              above 64000lux the precision starts to drop.
              
              A smaller illuminance range increases the resolution of the data. A longer
              integration time will result in less noise on the data.
              
              If the actual measure illuminance is out-of-range then the current illuminance
              range maximum +0.01lux is reported by <see cref="M:Tinkerforge.BrickletAmbientLightV3.GetIlluminance" /> and the
              <see cref="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback" /> callback. For example, 800001 for the 0-8000lux range.
              
              With a long integration time the sensor might be saturated before the measured
              value reaches the maximum of the selected illuminance range. In this case 0lux
              is reported by <see cref="M:Tinkerforge.BrickletAmbientLightV3.GetIlluminance" /> and the <see cref="E:Tinkerforge.BrickletAmbientLightV3.IlluminanceCallback" /> callback.
              
              If the measurement is out-of-range or the sensor is saturated then you should
              configure the next higher illuminance range. If the highest range is already
              in use, then start to reduce the integration time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletAmbientLightV3.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAmbientLightV3.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAmbientLightV3.OnIlluminanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogIn">
             <summary>
              Measures DC voltage between 0V and 45V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_RANGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_SET_AVERAGING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_AVERAGING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_AUTOMATIC">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_UP_TO_6V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_UP_TO_10V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_UP_TO_36V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_UP_TO_45V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogIn.RANGE_UP_TO_3V">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.VoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackPeriod(System.Int64)" />. The parameter is the voltage of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogIn.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.Voltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog
              value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogIn.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.VoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogIn.VoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.VoltageReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogIn.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogIn.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetVoltage">
             <summary>
              Returns the voltage of the sensor. The resolution between 0 and 6V is about 2mV.
              Between 6 and 45V the resolution is about 10mV.
              
              If you want to get the voltage periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletAnalogIn.GetVoltage" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletAnalogIn.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletAnalogIn.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletAnalogIn.VoltageReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletAnalogIn.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletAnalogIn.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletAnalogIn.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetRange(System.Byte)">
             <summary>
              Sets the measurement range. Possible ranges:
              
              * 0: Automatically switched
              * 1: 0V - 6.05V, ~1.48mV resolution
              * 2: 0V - 10.32V, ~2.52mV resolution
              * 3: 0V - 36.30V, ~8.86mV resolution
              * 4: 0V - 45.00V, ~11.25mV resolution
              * 5: 0V - 3.3V, ~0.81mV resolution, new in version 2.0.3$nbsp;(Plugin)
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetRange">
             <summary>
              Returns the measurement range as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetRange(System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.SetAveraging(System.Byte)">
             <summary>
              Set the length of a averaging for the voltage value.
              
              Setting the length to 0 will turn the averaging completely off. If the
              averaging is off, there is more noise on the data, but the data is without
              delay.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetAveraging">
             <summary>
              Returns the averaging configuration as set by <see cref="M:Tinkerforge.BrickletAnalogIn.SetAveraging(System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.OnVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogIn.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV2">
             <summary>
              Measures DC voltage between 0V and 42V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.VoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackPeriod(System.Int64)" />. The parameter is the voltage of the
              sensor.
              
              Der <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV2.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.Voltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog
              value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV2.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.VoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV2.VoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.VoltageReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV2.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV2.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetVoltage">
             <summary>
              Returns the measured voltage. The resolution is approximately 10mV.
              
              If you want to get the voltage periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletAnalogInV2.VoltageReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletAnalogInV2.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletAnalogInV2.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletAnalogInV2.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.SetMovingAverage(System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the voltage.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetMovingAverage">
             <summary>
              Returns the length of the moving average as set by <see cref="M:Tinkerforge.BrickletAnalogInV2.SetMovingAverage(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.OnVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV2.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV3">
             <summary>
              Measures DC voltage between 0V and 42V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_OVERSAMPLING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_OVERSAMPLING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_512">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_1024">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_2048">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_4096">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_8192">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.OVERSAMPLING_16384">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogInV3.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletAnalogInV3.VoltageCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletAnalogInV3.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletAnalogInV3.GetVoltage" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogInV3.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetVoltage">
             <summary>
              Returns the measured voltage. The resolution is approximately 10mV to 1mV
              depending on the oversampling configuration (<see cref="M:Tinkerforge.BrickletAnalogInV3.SetOversampling(System.Byte)" />).
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletAnalogInV3.VoltageCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletAnalogInV3.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletAnalogInV3.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletAnalogInV3.VoltageCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetVoltageCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletAnalogInV3.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetOversampling(System.Byte)">
             <summary>
              Sets the oversampling between 32x and 16384x. The Bricklet
              takes one 12bit sample every 17.5µs. Thus an oversampling
              of 32x is equivalent to an integration time of 0.56ms and
              a oversampling of 16384x is equivalent to an integration
              time of 286ms.
              
              The oversampling uses the moving average principle. A
              new value is always calculated once per millisecond.
              
              With increased oversampling the noise decreases. With decreased
              oversampling the reaction time increases (changes in voltage will be
              measured faster).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetOversampling">
             <summary>
              Returns the oversampling value as set by <see cref="M:Tinkerforge.BrickletAnalogInV3.SetOversampling(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetCalibration(System.Int16,System.Int32,System.Int32)">
             <summary>
              Sets a calibration for the measured voltage value.
              The formula for the calibration is as follows::
              
               Calibrated Value = (Value + Offset) * Multiplier / Divisor
              
              We recommend that you use the Brick Viewer to calibrate
              the Bricklet. The calibration will be saved internally and only
              has to be done once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetCalibration(System.Int16@,System.Int32@,System.Int32@)">
             <summary>
              Returns the calibration as set by <see cref="M:Tinkerforge.BrickletAnalogInV3.SetCalibration(System.Int16,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletAnalogInV3.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletAnalogInV3.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletAnalogInV3.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAnalogInV3.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogInV3.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogOut">
             <summary>
              Generates configurable DC voltage between 0V and 5V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.FUNCTION_SET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.FUNCTION_SET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.FUNCTION_GET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.MODE_ANALOG_VALUE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.MODE_1K_TO_GROUND">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.MODE_100K_TO_GROUND">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOut.MODE_500K_TO_GROUND">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.SetVoltage(System.Int32)">
             <summary>
              Sets the voltage. Calling this function will set
              the mode to 0 (see <see cref="M:Tinkerforge.BrickletAnalogOut.SetMode(System.Byte)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.GetVoltage">
             <summary>
              Returns the voltage as set by <see cref="M:Tinkerforge.BrickletAnalogOut.SetVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.SetMode(System.Byte)">
             <summary>
              Sets the mode of the analog value. Possible modes:
              
              * 0: Normal Mode (Analog value as set by <see cref="M:Tinkerforge.BrickletAnalogOut.SetVoltage(System.Int32)" /> is applied)
              * 1: 1k Ohm resistor to ground
              * 2: 100k Ohm resistor to ground
              * 3: 500k Ohm resistor to ground
              
              Setting the mode to 0 will result in an output voltage of 0 V. You can jump
              to a higher output voltage directly by calling <see cref="M:Tinkerforge.BrickletAnalogOut.SetVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.GetMode">
             <summary>
              Returns the mode as set by <see cref="M:Tinkerforge.BrickletAnalogOut.SetMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOut.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogOutV2">
             <summary>
              Generates configurable DC voltage between 0V and 12V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.FUNCTION_SET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.FUNCTION_GET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.FUNCTION_GET_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV2.SetOutputVoltage(System.Int32)">
             <summary>
              Sets the voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV2.GetOutputVoltage">
             <summary>
              Returns the voltage as set by <see cref="M:Tinkerforge.BrickletAnalogOutV2.SetOutputVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV2.GetInputVoltage">
             <summary>
              Returns the input voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletAnalogOutV3">
             <summary>
              Generates configurable DC voltage between 0V and 12V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_SET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_OUTPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletAnalogOutV3.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.SetOutputVoltage(System.Int32)">
             <summary>
              Sets the voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetOutputVoltage">
             <summary>
              Returns the voltage as set by <see cref="M:Tinkerforge.BrickletAnalogOutV3.SetOutputVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetInputVoltage">
             <summary>
              Returns the input voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletAnalogOutV3.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletAnalogOutV3.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletAnalogOutV3.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletAnalogOutV3.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletAnalogOutV3.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometer">
             <summary>
              Measures air pressure and altitude changes
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_ALTITUDE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_AIR_PRESSURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_AIR_PRESSURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_AIR_PRESSURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_AIR_PRESSURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_ALTITUDE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_ALTITUDE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_REFERENCE_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_REFERENCE_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_AVERAGING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_AVERAGING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_SET_I2C_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_I2C_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.I2C_MODE_FAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometer.I2C_MODE_SLOW">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AirPressureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackPeriod(System.Int64)" />. The parameter is the air
              pressure of the air pressure sensor.
              
              The <see cref="E:Tinkerforge.BrickletBarometer.AirPressureCallback" /> callback is only triggered if the air pressure has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometer.AirPressureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AirPressure">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AltitudeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackPeriod(System.Int64)" />. The parameter is the altitude of
              the air pressure sensor.
              
              The <see cref="E:Tinkerforge.BrickletBarometer.AltitudeCallback" /> callback is only triggered if the altitude has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometer.AltitudeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.Altitude">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AirPressureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the air pressure of the air pressure sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletBarometer.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometer.AirPressureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AirPressureReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AltitudeReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the altitude of the air pressure sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletBarometer.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometer.AltitudeReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometer.AltitudeReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAirPressure">
             <summary>
              Returns the air pressure of the air pressure sensor.
              
              If you want to get the air pressure periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletBarometer.AirPressureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAltitude">
             <summary>
              Returns the relative altitude of the air pressure sensor. The value is
              calculated based on the difference between the current air pressure
              and the reference air pressure that can be set with <see cref="M:Tinkerforge.BrickletBarometer.SetReferenceAirPressure(System.Int32)" />.
              
              If you want to get the altitude periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletBarometer.AltitudeCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletBarometer.AirPressureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletBarometer.AirPressureCallback" /> callback is only triggered if the air pressure has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAirPressureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletBarometer.AltitudeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletBarometer.AltitudeCallback" /> callback is only triggered if the altitude has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAltitudeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletBarometer.AirPressureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the air pressure is *outside* the min and max values"
               "'i'",    "Callback is triggered when the air pressure is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the air pressure is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the air pressure is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAirPressureCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletBarometer.AltitudeReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the altitude is *outside* the min and max values"
               "'i'",    "Callback is triggered when the altitude is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the altitude is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the altitude is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAltitudeCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletBarometer.AirPressureReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletBarometer.AltitudeReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletBarometer.SetAirPressureCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletBarometer.SetAltitudeCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletBarometer.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetReferenceAirPressure(System.Int32)">
             <summary>
              Sets the reference air pressure for the altitude calculation.
              Setting the reference to the current air pressure results in a calculated
              altitude of 0cm. Passing 0 is a shortcut for passing the current air pressure as
              reference.
              
              Well known reference values are the Q codes
              `QNH &lt;https://en.wikipedia.org/wiki/QNH&gt;`__ and
              `QFE &lt;https://en.wikipedia.org/wiki/Mean_sea_level_pressure#Mean_sea_level_pressure&gt;`__
              used in aviation.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetChipTemperature">
             <summary>
              Returns the temperature of the air pressure sensor.
              
              This temperature is used internally for temperature compensation of the air
              pressure measurement. It is not as accurate as the temperature measured by the
              :ref:`temperature_bricklet` or the :ref:`temperature_ir_bricklet`.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetReferenceAirPressure">
             <summary>
              Returns the reference air pressure as set by <see cref="M:Tinkerforge.BrickletBarometer.SetReferenceAirPressure(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetAveraging(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the different averaging parameters. It is possible to set
              the length of a normal averaging for the temperature and pressure,
              as well as an additional length of a
              `moving average &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the pressure. The moving average is calculated from the normal
              averages.  There is no moving average for the temperature.
              
              Setting the all three parameters to 0 will turn the averaging
              completely off. If the averaging is off, there is lots of noise
              on the data, but the data is without delay. Thus we recommend
              to turn the averaging off if the Barometer Bricklet data is
              to be used for sensor fusion with other sensors.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetAveraging(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the averaging configuration as set by <see cref="M:Tinkerforge.BrickletBarometer.SetAveraging(System.Byte,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.SetI2CMode(System.Byte)">
             <summary>
              Sets the I2C mode. Possible modes are:
              
              * 0: Fast (400kHz)
              * 1: Slow (100kHz)
              
              If you have problems with obvious outliers in the
              Barometer Bricklet measurements, they may be caused by EMI issues.
              In this case it may be helpful to lower the I2C speed.
              
              It is however not recommended to lower the I2C speed in applications where
              a high throughput needs to be achieved.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetI2CMode">
             <summary>
              Returns the I2C mode as set by <see cref="M:Tinkerforge.BrickletBarometer.SetI2CMode(System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.OnAirPressureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.OnAltitudeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.OnAirPressureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometer.OnAltitudeReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometerV2">
             <summary>
              Measures air pressure and altitude changes
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_AIR_PRESSURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_AIR_PRESSURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_ALTITUDE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_ALTITUDE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_ALTITUDE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_REFERENCE_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_REFERENCE_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_1HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_10HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.DATA_RATE_75HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.LOW_PASS_FILTER_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.LOW_PASS_FILTER_1_9TH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.LOW_PASS_FILTER_1_20TH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletBarometerV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometerV2.AirPressureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletBarometerV2.GetAirPressure" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometerV2.AirPressureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometerV2.AltitudeCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetAltitudeCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletBarometerV2.GetAltitude" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometerV2.AltitudeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletBarometerV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletBarometerV2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletBarometerV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetAirPressure">
             <summary>
              Returns the measured air pressure.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletBarometerV2.AirPressureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletBarometerV2.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletBarometerV2.AirPressureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletBarometerV2.AirPressureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetAirPressureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetAirPressureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetAltitude">
             <summary>
              Returns the relative altitude of the air pressure sensor. The value
              is calculated based on the difference between the
              current air pressure and the reference air pressure that can be set
              with <see cref="M:Tinkerforge.BrickletBarometerV2.SetReferenceAirPressure(System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletBarometerV2.AltitudeCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletBarometerV2.SetAltitudeCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetAltitudeCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletBarometerV2.AltitudeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletBarometerV2.AltitudeCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetAltitudeCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetAltitudeCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetTemperature">
             <summary>
              Returns the temperature of the air pressure sensor.
              
              This temperature is used internally for temperature compensation
              of the air pressure measurement. It is not as accurate as the
              temperature measured by the :ref:`temperature_v2_bricklet` or the
              :ref:`temperature_ir_v2_bricklet`.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletBarometerV2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletBarometerV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletBarometerV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletBarometerV2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetMovingAverageConfiguration(System.Int32,System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the air pressure and temperature measurements.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
              
              If you want to do long term measurements the longest moving average will give
              the cleanest results.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetMovingAverageConfiguration(System.Int32@,System.Int32@)">
             <summary>
              Returns the moving average configuration as set by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetMovingAverageConfiguration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetReferenceAirPressure(System.Int32)">
             <summary>
              Sets the reference air pressure for the altitude calculation.
              Setting the reference to the
              current air pressure results in a calculated altitude of 0mm. Passing 0 is
              a shortcut for passing the current air pressure as reference.
              
              Well known reference values are the Q codes
              `QNH &lt;https://en.wikipedia.org/wiki/QNH&gt;`__ and
              `QFE &lt;https://en.wikipedia.org/wiki/Mean_sea_level_pressure#Mean_sea_level_pressure&gt;`__
              used in aviation.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetReferenceAirPressure">
             <summary>
              Returns the reference air pressure as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetReferenceAirPressure(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetCalibration(System.Int32,System.Int32)">
             <summary>
              Sets the one point calibration (OPC) values for the air pressure measurement.
              
              Before the Bricklet can be calibrated any previous calibration has to be removed
              by setting ``measured air pressure`` and ``actual air pressure`` to 0.
              
              Then the current air pressure has to be measured using the Bricklet
              (``measured air pressure``) and with an accurate reference barometer
              (``actual air pressure``) at the same time and passed to this function.
              
              After proper calibration the air pressure measurement can achieve an accuracy
              up to 0.2 hPa.
              
              The calibration is saved in the EEPROM of the Bricklet and only needs to be
              configured once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetCalibration(System.Int32@,System.Int32@)">
             <summary>
              Returns the air pressure one point calibration values as set by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetCalibration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetSensorConfiguration(System.Byte,System.Byte)">
             <summary>
              Configures the data rate and air pressure low pass filter. The low pass filter
              cut-off frequency (if enabled) can be set to 1/9th or 1/20th of the configure
              data rate to decrease the noise on the air pressure data.
              
              The low pass filter configuration only applies to the air pressure measurement.
              There is no low pass filter for the temperature measurement.
              
              A higher data rate will result in a less precise temperature because of
              self-heating of the sensor. If the accuracy of the temperature reading is
              important to you, we would recommend the 1Hz data rate.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetSensorConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the sensor configuration as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetSensorConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletBarometerV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletBarometerV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletBarometerV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletBarometerV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.OnAirPressureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.OnAltitudeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletBarometerV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCAN">
             <summary>
              Communicates with CAN bus devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_WRITE_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_READ_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_ENABLE_FRAME_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_DISABLE_FRAME_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_IS_FRAME_READ_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_SET_READ_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_GET_READ_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_GET_ERROR_LOG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_SET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_GET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FRAME_TYPE_STANDARD_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FRAME_TYPE_STANDARD_REMOTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FRAME_TYPE_EXTENDED_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FRAME_TYPE_EXTENDED_REMOTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_10KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_20KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_50KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_125KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_250KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_500KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_800KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.BAUD_RATE_1000KBPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.TRANSCEIVER_MODE_NORMAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.TRANSCEIVER_MODE_LOOPBACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.TRANSCEIVER_MODE_READ_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FILTER_MODE_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FILTER_MODE_ACCEPT_ALL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FILTER_MODE_MATCH_STANDARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FILTER_MODE_MATCH_STANDARD_AND_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCAN.FILTER_MODE_MATCH_EXTENDED">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCAN.FrameReadCallback">
             <summary>
              This callback is triggered if a data or remote frame was received by the CAN
              transceiver.
              
              The ``identifier`` return value follows the identifier format described for
              <see cref="M:Tinkerforge.BrickletCAN.WriteFrame(System.Byte,System.Int64,System.Byte[],System.Byte)" />.
              
              For remote frames the ``data`` return value always contains invalid values.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver at all (see <see cref="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)" />).
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletCAN.EnableFrameReadCallback" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCAN.FrameReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCAN.FrameRead">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCAN.FrameReadableCallback">
             <summary>
              This callback is triggered if a data or remote frame was received by the CAN
              transceiver. The received frame can be read with <see cref="M:Tinkerforge.BrickletCAN.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@,System.Byte@)" />.
              If additional frames are received, but <see cref="M:Tinkerforge.BrickletCAN.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@,System.Byte@)" /> was not called yet, the callback
              will not trigger again.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read queue (see
              <see cref="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)" />).
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletCAN.SetFrameReadableCallbackConfiguration(System.Boolean)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCAN.FrameReadableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCAN.FrameReadable">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.WriteFrame(System.Byte,System.Int64,System.Byte[],System.Byte)">
             <summary>
              Writes a data or remote frame to the write buffer to be transmitted over the
              CAN transceiver.
              
              The Bricklet supports the standard 11-bit (CAN 2.0A) and the additional extended
              18-bit (CAN 2.0B) identifiers. For standard frames the Bricklet uses bit 0 to 10
              from the ``identifier`` parameter as standard 11-bit identifier. For extended
              frames the Bricklet additionally uses bit 11 to 28 from the ``identifier``
              parameter as extended 18-bit identifier.
              
              For remote frames the ``data`` parameter is ignored.
              
              Returns *true* if the frame was successfully added to the write buffer. Returns
              *false* if the frame could not be added because write buffer is already full.
              
              The write buffer can overflow if frames are written to it at a higher rate
              than the Bricklet can transmitted them over the CAN transceiver. This may
              happen if the CAN transceiver is configured as read-only or is using a low baud
              rate (see <see cref="M:Tinkerforge.BrickletCAN.SetConfiguration(System.Byte,System.Byte,System.Int32)" />). It can also happen if the CAN bus is
              congested and the frame cannot be transmitted because it constantly loses
              arbitration or because the CAN transceiver is currently disabled due to a high
              write error level (see <see cref="M:Tinkerforge.BrickletCAN.GetErrorLog(System.Byte@,System.Byte@,System.Boolean@,System.Int64@,System.Int64@,System.Int64@)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@,System.Byte@)">
             <summary>
              Tries to read the next data or remote frame from the read buffer and return it.
              If a frame was successfully read, then the ``success`` return value is set to
              *true* and the other return values contain the frame. If the read buffer is
              empty and no frame could be read, then the ``success`` return value is set to
              *false* and the other return values contain invalid data.
              
              The ``identifier`` return value follows the identifier format described for
              <see cref="M:Tinkerforge.BrickletCAN.WriteFrame(System.Byte,System.Int64,System.Byte[],System.Byte)" />.
              
              For remote frames the ``data`` return value always contains invalid data.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read buffer (see
              <see cref="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)" />).
              
              Instead of polling with this function, you can also use callbacks. See the
              <see cref="M:Tinkerforge.BrickletCAN.EnableFrameReadCallback" /> function and the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.EnableFrameReadCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback.
              
              By default the callback is disabled. Enabling this callback will disable the <see cref="E:Tinkerforge.BrickletCAN.FrameReadableCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.DisableFrameReadCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.IsFrameReadCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.SetConfiguration(System.Byte,System.Byte,System.Int32)">
             <summary>
              Sets the configuration for the CAN bus communication.
              
              The baud rate can be configured in steps between 10 and 1000 kbit/s.
              
              The CAN transceiver has three different modes:
              
              * Normal: Reads from and writes to the CAN bus and performs active bus
                error detection and acknowledgement.
              * Loopback: All reads and writes are performed internally. The transceiver
                is disconnected from the actual CAN bus.
              * Read-Only: Only reads from the CAN bus, but does neither active bus error
                detection nor acknowledgement. Only the receiving part of the transceiver
                is connected to the CAN bus.
              
              The write timeout has three different modes that define how a failed frame
              transmission should be handled:
              
              * One-Shot (= -1): Only one transmission attempt will be made. If the
                transmission fails then the frame is discarded.
              * Infinite (= 0): Infinite transmission attempts will be made. The frame will
                never be discarded.
              * Milliseconds (&gt; 0): A limited number of transmission attempts will be made.
                If the frame could not be transmitted successfully after the configured
                number of milliseconds then the frame is discarded.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.GetConfiguration(System.Byte@,System.Byte@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCAN.SetConfiguration(System.Byte,System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)">
             <summary>
              Set the read filter configuration. This can be used to define which frames
              should be received by the CAN transceiver and put into the read buffer.
              
              The read filter has five different modes that define if and how the mask and
              the two filters are applied:
              
              * Disabled: No filtering is applied at all. All frames are received even
                incomplete and defective frames. This mode should be used for debugging only.
              * Accept-All: All complete and error-free frames are received.
              * Match-Standard: Only standard frames with a matching identifier are received.
              * Match-Standard-and-Data: Only standard frames with matching identifier and
                data bytes are received.
              * Match-Extended: Only extended frames with a matching identifier are received.
              
              The mask and filters are used as bit masks. Their usage depends on the mode:
              
              * Disabled: Mask and filters are ignored.
              * Accept-All: Mask and filters are ignored.
              * Match-Standard: Bit 0 to 10 (11 bits) of mask and filters are used to match
                the 11-bit identifier of standard frames.
              * Match-Standard-and-Data: Bit 0 to 10 (11 bits) of mask and filters are used
                to match the 11-bit identifier of standard frames. Bit 11 to 18 (8 bits) and
                bit 19 to 26 (8 bits) of mask and filters are used to match the first and
                second data byte (if present) of standard frames.
              * Match-Extended: Bit 0 to 10 (11 bits) of mask and filters are used
                to match the standard 11-bit identifier part of extended frames. Bit 11 to 28
                (18 bits) of mask and filters are used to match the extended 18-bit identifier
                part of extended frames.
              
              The mask and filters are applied in this way: The mask is used to select the
              identifier and data bits that should be compared to the corresponding filter
              bits. All unselected bits are automatically accepted. All selected bits have
              to match one of the filters to be accepted. If all bits for the selected mode
              are accepted then the frame is accepted and is added to the read buffer.
              
              <code>
               "Mask Bit", "Filter Bit", "Identifier/Data Bit", "Result"
              
               0, X, X, Accept
               1, 0, 0, Accept
               1, 0, 1, Reject
               1, 1, 0, Reject
               1, 1, 1, Accept
              </code>
              
              For example, to receive standard frames with identifier 0x123 only the mode can
              be set to Match-Standard with 0x7FF as mask and 0x123 as filter 1 and filter 2.
              The mask of 0x7FF selects all 11 identifier bits for matching so that the
              identifier has to be exactly 0x123 to be accepted.
              
              To accept identifier 0x123 and identifier 0x456 at the same time, just set
              filter 2 to 0x456 and keep mask and filter 1 unchanged.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.GetReadFilter(System.Byte@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the read filter as set by <see cref="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.GetErrorLog(System.Byte@,System.Byte@,System.Boolean@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns information about different kinds of errors.
              
              The write and read error levels indicate the current level of checksum,
              acknowledgement, form, bit and stuffing errors during CAN bus write and read
              operations.
              
              When the write error level exceeds 255 then the CAN transceiver gets disabled
              and no frames can be transmitted or received anymore. The CAN transceiver will
              automatically be activated again after the CAN bus is idle for a while.
              
              The write and read error levels are not available in read-only transceiver mode
              (see <see cref="M:Tinkerforge.BrickletCAN.SetConfiguration(System.Byte,System.Byte,System.Int32)" />) and are reset to 0 as a side effect of changing
              the configuration or the read filter.
              
              The write timeout, read register and buffer overflow counts represents the
              number of these errors:
              
              * A write timeout occurs if a frame could not be transmitted before the
                configured write timeout expired (see <see cref="M:Tinkerforge.BrickletCAN.SetConfiguration(System.Byte,System.Byte,System.Int32)" />).
              * A read register overflow occurs if the read register of the CAN transceiver
                still contains the last received frame when the next frame arrives. In this
                case the newly arrived frame is lost. This happens if the CAN transceiver
                receives more frames than the Bricklet can handle. Using the read filter
                (see <see cref="M:Tinkerforge.BrickletCAN.SetReadFilter(System.Byte,System.Int64,System.Int64,System.Int64)" />) can help to reduce the amount of received frames.
                This count is not exact, but a lower bound, because the Bricklet might not
                able detect all overflows if they occur in rapid succession.
              * A read buffer overflow occurs if the read buffer of the Bricklet is already
                full when the next frame should be read from the read register of the CAN
                transceiver. In this case the frame in the read register is lost. This
                happens if the CAN transceiver receives more frames to be added to the read
                buffer than are removed from the read buffer using the <see cref="M:Tinkerforge.BrickletCAN.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@,System.Byte@)" />
                function. Using the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback ensures that the read buffer
                can not overflow.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.SetFrameReadableCallbackConfiguration(System.Boolean)">
             <summary>
              Enables/disables the <see cref="E:Tinkerforge.BrickletCAN.FrameReadableCallback" /> callback.
              
              By default the callback is disabled. Enabling this callback will disable the <see cref="E:Tinkerforge.BrickletCAN.FrameReadCallback" /> callback.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.GetFrameReadableCallbackConfiguration">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletCAN.FrameReadableCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.OnFrameReadCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCAN.OnFrameReadableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCANV2">
             <summary>
              Communicates with CAN bus devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_WRITE_FRAME_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_READ_FRAME_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_FRAME_READ_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_FRAME_READ_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_TRANSCEIVER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_TRANSCEIVER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_QUEUE_CONFIGURATION_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_QUEUE_CONFIGURATION_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_READ_FILTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_READ_FILTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_ERROR_LOG_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_ERROR_OCCURRED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_ERROR_OCCURRED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FRAME_TYPE_STANDARD_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FRAME_TYPE_STANDARD_REMOTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FRAME_TYPE_EXTENDED_DATA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FRAME_TYPE_EXTENDED_REMOTE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_MODE_NORMAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_MODE_LOOPBACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_MODE_READ_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FILTER_MODE_ACCEPT_ALL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FILTER_MODE_MATCH_STANDARD_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FILTER_MODE_MATCH_EXTENDED_ONLY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.FILTER_MODE_MATCH_STANDARD_AND_EXTENDED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_STATE_ACTIVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_STATE_PASSIVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.TRANSCEIVER_STATE_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.COMMUNICATION_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.COMMUNICATION_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.ERROR_LED_CONFIG_SHOW_TRANSCEIVER_STATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCANV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCANV2.FrameReadLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCANV2.FrameReadLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCANV2.FrameReadableCallback">
             <summary>
              This callback is triggered if a data or remote frame was received by the CAN
              transceiver. The received frame can be read with <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" />.
              If additional frames are received, but <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" /> was not called yet, the callback
              will not trigger again.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read queue (see
              <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletCANV2.SetFrameReadableCallbackConfiguration(System.Boolean)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCANV2.FrameReadableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCANV2.ErrorOccurredCallback">
             <summary>
              This callback is triggered if any error occurred while writing, reading or transmitting CAN frames.
              
              The callback is only triggered once until <see cref="M:Tinkerforge.BrickletCANV2.GetErrorLog(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Boolean[]@,System.Int64@)" /> is called. That function will return
              details abount the error(s) occurred.
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletCANV2.SetErrorOccurredCallbackConfiguration(System.Boolean)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCANV2.ErrorOccurredEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCANV2.FrameReadCallback">
             <summary>
              This callback is triggered if a data or remote frame was received by the CAN
              transceiver.
              
              The ``identifier`` return value follows the identifier format described for
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" />.
              
              For details on the ``data`` return value see <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" />.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read queue (see
              <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletCANV2.SetFrameReadCallbackConfiguration(System.Boolean)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for data.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCANV2.FrameReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.WriteFrameLowLevel(System.Byte,System.Int64,System.Byte,System.Byte[])">
             <summary>
              Writes a data or remote frame to the write queue to be transmitted over the
              CAN transceiver.
              
              The Bricklet supports the standard 11-bit (CAN 2.0A) and the additional extended
              29-bit (CAN 2.0B) identifiers. For standard frames the Bricklet uses bit 0 to 10
              from the ``identifier`` parameter as standard 11-bit identifier. For extended
              frames the Bricklet uses bit 0 to 28 from the ``identifier`` parameter as
              extended 29-bit identifier.
              
              The ``data`` parameter can be up to 15 bytes long. For data frames up to 8 bytes
              will be used as the actual data. The length (DLC) field in the data or remote
              frame will be set to the actual length of the ``data`` parameter. This allows
              to transmit data and remote frames with excess length. For remote frames only
              the length of the ``data`` parameter is used. The actual ``data`` bytes are
              ignored.
              
              Returns *true* if the frame was successfully added to the write queue. Returns
              *false* if the frame could not be added because write queue is already full or
              because the write buffer or the write backlog are configured with a size of
              zero (see <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />).
              
              The write queue can overflow if frames are written to it at a higher rate
              than the Bricklet can transmitted them over the CAN transceiver. This may
              happen if the CAN transceiver is configured as read-only or is using a low baud
              rate (see <see cref="M:Tinkerforge.BrickletCANV2.SetTransceiverConfiguration(System.Int64,System.Int32,System.Byte)" />). It can also happen if the CAN
              bus is congested and the frame cannot be transmitted because it constantly loses
              arbitration or because the CAN transceiver is currently disabled due to a high
              write error level (see <see cref="M:Tinkerforge.BrickletCANV2.GetErrorLog(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Boolean[]@,System.Int64@)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.ReadFrameLowLevel(System.Boolean@,System.Byte@,System.Int64@,System.Byte@,System.Byte[]@)">
             <summary>
              Tries to read the next data or remote frame from the read queue and returns it.
              If a frame was successfully read, then the ``success`` return value is set to
              *true* and the other return values contain the frame. If the read queue is
              empty and no frame could be read, then the ``success`` return value is set to
              *false* and the other return values contain invalid data.
              
              The ``identifier`` return value follows the identifier format described for
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" />.
              
              The ``data`` return value can be up to 15 bytes long. For data frames up to the
              first 8 bytes are the actual received data. All bytes after the 8th byte are
              always zero and only there to indicate the length of a data or remote frame
              with excess length. For remote frames the length of the ``data`` return value
              represents the requested length. The actual ``data`` bytes are always zero.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read queue (see
              <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              Instead of polling with this function, you can also use callbacks. See the
              <see cref="M:Tinkerforge.BrickletCANV2.SetFrameReadCallbackConfiguration(System.Boolean)" /> function and the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" />
              callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetFrameReadCallbackConfiguration(System.Boolean)">
             <summary>
              Enables and disables the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" /> callback.
              
              By default the callback is disabled. Enabling this callback will disable the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadableCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetFrameReadCallbackConfiguration">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" /> callback is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetTransceiverConfiguration(System.Int64,System.Int32,System.Byte)">
             <summary>
              Sets the transceiver configuration for the CAN bus communication.
              
              The CAN transceiver has three different modes:
              
              * Normal: Reads from and writes to the CAN bus and performs active bus
                error detection and acknowledgement.
              * Loopback: All reads and writes are performed internally. The transceiver
                is disconnected from the actual CAN bus.
              * Read-Only: Only reads from the CAN bus, but does neither active bus error
                detection nor acknowledgement. Only the receiving part of the transceiver
                is connected to the CAN bus.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetTransceiverConfiguration(System.Int64@,System.Int32@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetTransceiverConfiguration(System.Int64,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetQueueConfigurationLowLevel(System.Byte,System.Int32,System.Int32,System.Byte,System.Int16[],System.Int32)">
             <summary>
              Sets the write and read queue configuration.
              
              The CAN transceiver has 32 buffers in total in hardware for transmitting and
              receiving frames. Additionally, the Bricklet has a backlog for 768 frames in
              total in software. The buffers and the backlog can be freely assigned to the
              write and read queues.
              
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" /> writes a frame into the write backlog. The Bricklet moves
              the frame from the backlog into a free write buffer. The CAN transceiver then
              transmits the frame from the write buffer to the CAN bus. If there are no
              write buffers (``write_buffer_size`` is zero) or there is no write backlog
              (``write_backlog_size`` is zero) then no frames can be transmitted and
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" /> returns always *false*.
              
              The CAN transceiver receives a frame from the CAN bus and stores it into a
              free read buffer. The Bricklet moves the frame from the read buffer into the
              read backlog. <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" /> reads the frame from the read backlog and
              returns it. If there are no read buffers (``read_buffer_sizes`` is empty) or
              there is no read backlog (``read_backlog_size`` is zero) then no frames can be
              received and <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" /> returns always *false*.
              
              There can be multiple read buffers, because the CAN transceiver cannot receive
              data and remote frames into the same read buffer. A positive read buffer size
              represents a data frame read buffer and a negative read buffer size represents
              a remote frame read buffer. A read buffer size of zero is not allowed. By
              default the first read buffer is configured for data frames and the second read
              buffer is configured for remote frame. There can be up to 32 different read
              buffers, assuming that no write buffer is used. Each read buffer has its own
              filter configuration (see <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              A valid queue configuration fulfills these conditions::
              
               write_buffer_size + abs(read_buffer_size_0) + abs(read_buffer_size_1) + ... + abs(read_buffer_size_31) &lt;= 32
               write_backlog_size + read_backlog_size &lt;= 768
              
              The write buffer timeout has three different modes that define how a failed
              frame transmission should be handled:
              
              * Single-Shot (&lt; 0): Only one transmission attempt will be made. If the
                transmission fails then the frame is discarded.
              * Infinite (= 0): Infinite transmission attempts will be made. The frame will
                never be discarded.
              * Milliseconds (&gt; 0): A limited number of transmission attempts will be made.
                If the frame could not be transmitted successfully after the configured
                number of milliseconds then the frame is discarded.
              
              The current content of the queues is lost when this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetQueueConfigurationLowLevel(System.Byte@,System.Int32@,System.Int32@,System.Byte@,System.Int16[]@,System.Int32@)">
             <summary>
              Returns the queue configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)">
             <summary>
              Set the read filter configuration for the given read buffer index. This can be
              used to define which frames should be received by the CAN transceiver and put
              into the read buffer.
              
              The read filter has four different modes that define if and how the filter mask
              and the filter identifier are applied:
              
              * Accept-All: All frames are received.
              * Match-Standard-Only: Only standard frames with a matching identifier are
                received.
              * Match-Extended-Only: Only extended frames with a matching identifier are
                received.
              * Match-Standard-And-Extended: Standard and extended frames with a matching
                identifier are received.
              
              The filter mask and filter identifier are used as bit masks. Their usage
              depends on the mode:
              
              * Accept-All: Mask and identifier are ignored.
              * Match-Standard-Only: Bit 0 to 10 (11 bits) of filter mask and filter
                identifier are used to match the 11-bit identifier of standard frames.
              * Match-Extended-Only: Bit 0 to 28 (29 bits) of filter mask and filter
                identifier are used to match the 29-bit identifier of extended frames.
              * Match-Standard-And-Extended: Bit 18 to 28 (11 bits) of filter mask and filter
                identifier are used to match the 11-bit identifier of standard frames, bit 0
                to 17 (18 bits) are ignored in this case. Bit 0 to 28 (29 bits) of filter
                mask and filter identifier are used to match the 29-bit identifier of extended
                frames.
              
              The filter mask and filter identifier are applied in this way: The filter mask
              is used to select the frame identifier bits that should be compared to the
              corresponding filter identifier bits. All unselected bits are automatically
              accepted. All selected bits have to match the filter identifier to be accepted.
              If all bits for the selected mode are accepted then the frame is accepted and
              is added to the read buffer.
              
              <code>
               "Filter Mask Bit", "Filter Identifier Bit", "Frame Identifier Bit", "Result"
              
               0, X, X, Accept
               1, 0, 0, Accept
               1, 0, 1, Reject
               1, 1, 0, Reject
               1, 1, 1, Accept
              </code>
              
              For example, to receive standard frames with identifier 0x123 only, the mode
              can be set to Match-Standard-Only with 0x7FF as mask and 0x123 as identifier.
              The mask of 0x7FF selects all 11 identifier bits for matching so that the
              identifier has to be exactly 0x123 to be accepted.
              
              To accept identifier 0x123 and identifier 0x456 at the same time, just set
              filter 2 to 0x456 and keep mask and filter 1 unchanged.
              
              There can be up to 32 different read filters configured at the same time,
              because there can be up to 32 read buffer (see <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />).
              
              The default mode is accept-all for all read buffers.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetReadFilterConfiguration(System.Byte,System.Byte@,System.Int64@,System.Int64@)">
             <summary>
              Returns the read filter configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetErrorLogLowLevel(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Byte@,System.Boolean[]@,System.Int64@)">
             <summary>
              Returns information about different kinds of errors.
              
              The write and read error levels indicate the current level of stuffing, form,
              acknowledgement, bit and checksum errors during CAN bus write and read
              operations. For each of this error kinds there is also an individual counter.
              
              When the write error level extends 255 then the CAN transceiver gets disabled
              and no frames can be transmitted or received anymore. The CAN transceiver will
              automatically be activated again after the CAN bus is idle for a while.
              
              The write buffer timeout, read buffer and backlog overflow counts represents the
              number of these errors:
              
              * A write buffer timeout occurs if a frame could not be transmitted before the
                configured write buffer timeout expired (see <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />).
              * A read buffer overflow occurs if a read buffer of the CAN transceiver
                still contains the last received frame when the next frame arrives. In this
                case the last received frame is lost. This happens if the CAN transceiver
                receives more frames than the Bricklet can handle. Using the read filter
                (see <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />) can help to reduce the amount of
                received frames. This count is not exact, but a lower bound, because the
                Bricklet might not able detect all overflows if they occur in rapid succession.
              * A read backlog overflow occurs if the read backlog of the Bricklet is already
                full when the next frame should be read from a read buffer of the CAN
                transceiver. In this case the frame in the read buffer is lost. This
                happens if the CAN transceiver receives more frames to be added to the read
                backlog than are removed from the read backlog using the <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" />
                function. Using the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" /> callback ensures that the read backlog
                can not overflow.
              
              The read buffer overflow counter counts the overflows of all configured read
              buffers. Which read buffer exactly suffered from an overflow can be figured
              out from the read buffer overflow occurrence list
              (``read_buffer_overflow_error_occurred``). Reading the error log clears the
              occurence list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetCommunicationLEDConfig(System.Byte)">
             <summary>
              Sets the communication LED configuration. By default the LED shows
              CAN-Bus traffic, it flickers once for every 40 transmitted or received frames.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetCommunicationLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetCommunicationLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetErrorLEDConfig(System.Byte)">
             <summary>
              Sets the error LED configuration.
              
              By default (show-transceiver-state) the error LED turns on if the CAN
              transceiver is passive or disabled state (see <see cref="M:Tinkerforge.BrickletCANV2.GetErrorLog(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Boolean[]@,System.Int64@)" />). If
              the CAN transceiver is in active state the LED turns off.
              
              If the LED is configured as show-error then the error LED turns on if any error
              occurs. If you call this function with the show-error option again, the LED will
              turn off until the next error occurs.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetErrorLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetErrorLEDConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetFrameReadableCallbackConfiguration(System.Boolean)">
             <summary>
              Enables and disables the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadableCallback" /> callback.
              
              By default the callback is disabled. Enabling this callback will disable the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" /> callback.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetFrameReadableCallbackConfiguration">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadableCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetErrorOccurredCallbackConfiguration(System.Boolean)">
             <summary>
              Enables and disables the <see cref="E:Tinkerforge.BrickletCANV2.ErrorOccurredCallback" /> callback.
              
              By default the callback is disabled.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetErrorOccurredCallbackConfiguration">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletCANV2.ErrorOccurredCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletCANV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletCANV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletCANV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])">
             <summary>
              Writes a data or remote frame to the write queue to be transmitted over the
              CAN transceiver.
              
              The Bricklet supports the standard 11-bit (CAN 2.0A) and the additional extended
              29-bit (CAN 2.0B) identifiers. For standard frames the Bricklet uses bit 0 to 10
              from the ``identifier`` parameter as standard 11-bit identifier. For extended
              frames the Bricklet uses bit 0 to 28 from the ``identifier`` parameter as
              extended 29-bit identifier.
              
              The ``data`` parameter can be up to 15 bytes long. For data frames up to 8 bytes
              will be used as the actual data. The length (DLC) field in the data or remote
              frame will be set to the actual length of the ``data`` parameter. This allows
              to transmit data and remote frames with excess length. For remote frames only
              the length of the ``data`` parameter is used. The actual ``data`` bytes are
              ignored.
              
              Returns *true* if the frame was successfully added to the write queue. Returns
              *false* if the frame could not be added because write queue is already full or
              because the write buffer or the write backlog are configured with a size of
              zero (see <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />).
              
              The write queue can overflow if frames are written to it at a higher rate
              than the Bricklet can transmitted them over the CAN transceiver. This may
              happen if the CAN transceiver is configured as read-only or is using a low baud
              rate (see <see cref="M:Tinkerforge.BrickletCANV2.SetTransceiverConfiguration(System.Int64,System.Int32,System.Byte)" />). It can also happen if the CAN
              bus is congested and the frame cannot be transmitted because it constantly loses
              arbitration or because the CAN transceiver is currently disabled due to a high
              write error level (see <see cref="M:Tinkerforge.BrickletCANV2.GetErrorLog(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Boolean[]@,System.Int64@)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)">
             <summary>
              Tries to read the next data or remote frame from the read queue and returns it.
              If a frame was successfully read, then the ``success`` return value is set to
              *true* and the other return values contain the frame. If the read queue is
              empty and no frame could be read, then the ``success`` return value is set to
              *false* and the other return values contain invalid data.
              
              The ``identifier`` return value follows the identifier format described for
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" />.
              
              The ``data`` return value can be up to 15 bytes long. For data frames up to the
              first 8 bytes are the actual received data. All bytes after the 8th byte are
              always zero and only there to indicate the length of a data or remote frame
              with excess length. For remote frames the length of the ``data`` return value
              represents the requested length. The actual ``data`` bytes are always zero.
              
              A configurable read filter can be used to define which frames should be
              received by the CAN transceiver and put into the read queue (see
              <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              Instead of polling with this function, you can also use callbacks. See the
              <see cref="M:Tinkerforge.BrickletCANV2.SetFrameReadCallbackConfiguration(System.Boolean)" /> function and the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" />
              callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)">
             <summary>
              Sets the write and read queue configuration.
              
              The CAN transceiver has 32 buffers in total in hardware for transmitting and
              receiving frames. Additionally, the Bricklet has a backlog for 768 frames in
              total in software. The buffers and the backlog can be freely assigned to the
              write and read queues.
              
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" /> writes a frame into the write backlog. The Bricklet moves
              the frame from the backlog into a free write buffer. The CAN transceiver then
              transmits the frame from the write buffer to the CAN bus. If there are no
              write buffers (``write_buffer_size`` is zero) or there is no write backlog
              (``write_backlog_size`` is zero) then no frames can be transmitted and
              <see cref="M:Tinkerforge.BrickletCANV2.WriteFrame(System.Byte,System.Int64,System.Byte[])" /> returns always *false*.
              
              The CAN transceiver receives a frame from the CAN bus and stores it into a
              free read buffer. The Bricklet moves the frame from the read buffer into the
              read backlog. <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" /> reads the frame from the read backlog and
              returns it. If there are no read buffers (``read_buffer_sizes`` is empty) or
              there is no read backlog (``read_backlog_size`` is zero) then no frames can be
              received and <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" /> returns always *false*.
              
              There can be multiple read buffers, because the CAN transceiver cannot receive
              data and remote frames into the same read buffer. A positive read buffer size
              represents a data frame read buffer and a negative read buffer size represents
              a remote frame read buffer. A read buffer size of zero is not allowed. By
              default the first read buffer is configured for data frames and the second read
              buffer is configured for remote frame. There can be up to 32 different read
              buffers, assuming that no write buffer is used. Each read buffer has its own
              filter configuration (see <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />).
              
              A valid queue configuration fulfills these conditions::
              
               write_buffer_size + abs(read_buffer_size_0) + abs(read_buffer_size_1) + ... + abs(read_buffer_size_31) &lt;= 32
               write_backlog_size + read_backlog_size &lt;= 768
              
              The write buffer timeout has three different modes that define how a failed
              frame transmission should be handled:
              
              * Single-Shot (&lt; 0): Only one transmission attempt will be made. If the
                transmission fails then the frame is discarded.
              * Infinite (= 0): Infinite transmission attempts will be made. The frame will
                never be discarded.
              * Milliseconds (&gt; 0): A limited number of transmission attempts will be made.
                If the frame could not be transmitted successfully after the configured
                number of milliseconds then the frame is discarded.
              
              The current content of the queues is lost when this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetQueueConfiguration(System.Byte@,System.Int32@,System.Int32@,System.Int16[]@,System.Int32@)">
             <summary>
              Returns the queue configuration as set by <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.GetErrorLog(System.Byte@,System.Byte@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Boolean[]@,System.Int64@)">
             <summary>
              Returns information about different kinds of errors.
              
              The write and read error levels indicate the current level of stuffing, form,
              acknowledgement, bit and checksum errors during CAN bus write and read
              operations. For each of this error kinds there is also an individual counter.
              
              When the write error level extends 255 then the CAN transceiver gets disabled
              and no frames can be transmitted or received anymore. The CAN transceiver will
              automatically be activated again after the CAN bus is idle for a while.
              
              The write buffer timeout, read buffer and backlog overflow counts represents the
              number of these errors:
              
              * A write buffer timeout occurs if a frame could not be transmitted before the
                configured write buffer timeout expired (see <see cref="M:Tinkerforge.BrickletCANV2.SetQueueConfiguration(System.Byte,System.Int32,System.Int32,System.Int16[],System.Int32)" />).
              * A read buffer overflow occurs if a read buffer of the CAN transceiver
                still contains the last received frame when the next frame arrives. In this
                case the last received frame is lost. This happens if the CAN transceiver
                receives more frames than the Bricklet can handle. Using the read filter
                (see <see cref="M:Tinkerforge.BrickletCANV2.SetReadFilterConfiguration(System.Byte,System.Byte,System.Int64,System.Int64)" />) can help to reduce the amount of
                received frames. This count is not exact, but a lower bound, because the
                Bricklet might not able detect all overflows if they occur in rapid succession.
              * A read backlog overflow occurs if the read backlog of the Bricklet is already
                full when the next frame should be read from a read buffer of the CAN
                transceiver. In this case the frame in the read buffer is lost. This
                happens if the CAN transceiver receives more frames to be added to the read
                backlog than are removed from the read backlog using the <see cref="M:Tinkerforge.BrickletCANV2.ReadFrame(System.Boolean@,System.Byte@,System.Int64@,System.Byte[]@)" />
                function. Using the <see cref="E:Tinkerforge.BrickletCANV2.FrameReadCallback" /> callback ensures that the read backlog
                can not overflow.
              
              The read buffer overflow counter counts the overflows of all configured read
              buffers. Which read buffer exactly suffered from an overflow can be figured
              out from the read buffer overflow occurrence list
              (``read_buffer_overflow_error_occurred``). Reading the error log clears the
              occurence list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.OnFrameReadLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.OnFrameReadableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCANV2.OnErrorOccurredCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2">
             <summary>
              Measures CO2 concentration in ppm
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_GET_CO2_CONCENTRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_SET_CO2_CONCENTRATION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_GET_CO2_CONCENTRATION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_SET_CO2_CONCENTRATION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_GET_CO2_CONCENTRATION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2.CO2ConcentrationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackPeriod(System.Int64)" />. The parameter is the CO2
              concentration of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationCallback" /> callback is only triggered if the CO2 concentration
              has changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2.CO2ConcentrationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2.CO2Concentration">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2.CO2ConcentrationReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the CO2 concentration.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletCO2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2.CO2ConcentrationReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2.CO2ConcentrationReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.GetCO2Concentration">
             <summary>
              Returns the measured CO2 concentration.
              
              If you want to get the CO2 concentration periodically, it is recommended to use
              the <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationCallback" /> callback is only triggered if the CO2 concentration
              has changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.GetCO2ConcentrationCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the CO2 concentration is *outside* the min and max values"
               "'i'",    "Callback is triggered when the CO2 concentration is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the CO2 concentration is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the CO2 concentration is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.GetCO2ConcentrationCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletCO2.CO2ConcentrationReachedCallback" />,
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletCO2.SetCO2ConcentrationCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletCO2.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.OnCO2ConcentrationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2.OnCO2ConcentrationReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2V2">
             <summary>
              Measures CO2 concentration, temperature and humidity
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_ALL_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_AIR_PRESSURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_TEMPERATURE_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_TEMPERATURE_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_ALL_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_ALL_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_CO2_CONCENTRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_CO2_CONCENTRATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_CO2_CONCENTRATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_HUMIDITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCO2V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2V2.AllValuesCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletCO2V2.GetAllValues(System.Int32@,System.Int16@,System.Int32@)" />.
              
              <note>
               The sensor is able to messure up to 120 °C. However it is only specified up to 70 °C.
               Exposing the Bricklet to higher temperatures might result in permanent damage.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2V2.AllValuesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2V2.CO2ConcentrationCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetCO2ConcentrationCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletCO2V2.GetCO2Concentration" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2V2.CO2ConcentrationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2V2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletCO2V2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2V2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCO2V2.HumidityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletCO2V2.GetHumidity" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCO2V2.HumidityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetAllValues(System.Int32@,System.Int16@,System.Int32@)">
             <summary>
              Returns all values measured by the CO2 Bricklet 2.0.
              
              If you want to get the values periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCO2V2.AllValuesCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCO2V2.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              <note>
               The sensor is able to messure up to 120 °C. However it is only specified up to 70 °C.
               Exposing the Bricklet to higher temperatures might result in permanent damage.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetAirPressure(System.Int32)">
             <summary>
              The CO2 concentration depends (among other things) on the ambient air pressure.
              
              To increase the accuracy of the CO2 Bricklet 2.0 you can set the current air pressure.
              You use the :ref:`Barometer Bricklet 2.0 &lt;barometer_v2_bricklet&gt;` or the
              :ref:`Air Quality Bricklet &lt;air_quality_bricklet&gt;` to get the current air pressure.
              
              By default air pressure compensation is disabled. Once you set a value it
              will be used for compensation. You can turn the compensation off again by
              setting the value to 0.
              
              It is sufficient to update the value every few minutes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetAirPressure">
             <summary>
              Returns the ambient air pressure as set by <see cref="M:Tinkerforge.BrickletCO2V2.SetAirPressure(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetTemperatureOffset(System.Int32)">
             <summary>
              Sets a temperature offset. A offset of 10 will decrease
              the measured temperature by 0.1 °C.
              
              If you install this Bricklet into an enclosure and you want to measure the ambient
              temperature, you may have to decrease the measured temperature by some value to
              compensate for the error because of the heating inside of the enclosure.
              
              We recommend that you leave the parts in the enclosure running for at least
              24 hours such that a temperature equilibrium can be reached. After that you can measure
              the temperature directly outside of enclosure and set the difference as offset.
              
              This temperature offset is used to calculate the relative humidity and
              CO2 concentration. In case the Bricklet is installed in an enclosure, we
              recommend to measure and set the temperature offset to improve the accuracy of
              the measurements.
              
              It is sufficient to set the temperature offset once. The offset is saved in
              non-volatile memory and is applied again after a power loss.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetTemperatureOffset">
             <summary>
              Returns the temperature offset as set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetTemperatureOffset(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCO2V2.AllValuesCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetAllValuesCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetAllValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetCO2Concentration">
             <summary>
              Returns CO2 concentration.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCO2V2.CO2ConcentrationCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCO2V2.SetCO2ConcentrationCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetCO2ConcentrationCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCO2V2.CO2ConcentrationCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletCO2V2.CO2ConcentrationCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetCO2ConcentrationCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletCO2V2.SetCO2ConcentrationCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetTemperature">
             <summary>
              Returns temperature.
              
              <note>
               The sensor is able to messure up to 120 °C. However it is only specified up to 70 °C.
               Exposing the Bricklet to higher temperatures might result in permanent damage.
              </note>
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCO2V2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCO2V2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCO2V2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletCO2V2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletCO2V2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetHumidity">
             <summary>
              Returns relative humidity.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCO2V2.HumidityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCO2V2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCO2V2.HumidityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletCO2V2.HumidityCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetHumidityCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletCO2V2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletCO2V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletCO2V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletCO2V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCO2V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.OnAllValuesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.OnCO2ConcentrationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCO2V2.OnHumidityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColor">
             <summary>
              Measures color (RGB value), illuminance and color temperature
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_COLOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_COLOR_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_COLOR_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_COLOR_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_COLOR_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_LIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_LIGHT_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_IS_LIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_ILLUMINANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_COLOR_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_ILLUMINANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_SET_COLOR_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_COLOR_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.LIGHT_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.LIGHT_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.GAIN_1X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.GAIN_4X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.GAIN_16X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.GAIN_60X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.INTEGRATION_TIME_2MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.INTEGRATION_TIME_24MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.INTEGRATION_TIME_101MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.INTEGRATION_TIME_154MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColor.INTEGRATION_TIME_700MS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.ColorCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackPeriod(System.Int64)" />. The parameter is the color
              of the sensor as RGBC.
              
              The <see cref="E:Tinkerforge.BrickletColor.ColorCallback" /> callback is only triggered if the color has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColor.ColorEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.Color">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.ColorReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> is reached.
              The parameter is the color
              of the sensor as RGBC.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletColor.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColor.ColorReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.ColorReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.IlluminanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletColor.SetIlluminanceCallbackPeriod(System.Int64)" />. The parameter is the illuminance.
              See <see cref="M:Tinkerforge.BrickletColor.GetIlluminance" /> for how to interpret this value.
              
              The <see cref="E:Tinkerforge.BrickletColor.IlluminanceCallback" /> callback is only triggered if the illuminance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColor.IlluminanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.Illuminance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.ColorTemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletColor.SetColorTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              color temperature.
              
              The <see cref="E:Tinkerforge.BrickletColor.ColorTemperatureCallback" /> callback is only triggered if the color temperature
              has changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColor.ColorTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColor.ColorTemperature">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetColor(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the measured color of the sensor.
              
              The red (r), green (g), blue (b) and clear (c) colors are measured
              with four different photodiodes that are responsive at different
              wavelengths:
              
              .. image:: /Images/Bricklets/bricklet_color_wavelength_chart_600.jpg
                 :scale: 100 %
                 :alt: Chart Responsivity / Wavelength
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_color_wavelength_chart_600.jpg
              
              If you want to get the color periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletColor.ColorCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetColorCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletColor.ColorCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletColor.ColorCallback" /> callback is only triggered if the color has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetColorCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetColorCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletColor.ColorReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetColorCallbackThreshold(System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletColor.ColorReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletColor.SetColorCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletColor.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.LightOn">
             <summary>
              Turns the LED on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.LightOff">
             <summary>
              Turns the LED off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.IsLightOn">
             <summary>
              Returns the state of the LED. Possible values are:
              
              * 0: On
              * 1: Off
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetConfig(System.Byte,System.Byte)">
             <summary>
              Sets the configuration of the sensor. Gain and integration time
              can be configured in this way.
              
              For configuring the gain:
              
              * 0: 1x Gain
              * 1: 4x Gain
              * 2: 16x Gain
              * 3: 60x Gain
              
              For configuring the integration time:
              
              * 0: 2.4ms
              * 1: 24ms
              * 2: 101ms
              * 3: 154ms
              * 4: 700ms
              
              Increasing the gain enables the sensor to detect a
              color from a higher distance.
              
              The integration time provides a trade-off between conversion time
              and accuracy. With a longer integration time the values read will
              be more accurate but it will take longer time to get the conversion
              results.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetConfig(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletColor.SetConfig(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetIlluminance">
             <summary>
              Returns the illuminance affected by the gain and integration time as
              set by <see cref="M:Tinkerforge.BrickletColor.SetConfig(System.Byte,System.Byte)" />. To get the illuminance in Lux apply this formula::
              
               lux = illuminance * 700 / gain / integration_time
              
              To get a correct illuminance measurement make sure that the color
              values themselves are not saturated. The color value (R, G or B)
              is saturated if it is equal to the maximum value of 65535.
              In that case you have to reduce the gain, see <see cref="M:Tinkerforge.BrickletColor.SetConfig(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetColorTemperature">
             <summary>
              Returns the color temperature.
              
              To get a correct color temperature measurement make sure that the color
              values themselves are not saturated. The color value (R, G or B)
              is saturated if it is equal to the maximum value of 65535.
              In that case you have to reduce the gain, see <see cref="M:Tinkerforge.BrickletColor.SetConfig(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetIlluminanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletColor.IlluminanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletColor.IlluminanceCallback" /> callback is only triggered if the illuminance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetIlluminanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletColor.SetIlluminanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.SetColorTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletColor.ColorTemperatureCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletColor.ColorTemperatureCallback" /> callback is only triggered if the color temperature
              has changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetColorTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletColor.SetColorTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.OnColorCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.OnColorReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.OnIlluminanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColor.OnColorTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColorV2">
             <summary>
              Measures color (RGB value), illuminance and color temperature
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_COLOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_COLOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_COLOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_ILLUMINANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_ILLUMINANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_ILLUMINANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_COLOR_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_COLOR_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_COLOR_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_LIGHT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_LIGHT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.GAIN_1X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.GAIN_4X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.GAIN_16X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.GAIN_60X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.INTEGRATION_TIME_2MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.INTEGRATION_TIME_24MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.INTEGRATION_TIME_101MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.INTEGRATION_TIME_154MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.INTEGRATION_TIME_700MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletColorV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColorV2.ColorCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletColorV2.SetColorCallbackConfiguration(System.Int64,System.Boolean)" />. The parameter is the color
              of the sensor as RGBC.
              
              The <see cref="E:Tinkerforge.BrickletColorV2.ColorCallback" /> callback is only triggered if the color has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColorV2.ColorEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColorV2.IlluminanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletColorV2.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletColorV2.GetIlluminance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColorV2.IlluminanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletColorV2.ColorTemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletColorV2.SetColorTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletColorV2.GetColorTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletColorV2.ColorTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetColor(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the measured color of the sensor.
              
              The red (r), green (g), blue (b) and clear (c) colors are measured
              with four different photodiodes that are responsive at different
              wavelengths:
              
              .. image:: /Images/Bricklets/bricklet_color_wavelength_chart_600.jpg
                 :scale: 100 %
                 :alt: Chart Responsivity / Wavelength
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_color_wavelength_chart_600.jpg
              
              If you want to get the color periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletColorV2.ColorCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletColorV2.SetColorCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetColorCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletColorV2.ColorCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetColorCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletColorV2.SetColorCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetIlluminance">
             <summary>
              Returns the illuminance affected by the gain and integration time as
              set by <see cref="M:Tinkerforge.BrickletColorV2.SetConfiguration(System.Byte,System.Byte)" />. To get the illuminance in Lux apply this formula::
              
               lux = illuminance * 700 / gain / integration_time
              
              To get a correct illuminance measurement make sure that the color
              values themselves are not saturated. The color value (R, G or B)
              is saturated if it is equal to the maximum value of 65535.
              In that case you have to reduce the gain, see <see cref="M:Tinkerforge.BrickletColorV2.SetConfiguration(System.Byte,System.Byte)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletColorV2.IlluminanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletColorV2.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletColorV2.IlluminanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletColorV2.IlluminanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetIlluminanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletColorV2.SetIlluminanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetColorTemperature">
             <summary>
              Returns the color temperature.
              
              To get a correct color temperature measurement make sure that the color
              values themselves are not saturated. The color value (R, G or B)
              is saturated if it is equal to the maximum value of 65535.
              In that case you have to reduce the gain, see <see cref="M:Tinkerforge.BrickletColorV2.SetConfiguration(System.Byte,System.Byte)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletColorV2.ColorTemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletColorV2.SetColorTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetColorTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletColorV2.ColorTemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletColorV2.ColorTemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetColorTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletColorV2.SetColorTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetLight(System.Boolean)">
             <summary>
              Turns the white LED on the Bricklet on/off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetLight">
             <summary>
              Returns the value as set by <see cref="M:Tinkerforge.BrickletColorV2.SetLight(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Sets the configuration of the sensor. Gain and integration time
              can be configured this way.
              
              For configuring the gain:
              
              * 0: 1x Gain
              * 1: 4x Gain
              * 2: 16x Gain
              * 3: 60x Gain
              
              For configuring the integration time:
              
              * 0: 2.4ms
              * 1: 24ms
              * 2: 101ms
              * 3: 154ms
              * 4: 700ms
              
              Increasing the gain enables the sensor to detect a
              color from a higher distance.
              
              The integration time provides a trade-off between conversion time
              and accuracy. With a longer integration time the values read will
              be more accurate but it will take longer to get the conversion
              results.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletColorV2.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletColorV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletColorV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletColorV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletColorV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.OnColorCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.OnIlluminanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletColorV2.OnColorTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCompass">
             <summary>
              3-axis compass with 10 nanotesla and 0.1° resolution
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_HEADING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_HEADING_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_HEADING_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_MAGNETIC_FLUX_DENSITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_MAGNETIC_FLUX_DENSITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_MAGNETIC_FLUX_DENSITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DATA_RATE_100HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DATA_RATE_200HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DATA_RATE_400HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.DATA_RATE_600HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCompass.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCompass.HeadingCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCompass.SetHeadingCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletCompass.GetHeading" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCompass.HeadingEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCompass.MagneticFluxDensityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletCompass.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletCompass.GetMagneticFluxDensity(System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCompass.MagneticFluxDensityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetHeading">
             <summary>
              Returns the heading (north = 0 degree, east = 90 degree).
              
              Alternatively you can use <see cref="M:Tinkerforge.BrickletCompass.GetMagneticFluxDensity(System.Int32@,System.Int32@,System.Int32@)" /> and calculate the
              heading with ``heading = atan2(y, x) * 180 / PI``.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCompass.HeadingCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCompass.SetHeadingCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetHeadingCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCompass.HeadingCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletCompass.HeadingCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetHeadingCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletCompass.SetHeadingCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetMagneticFluxDensity(System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the `magnetic flux density (magnetic induction) &lt;https://en.wikipedia.org/wiki/Magnetic_flux&gt;`__
              for all three axis.
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCompass.MagneticFluxDensityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletCompass.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletCompass.MagneticFluxDensityCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetMagneticFluxDensityCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletCompass.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetConfiguration(System.Byte,System.Boolean)">
             <summary>
              Configures the data rate and background calibration.
              
              * Data Rate: Sets the data rate that is used by the magnetometer.
                The lower the data rate, the lower is the noise on the data.
              * Background Calibration: Set to *true* to enable the background
                calibration and *false* to turn it off. If the background calibration
                is enabled the sensing polarity is flipped once per second to automatically
                calculate and remove offset that is caused by temperature changes.
                This polarity flipping takes about 20ms. This means that once a second
                you will not get new data for a period of 20ms. We highly recommend that
                you keep the background calibration enabled and only disable it if the 20ms
                off-time is a problem in your application.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCompass.SetConfiguration(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetCalibration(System.Int16[],System.Int16[])">
             <summary>
              Sets offset and gain for each of the three axes.
              
              The Bricklet is factory calibrated. If you want to re-calibrate the
              Bricklet we recommend that you do the calibration through Brick Viewer.
              
              The calibration is saved in non-volatile memory and only has to be
              done once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetCalibration(System.Int16[]@,System.Int16[]@)">
             <summary>
              Returns the calibration parameters as set by <see cref="M:Tinkerforge.BrickletCompass.SetCalibration(System.Int16[],System.Int16[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletCompass.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletCompass.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletCompass.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletCompass.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.OnHeadingCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCompass.OnMagneticFluxDensityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12">
             <summary>
              Measures AC/DC current between -12.5A and +12.5A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_IS_OVER_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_SET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_SET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent12.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.CurrentCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackPeriod(System.Int64)" />. The parameter is the current of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletCurrent12.CurrentCallback" /> callback is only triggered if the current has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.Current">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog value
              of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueCallback" /> callback is only triggered if the current has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.CurrentReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the current of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12.CurrentReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.CurrentReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.OverCurrentCallback">
             <summary>
              This callback is triggered when an over current is measured
              (see <see cref="M:Tinkerforge.BrickletCurrent12.IsOverCurrent" />).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent12.OverCurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent12.OverCurrent">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetCurrent">
             <summary>
              Returns the current of the sensor.
              
              If you want to get the current periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCurrent12.CurrentCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.Calibrate">
             <summary>
              Calibrates the 0 value of the sensor. You have to call this function
              when there is no current present.
              
              The zero point of the current sensor
              is depending on the exact properties of the analog-to-digital converter,
              the length of the Bricklet cable and the temperature. Thus, if you change
              the Brick or the environment in which the Bricklet is used, you might
              have to recalibrate.
              
              The resulting calibration will be saved on the EEPROM of the Current
              Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.IsOverCurrent">
             <summary>
              Returns *true* if more than 12.5A were measured.
              
              <note>
               To reset this value you have to power cycle the Bricklet.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletCurrent12.GetCurrent" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletCurrent12.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletCurrent12.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletCurrent12.CurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletCurrent12.CurrentCallback" /> callback is only triggered if the current has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetCurrentCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletCurrent12.CurrentReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the current is *outside* the min and max values"
               "'i'",    "Callback is triggered when the current is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the current is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the current is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetCurrentCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletCurrent12.CurrentReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletCurrent12.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletCurrent12.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" />,
              * <see cref="M:Tinkerforge.BrickletCurrent12.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletCurrent12.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.OnCurrentReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent12.OnOverCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25">
             <summary>
              Measures AC/DC current between -25A and +25A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_IS_OVER_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_SET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_SET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletCurrent25.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.CurrentCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackPeriod(System.Int64)" />. The parameter is the current of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletCurrent25.CurrentCallback" /> callback is only triggered if the current has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.Current">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog value of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueCallback" /> callback is only triggered if the current has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.CurrentReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the current of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25.CurrentReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.CurrentReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.OverCurrentCallback">
             <summary>
              This callback is triggered when an over current is measured
              (see <see cref="M:Tinkerforge.BrickletCurrent25.IsOverCurrent" />).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletCurrent25.OverCurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletCurrent25.OverCurrent">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetCurrent">
             <summary>
              Returns the current of the sensor.
              
              If you want to get the current periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCurrent25.CurrentCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.Calibrate">
             <summary>
              Calibrates the 0 value of the sensor. You have to call this function
              when there is no current present.
              
              The zero point of the current sensor
              is depending on the exact properties of the analog-to-digital converter,
              the length of the Bricklet cable and the temperature. Thus, if you change
              the Brick or the environment in which the Bricklet is used, you might
              have to recalibrate.
              
              The resulting calibration will be saved on the EEPROM of the Current
              Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.IsOverCurrent">
             <summary>
              Returns *true* if more than 25A were measured.
              
              <note>
               To reset this value you have to power cycle the Bricklet.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletCurrent25.GetCurrent" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletCurrent25.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletCurrent25.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletCurrent25.CurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletCurrent25.CurrentCallback" /> callback is only triggered if the current has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetCurrentCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletCurrent25.CurrentReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the current is *outside* the min and max values"
               "'i'",    "Callback is triggered when the current is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the current is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the current is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetCurrentCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletCurrent25.CurrentReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletCurrent25.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletCurrent25.SetCurrentCallbackThreshold(System.Char,System.Int16,System.Int16)" />,
              * <see cref="M:Tinkerforge.BrickletCurrent25.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletCurrent25.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.OnCurrentReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletCurrent25.OnOverCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDCV2">
             <summary>
              Drives one brushed DC motor with up to 28V and 5A (peak)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_POWER_STATISTICS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_EMERGENCY_SHUTDOWN_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_EMERGENCY_SHUTDOWN_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_VELOCITY_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_VELOCITY_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_CURRENT_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_CURRENT_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.DRIVE_MODE_DRIVE_BRAKE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.DRIVE_MODE_DRIVE_COAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDCV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDCV2.EmergencyShutdownCallback">
             <summary>
              This callback is triggered if either the current consumption
              is too high (above 5A) or the temperature of the driver chip is too high
              (above 175°C). These two possibilities are essentially the same, since the
              temperature will reach this threshold immediately if the motor consumes too
              much current. In case of a voltage below 3.3V (external or stack) this
              callback is triggered as well.
              
              If this callback is triggered, the driver chip gets disabled at the same time.
              That means, <see cref="M:Tinkerforge.BrickletDCV2.SetEnabled(System.Boolean)" /> has to be called to drive the motor again.
              
              <note>
               This callback only works in Drive/Brake mode (see <see cref="M:Tinkerforge.BrickletDCV2.SetDriveMode(System.Byte)" />). In
               Drive/Coast mode it is unfortunately impossible to reliably read the
               overcurrent/overtemperature signal from the driver chip.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDCV2.EmergencyShutdownEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDCV2.VelocityReachedCallback">
             <summary>
              This callback is triggered whenever a set velocity is reached. For example:
              If a velocity of 0 is present, acceleration is set to 5000 and velocity
              to 10000, the <see cref="E:Tinkerforge.BrickletDCV2.VelocityReachedCallback" /> callback will be triggered after about
              2 seconds, when the set velocity is actually reached.
              
              <note>
               Since we can't get any feedback from the DC motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickletDCV2.SetMotion(System.Int32,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDCV2.VelocityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDCV2.CurrentVelocityCallback">
             <summary>
              This callback is triggered with the period that is set by
              <see cref="M:Tinkerforge.BrickletDCV2.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)" />. The parameter is the *current*
              velocity used by the motor.
              
              The <see cref="E:Tinkerforge.BrickletDCV2.CurrentVelocityCallback" /> callback is only triggered after the set period
              if there is a change in the velocity.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDCV2.CurrentVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetEnabled(System.Boolean)">
             <summary>
              Enables/Disables the driver chip. The driver parameters can be configured
              (velocity, acceleration, etc) before it is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetEnabled">
             <summary>
              Returns *true* if the driver chip is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetVelocity(System.Int16)">
             <summary>
              Sets the velocity of the motor. Whereas -32767 is full speed backward,
              0 is stop and 32767 is full speed forward. Depending on the
              acceleration (see <see cref="M:Tinkerforge.BrickletDCV2.SetMotion(System.Int32,System.Int32)" />), the motor is not immediately
              brought to the velocity but smoothly accelerated.
              
              The velocity describes the duty cycle of the PWM with which the motor is
              controlled, e.g. a velocity of 3277 sets a PWM with a 10% duty cycle.
              You can not only control the duty cycle of the PWM but also the frequency,
              see <see cref="M:Tinkerforge.BrickletDCV2.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickletDCV2.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the motor. This value is different
              from <see cref="M:Tinkerforge.BrickletDCV2.GetVelocity" /> whenever the motor is currently accelerating
              to a goal set by <see cref="M:Tinkerforge.BrickletDCV2.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetMotion(System.Int32,System.Int32)">
             <summary>
              Sets the acceleration and deceleration of the motor. It is given in *velocity/s*.
              An acceleration of 10000 means, that every second the velocity is increased
              by 10000 (or about 30% duty cycle).
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 16000 (about 50% duty cycle) in 10 seconds, you should set
              an acceleration of 1600.
              
              If acceleration and deceleration is set to 0, there is no speed ramping, i.e. a
              new velocity is immediately given to the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetMotion(System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration/deceleration as set by <see cref="M:Tinkerforge.BrickletDCV2.SetMotion(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickletDCV2.SetVelocity(System.Int16)" /> with 0 if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetDriveMode(System.Byte)">
             <summary>
              Sets the drive mode. Possible modes are:
              
              * 0 = Drive/Brake
              * 1 = Drive/Coast
              
              These modes are different kinds of motor controls.
              
              In Drive/Brake mode, the motor is always either driving or braking. There
              is no freewheeling. Advantages are: A more linear correlation between
              PWM and velocity, more exact accelerations and the possibility to drive
              with slower velocities.
              
              In Drive/Coast mode, the motor is always either driving or freewheeling.
              Advantages are: Less current consumption and less demands on the motor and
              driver chip.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetDriveMode">
             <summary>
              Returns the drive mode, as set by <see cref="M:Tinkerforge.BrickletDCV2.SetDriveMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetPWMFrequency(System.Int32)">
             <summary>
              Sets the frequency of the PWM with which the motor is driven.
              Often a high frequency
              is less noisy and the motor runs smoother. However, with a low frequency
              there are less switches and therefore fewer switching losses. Also with
              most motors lower frequencies enable higher torque.
              
              If you have no idea what all this means, just ignore this function and use
              the default frequency, it will very likely work fine.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetPWMFrequency">
             <summary>
              Returns the PWM frequency as set by <see cref="M:Tinkerforge.BrickletDCV2.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetPowerStatistics(System.Int32@,System.Int32@)">
             <summary>
              Returns input voltage and current usage of the driver.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetErrorLEDConfig(System.Byte)">
             <summary>
              Configures the error LED to be either turned off, turned on, blink in
              heartbeat mode or show an error.
              
              If the LED is configured to show errors it has three different states:
              
              * Off: No error present.
              * 1s interval blinking: Input voltage too low (below 6V).
              * 250ms interval blinking: Overtemperature or overcurrent.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetErrorLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletDCV2.SetErrorLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetEmergencyShutdownCallbackConfiguration(System.Boolean)">
             <summary>
              Enable/Disable <see cref="E:Tinkerforge.BrickletDCV2.EmergencyShutdownCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetEmergencyShutdownCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletDCV2.SetEmergencyShutdownCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetVelocityReachedCallbackConfiguration(System.Boolean)">
             <summary>
              Enable/Disable <see cref="E:Tinkerforge.BrickletDCV2.VelocityReachedCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetVelocityReachedCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletDCV2.SetVelocityReachedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletDCV2.CurrentVelocityCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetCurrentVelocityCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletDCV2.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletDCV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletDCV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletDCV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDCV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.OnEmergencyShutdownCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.OnVelocityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDCV2.OnCurrentVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX">
             <summary>
              DMX master and slave
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_DMX_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_DMX_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_WRITE_FRAME_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_READ_FRAME_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_FRAME_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_FRAME_CALLBACK_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_FRAME_CALLBACK_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.DMX_MODE_MASTER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.DMX_MODE_SLAVE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.COMMUNICATION_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.COMMUNICATION_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDMX.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDMX.FrameStartedCallback">
             <summary>
              This callback is triggered as soon as a new frame write is started.
              You should send the data for the next frame directly after this callback
              was triggered.
              
              For an explanation of the general approach see <see cref="M:Tinkerforge.BrickletDMX.WriteFrame(System.Byte[])" />.
              
              This callback can be enabled via <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
              
              This callback can only be triggered in master mode.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX.FrameStartedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDMX.FrameAvailableCallback">
             <summary>
              This callback is triggered in slave mode when a new frame was received from the DMX master
              and it can be read out. You have to read the frame before the master has written
              the next frame, see <see cref="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)" /> for more details.
              
              The parameter is the frame number, it is increased by one with each received frame.
              
              This callback can be enabled via <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
              
              This callback can only be triggered in slave mode.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX.FrameAvailableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDMX.FrameLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletDMX.FrameCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX.FrameLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDMX.FrameErrorCountCallback">
             <summary>
              This callback is called if a new error occurs. It returns
              the current overrun and framing error count.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX.FrameErrorCountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDMX.FrameCallback">
             <summary>
              This callback is called as soon as a new frame is available
              (written by the DMX master).
              
              The size of the array is equivalent to the number of channels in
              the frame. Each byte represents one channel.
              
              This callback can be enabled via <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
              
              This callback can only be triggered in slave mode.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for frame.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDMX.FrameEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetDMXMode(System.Byte)">
             <summary>
              Sets the DMX mode to either master or slave.
              
              Calling this function sets frame number to 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetDMXMode">
             <summary>
              Returns the DMX mode, as set by <see cref="M:Tinkerforge.BrickletDMX.SetDMXMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.WriteFrameLowLevel(System.Int32,System.Int32,System.Byte[])">
             <summary>
              Writes a DMX frame. The maximum frame size is 512 byte. Each byte represents one channel.
              
              The next frame can be written after the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback was called. The frame
              is double buffered, so a new frame can be written as soon as the writing of the prior frame
              starts.
              
              The data will be transfered when the next frame duration ends, see <see cref="M:Tinkerforge.BrickletDMX.SetFrameDuration(System.Int32)" />.
              
              Generic approach:
              
              * Set the frame duration to a value that represents the number of frames per second you want to achieve.
              * Set channels for first frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback.
              * Set channels for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback.
              * and so on.
              
              This approach ensures that you can set new DMX data with a fixed frame rate.
              
              This function can only be called in master mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.ReadFrameLowLevel(System.Int32@,System.Int32@,System.Byte[]@,System.Int64@)">
             <summary>
              Returns the last frame that was written by the DMX master. The size of the array
              is equivalent to the number of channels in the frame. Each byte represents one channel.
              
              The next frame is available after the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback was called.
              
              Generic approach:
              
              * Call <see cref="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)" /> to get first frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback.
              * Call <see cref="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)" /> to get second frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback.
              * and so on.
              
              Instead of polling this function you can also use the <see cref="E:Tinkerforge.BrickletDMX.FrameCallback" /> callback.
              You can enable it with <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
              
              The frame number starts at 0 and it is increased by one with each received frame.
              
              This function can only be called in slave mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetFrameDuration(System.Int32)">
             <summary>
              Sets the duration of a frame.
              
              Example: If you want to achieve 20 frames per second, you should
              set the frame duration to 50ms (50ms * 20 = 1 second).
              
              If you always want to send a frame as fast as possible you can set
              this value to 0.
              
              This setting is only used in master mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetFrameDuration">
             <summary>
              Returns the frame duration as set by <see cref="M:Tinkerforge.BrickletDMX.SetFrameDuration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetFrameErrorCount(System.Int64@,System.Int64@)">
             <summary>
              Returns the current number of overrun and framing errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetCommunicationLEDConfig(System.Byte)">
             <summary>
              Sets the communication LED configuration. By default the LED shows
              communication traffic, it flickers once for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetCommunicationLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDMX.SetCommunicationLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetErrorLEDConfig(System.Byte)">
             <summary>
              Sets the error LED configuration.
              
              By default the error LED turns on if there is any error (see <see cref="E:Tinkerforge.BrickletDMX.FrameErrorCountCallback" />
              callback). If you call this function with the Show-Error option again, the LED
              will turn off until the next error occurs.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetErrorLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDMX.SetErrorLEDConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
              Enables/Disables the different callbacks. By default the
              <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback and <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback are enabled while
              the <see cref="E:Tinkerforge.BrickletDMX.FrameCallback" /> callback and <see cref="E:Tinkerforge.BrickletDMX.FrameErrorCountCallback" /> callback are disabled.
              
              If you want to use the <see cref="E:Tinkerforge.BrickletDMX.FrameCallback" /> callback you can enable it and disable
              the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback at the same time. It becomes redundant in
              this case.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetFrameCallbackConfig(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
              Returns the frame callback config as set by <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletDMX.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletDMX.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletDMX.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDMX.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.WriteFrame(System.Byte[])">
             <summary>
              Writes a DMX frame. The maximum frame size is 512 byte. Each byte represents one channel.
              
              The next frame can be written after the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback was called. The frame
              is double buffered, so a new frame can be written as soon as the writing of the prior frame
              starts.
              
              The data will be transfered when the next frame duration ends, see <see cref="M:Tinkerforge.BrickletDMX.SetFrameDuration(System.Int32)" />.
              
              Generic approach:
              
              * Set the frame duration to a value that represents the number of frames per second you want to achieve.
              * Set channels for first frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback.
              * Set channels for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameStartedCallback" /> callback.
              * and so on.
              
              This approach ensures that you can set new DMX data with a fixed frame rate.
              
              This function can only be called in master mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)">
             <summary>
              Returns the last frame that was written by the DMX master. The size of the array
              is equivalent to the number of channels in the frame. Each byte represents one channel.
              
              The next frame is available after the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback was called.
              
              Generic approach:
              
              * Call <see cref="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)" /> to get first frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback.
              * Call <see cref="M:Tinkerforge.BrickletDMX.ReadFrame(System.Byte[]@,System.Int64@)" /> to get second frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletDMX.FrameAvailableCallback" /> callback.
              * and so on.
              
              Instead of polling this function you can also use the <see cref="E:Tinkerforge.BrickletDMX.FrameCallback" /> callback.
              You can enable it with <see cref="M:Tinkerforge.BrickletDMX.SetFrameCallbackConfig(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.
              
              The frame number starts at 0 and it is increased by one with each received frame.
              
              This function can only be called in slave mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.OnFrameStartedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.OnFrameAvailableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.OnFrameLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDMX.OnFrameErrorCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIR">
             <summary>
              Measures distance up to 150cm with infrared light
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_DISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_SAMPLING_POINT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_SAMPLING_POINT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIR.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.DistanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackPeriod(System.Int64)" />. The parameter is the distance of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceCallback" /> callback is only triggered if the distance has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIR.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.Distance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog value of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueCallback" /> callback is only triggered if the analog value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIR.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.DistanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the distance of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIR.DistanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.DistanceReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIR.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIR.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetDistance">
             <summary>
              Returns the distance measured by the sensor. Possible
              distance ranges are 40 to 300, 100 to 800 and 200 to 1500, depending on the
              selected IR sensor.
              
              If you want to get the distance periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletDistanceIR.GetDistance" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletDistanceIR.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletDistanceIR.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetSamplingPoint(System.Byte,System.Int32)">
             <summary>
              Sets a sampling point value to a specific position of the lookup table.
              The lookup table comprises 128 equidistant analog values with
              corresponding distances.
              
              If you measure a distance of 50cm at the analog value 2048, you
              should call this function with (64, 5000). The utilized analog-to-digital
              converter has a resolution of 12 bit. With 128 sampling points on the
              whole range, this means that every sampling point has a size of 32
              analog values. Thus the analog value 2048 has the corresponding sampling
              point 64 = 2048/32.
              
              Sampling points are saved on the EEPROM of the Distance IR Bricklet and
              loaded again on startup.
              
              <note>
               An easy way to calibrate the sampling points of the Distance IR Bricklet is
               implemented in the Brick Viewer. If you want to calibrate your Bricklet it is
               highly recommended to use this implementation.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetSamplingPoint(System.Byte)">
             <summary>
              Returns the distance to a sampling point position as set by
              <see cref="M:Tinkerforge.BrickletDistanceIR.SetSamplingPoint(System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceCallback" /> callback is only triggered if the distance has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetDistanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the distance is *outside* the min and max values"
               "'i'",    "Callback is triggered when the distance is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the distance is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the distance is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetDistanceCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletDistanceIR.DistanceReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletDistanceIR.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletDistanceIR.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletDistanceIR.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletDistanceIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.OnDistanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIR.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIRV2">
             <summary>
              Measures distance up to 150cm with infrared light
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_DISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_ANALOG_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_ANALOG_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_SENSOR_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_SENSOR_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DISTANCE_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DISTANCE_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DISTANCE_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.DISTANCE_LED_CONFIG_SHOW_DISTANCE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.SENSOR_TYPE_2Y0A41">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.SENSOR_TYPE_2Y0A21">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.SENSOR_TYPE_2Y0A02">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceIRV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIRV2.DistanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletDistanceIRV2.GetDistance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIRV2.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceIRV2.AnalogValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetAnalogValueCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletDistanceIRV2.GetAnalogValue" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceIRV2.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetDistance">
             <summary>
              Returns the distance measured by the sensor. Possible
              distance ranges are 40 to 300, 100 to 800 and 200 to 1500, depending on the
              selected IR sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletDistanceIRV2.DistanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletDistanceIRV2.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletDistanceIRV2.DistanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetDistanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetAnalogValue">
             <summary>
              Returns the analog value as read by a analog-to-digital converter.
              
              This is unfiltered raw data. We made sure that the integration time
              of the ADC is shorter then the measurement interval of the sensor
              (10ms vs 16.5ms). So there is no information lost.
              
              If you want to do your own calibration or create your own lookup table
              you can use this value.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletDistanceIRV2.AnalogValueCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetAnalogValueCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetAnalogValueCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletDistanceIRV2.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletDistanceIRV2.AnalogValueCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetAnalogValueCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetAnalogValueCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetMovingAverageConfiguration(System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the distance.
              
              Setting the length to 1 will turn the averaging off. With less averaging, there
              is more noise on the data.
              
              New data is gathered every ~10ms. With a moving average of length 1000 the
              resulting averaging window has a length of approximately 10s. If you want to do
              long term measurements the longest moving average will give the cleanest results.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetMovingAverageConfiguration">
             <summary>
              Returns the moving average configuration as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetMovingAverageConfiguration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceLEDConfig(System.Byte)">
             <summary>
              Configures the distance LED to be either turned off, turned on, blink in
              heartbeat mode or show the distance (brighter = object is nearer).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetDistanceLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetDistanceLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetSensorType(System.Byte)">
             <summary>
              Sets the sensor type.
              
              The Bricklet comes configured with the correct sensor type
              and the type is saved in flash (i.e. the Bricklet retains the information if
              power is lost).
              
              If you want to change the sensor you can set the type in Brick Viewer,
              you will likely never need to call this function from your program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetSensorType">
             <summary>
              Returns the sensor type as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetSensorType(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletDistanceIRV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDistanceIRV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceIRV2.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceUS">
             <summary>
              Measures distance between 2cm and 400cm with ultrasound
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_DISTANCE_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_SET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_SET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUS.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceUS.DistanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackPeriod(System.Int64)" />. The parameter is the distance value
              of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceCallback" /> callback is only triggered if the distance value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceUS.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceUS.Distance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceUS.DistanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the distance value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletDistanceUS.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceUS.DistanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceUS.DistanceReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetDistanceValue">
             <summary>
              Returns the current distance value measured by the sensor.
              A small value corresponds to a small distance, a big
              value corresponds to a big distance. The relation between the measured distance
              value and the actual distance is affected by the 5V supply voltage (deviations
              in the supply voltage result in deviations in the distance values) and is
              non-linear (resolution is bigger at close range).
              
              If you want to get the distance value periodically, it is recommended to
              use the <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              Der <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceCallback" /> callback is only triggered if the distance value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetDistanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the distance value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the distance value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the distance value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the distance value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetDistanceCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletDistanceUS.DistanceReachedCallback" />,
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletDistanceUS.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletDistanceUS.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.SetMovingAverage(System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the distance value.
              
              Setting the length to 0 will turn the averaging completely off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetMovingAverage">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletDistanceUS.SetMovingAverage(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUS.OnDistanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceUSV2">
             <summary>
              Measures distance between 30cm and 500cm with ultrasound
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_DISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_UPDATE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_UPDATE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.UPDATE_RATE_2_HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.UPDATE_RATE_10_HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DISTANCE_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DISTANCE_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DISTANCE_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.DISTANCE_LED_CONFIG_SHOW_DISTANCE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDistanceUSV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDistanceUSV2.DistanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletDistanceUSV2.GetDistance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDistanceUSV2.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetDistance">
             <summary>
              Returns the distance.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletDistanceUSV2.DistanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletDistanceUSV2.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletDistanceUSV2.DistanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetDistanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetUpdateRate(System.Byte)">
             <summary>
              Sets the update rate to 2 Hz or 10 Hz.
              
              With 2 Hz update rate the noise is about ±1mm, while with 10 Hz update rate the noise
              increases to about ±5mm.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetUpdateRate">
             <summary>
              Returns the update rate as set by <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetUpdateRate(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceLEDConfig(System.Byte)">
             <summary>
              Configures the distance LED to be either turned off, turned on, blink in
              heartbeat mode or show the distance (brighter = object is nearer).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetDistanceLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetDistanceLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletDistanceUSV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDistanceUSV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDistanceUSV2.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualButton">
             <summary>
              Two tactile buttons with built-in blue LEDs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.FUNCTION_SET_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.FUNCTION_GET_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.FUNCTION_GET_BUTTON_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.FUNCTION_SET_SELECTED_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_STATE_AUTO_TOGGLE_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_STATE_AUTO_TOGGLE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_STATE_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_STATE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.BUTTON_STATE_PRESSED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.BUTTON_STATE_RELEASED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_LEFT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButton.LED_RIGHT">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDualButton.StateChangedCallback">
             <summary>
              This callback is called whenever a button is pressed.
              
              Possible states for buttons are:
              
              * 0 = pressed
              * 1 = released
              
              Possible states for LEDs are:
              
              * 0 = AutoToggleOn: Auto toggle enabled and LED on.
              * 1 = AutoToggleOff: Auto toggle enabled and LED off.
              * 2 = On: LED on (auto toggle is disabled).
              * 3 = Off: LED off (auto toggle is disabled).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualButton.StateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDualButton.StateChanged">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.SetLEDState(System.Byte,System.Byte)">
             <summary>
              Sets the state of the LEDs. Possible states are:
              
              * 0 = AutoToggleOn: Enables auto toggle with initially enabled LED.
              * 1 = AutoToggleOff: Activates auto toggle with initially disabled LED.
              * 2 = On: Enables LED (auto toggle is disabled).
              * 3 = Off: Disables LED (auto toggle is disabled).
              
              In auto toggle mode the LED is toggled automatically at each press of a button.
              
              If you just want to set one of the LEDs and don't know the current state
              of the other LED, you can get the state with <see cref="M:Tinkerforge.BrickletDualButton.GetLEDState(System.Byte@,System.Byte@)" /> or you
              can use <see cref="M:Tinkerforge.BrickletDualButton.SetSelectedLEDState(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.GetLEDState(System.Byte@,System.Byte@)">
             <summary>
              Returns the current state of the LEDs, as set by <see cref="M:Tinkerforge.BrickletDualButton.SetLEDState(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.GetButtonState(System.Byte@,System.Byte@)">
             <summary>
              Returns the current state for both buttons. Possible states are:
              
              * 0 = pressed
              * 1 = released
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.SetSelectedLEDState(System.Byte,System.Byte)">
             <summary>
              Sets the state of the selected LED (0 or 1).
              
              The other LED remains untouched.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButton.OnStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualButtonV2">
             <summary>
              Two tactile buttons with built-in blue LEDs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_BUTTON_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_SELECTED_LED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_STATE_CHANGED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_STATE_CHANGED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_STATE_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_STATE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BUTTON_STATE_PRESSED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BUTTON_STATE_RELEASED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_LEFT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.LED_RIGHT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualButtonV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDualButtonV2.StateChangedCallback">
             <summary>
              This callback is called whenever a button is pressed.
              
              Possible states for buttons are:
              
              * 0 = pressed
              * 1 = released
              
              Possible states for LEDs are:
              
              * 0 = AutoToggleOn: Auto toggle enabled and LED on.
              * 1 = AutoToggleOff: Auto toggle enabled and LED off.
              * 2 = On: LED on (auto toggle is disabled).
              * 3 = Off: LED off (auto toggle is disabled).
              
              This callback can be enabled with <see cref="M:Tinkerforge.BrickletDualButtonV2.SetStateChangedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualButtonV2.StateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetLEDState(System.Byte,System.Byte)">
             <summary>
              Sets the state of the LEDs. Possible states are:
              
              * 0 = AutoToggleOn: Enables auto toggle with initially enabled LED.
              * 1 = AutoToggleOff: Activates auto toggle with initially disabled LED.
              * 2 = On: Enables LED (auto toggle is disabled).
              * 3 = Off: Disables LED (auto toggle is disabled).
              
              In auto toggle mode the LED is toggled automatically at each press of a button.
              
              If you just want to set one of the LEDs and don't know the current state
              of the other LED, you can get the state with <see cref="M:Tinkerforge.BrickletDualButtonV2.GetLEDState(System.Byte@,System.Byte@)" /> or you
              can use <see cref="M:Tinkerforge.BrickletDualButtonV2.SetSelectedLEDState(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetLEDState(System.Byte@,System.Byte@)">
             <summary>
              Returns the current state of the LEDs, as set by <see cref="M:Tinkerforge.BrickletDualButtonV2.SetLEDState(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetButtonState(System.Byte@,System.Byte@)">
             <summary>
              Returns the current state for both buttons. Possible states are:
              
              * 0 = pressed
              * 1 = released
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetSelectedLEDState(System.Byte,System.Byte)">
             <summary>
              Sets the state of the selected LED.
              
              The other LED remains untouched.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetStateChangedCallbackConfiguration(System.Boolean)">
             <summary>
              If you enable this callback, the <see cref="E:Tinkerforge.BrickletDualButtonV2.StateChangedCallback" /> callback is triggered
              every time a button is pressed/released
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetStateChangedCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDualButtonV2.SetStateChangedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletDualButtonV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletDualButtonV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletDualButtonV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletDualButtonV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualButtonV2.OnStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualRelay">
             <summary>
              Two relays to switch AC/DC devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_SET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_SET_SELECTED_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDualRelay.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDualRelay.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameter contain the relay (1 or 2) and the current state of the relay
              (the state after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDualRelay.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDualRelay.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.SetState(System.Boolean,System.Boolean)">
             <summary>
              Sets the state of the relays, *true* means on and *false* means off.
              For example: (true, false) turns relay 1 on and relay 2 off.
              
              If you just want to set one of the relays and don't know the current state
              of the other relay, you can get the state with <see cref="M:Tinkerforge.BrickletDualRelay.GetState(System.Boolean@,System.Boolean@)" /> or you
              can use <see cref="M:Tinkerforge.BrickletDualRelay.SetSelectedState(System.Byte,System.Boolean)" />.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.GetState(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the state of the relays, *true* means on and *false* means off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              The first parameter can be 1 or 2 (relay 1 or relay 2). The second parameter
              is the desired state of the relay (*true* means on and *false* means off).
              The third parameter indicates the time that the relay should hold
              the state.
              
              If this function is called with the parameters (1, true, 1500):
              Relay 1 will turn on and in 1.5s it will turn off again.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a Dual Relay Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds. The relay will be on all the time. If now the RS485
              connection is lost, the relay will turn off in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given relay) the current state and the time as set by
              <see cref="M:Tinkerforge.BrickletDualRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the state flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.SetSelectedState(System.Byte,System.Boolean)">
             <summary>
              Sets the state of the selected relay (1 or 2), *true* means on and *false* means off.
              
              A running monoflop timer for the selected relay will be aborted if this function is called.
              
              The other relay remains untouched.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDualRelay.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDustDetector">
             <summary>
              Measures dust density
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_DUST_DENSITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_SET_DUST_DENSITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_DUST_DENSITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_SET_DUST_DENSITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_DUST_DENSITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletDustDetector.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDustDetector.DustDensityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackPeriod(System.Int64)" />. The parameter is the
              dust density of the sensor.
              
              Der <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityCallback" /> callback is only triggered if the dust density value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDustDetector.DustDensityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDustDetector.DustDensity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDustDetector.DustDensityReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the dust density of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletDustDetector.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletDustDetector.DustDensityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletDustDetector.DustDensityReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetDustDensity">
             <summary>
              Returns the dust density.
              
              If you want to get the dust density periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityCallback" /> callback is only triggered if the dust density has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetDustDensityCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the dust density value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the dust density value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the dust density value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the dust density value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetDustDensityCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletDustDetector.DustDensityReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletDustDetector.SetDustDensityCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletDustDetector.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.SetMovingAverage(System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the dust density.
              
              Setting the length to 0 will turn the averaging completely off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetMovingAverage">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletDustDetector.SetMovingAverage(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.OnDustDensityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletDustDetector.OnDustDensityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletEPaper296x128">
             <summary>
              Three color 296x128 e-paper display
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_DRAW">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_DRAW_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_WRITE_BLACK_WHITE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_READ_BLACK_WHITE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_WRITE_COLOR_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_READ_COLOR_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_FILL_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_DRAW_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_DRAW_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_DRAW_BOX">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_UPDATE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_UPDATE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_DISPLAY_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_DISPLAY_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_DISPLAY_DRIVER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_DISPLAY_DRIVER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DRAW_STATUS_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DRAW_STATUS_COPYING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DRAW_STATUS_DRAWING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.COLOR_BLACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.COLOR_WHITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.COLOR_RED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.COLOR_GRAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_6X8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_6X16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_6X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_6X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_12X16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_12X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_12X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_18X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_18X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.FONT_24X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.ORIENTATION_HORIZONTAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.ORIENTATION_VERTICAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.UPDATE_MODE_DEFAULT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.UPDATE_MODE_BLACK_WHITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.UPDATE_MODE_DELTA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DISPLAY_TYPE_BLACK_WHITE_RED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DISPLAY_TYPE_BLACK_WHITE_GRAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DISPLAY_DRIVER_SSD1675A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.DISPLAY_DRIVER_SSD1680">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEPaper296x128.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletEPaper296x128.DrawStatusCallback">
             <summary>
              Callback for the current draw status. Will be called every time the
              draw status changes (see <see cref="M:Tinkerforge.BrickletEPaper296x128.GetDrawStatus" />).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletEPaper296x128.DrawStatusEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.Draw">
             <summary>
              Draws the current black/white and red or gray buffer to the e-paper display.
              
              The Bricklet does not have any double-buffering. You should not call
              this function while writing to the buffer. See <see cref="M:Tinkerforge.BrickletEPaper296x128.GetDrawStatus" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetDrawStatus">
             <summary>
              Returns one of three draw statuses:
              
              * Idle
              * Copying: Data is being copied from the buffer of the Bricklet to the buffer of the display.
              * Drawing: The display is updating its content (during this phase the flickering etc happens).
              
              You can write to the buffer (through one of the write or draw functions) when the status is
              either *idle* or *drawing*. You should not write to the buffer while it is being *copied* to the
              display. There is no double-buffering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhiteLowLevel(System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              Writes black/white pixels to the specified window into the buffer.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The value 0 (false) corresponds to a black pixel and the value 1 (true) to a
              white pixel.
              
              This function writes the pixels into the black/white pixel buffer, to draw the
              buffer to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
              
              Use <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteColor(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" /> to write red or gray pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.ReadBlackWhiteLowLevel(System.Int32,System.Byte,System.Int32,System.Byte,System.Int32@,System.Int32@,System.Boolean[]@)">
             <summary>
              Returns the current content of the black/white pixel buffer for the specified window.
              
              The pixels are read into the window line by line top to bottom and
              each line is read from left to right.
              
              The current content of the buffer does not have to be the current content of the display.
              It is possible that the data was not drawn to the display yet and after a restart of
              the Bricklet the buffer will be reset to black, while the display retains its content.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteColorLowLevel(System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              The E-Paper 296x128 Bricklet is available with the colors black/white/red and
              black/white/gray. Depending on the model this function writes either red or
              gray pixels to the specified window into the buffer.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The value 0 (false) means that this pixel does not have color. It will be either black
              or white (see <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" />). The value 1 (true) corresponds to a red or gray
              pixel, depending on the Bricklet model.
              
              This function writes the pixels into the red or gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
              
              Use <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" /> to write black/white pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.ReadColorLowLevel(System.Int32,System.Byte,System.Int32,System.Byte,System.Int32@,System.Int32@,System.Boolean[]@)">
             <summary>
              Returns the current content of the red or gray pixel buffer for the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The current content of the buffer does not have to be the current content of the display.
              It is possible that the data was not drawn to the display yet and after a restart of
              the Bricklet the buffer will be reset to black, while the display retains its content.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.FillDisplay(System.Byte)">
             <summary>
              Fills the complete content of the display with the given color.
              
              This function writes the pixels into the black/white/red|gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.DrawText(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.String)">
             <summary>
              Draws a text with up to 50 characters at the pixel position (x, y).
              
              You can use one of 9 different font sizes and draw the text in
              black/white/red|gray. The text can be drawn horizontal or vertical.
              
              This function writes the pixels into the black/white/red|gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
              
              The font conforms to code page 437.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.DrawLine(System.Int32,System.Byte,System.Int32,System.Byte,System.Byte)">
             <summary>
              Draws a line from (x, y)-start to (x, y)-end in the given color.
              
              This function writes the pixels into the black/white/red|gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.DrawBox(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean,System.Byte)">
             <summary>
              Draws a box from (x, y)-start to (x, y)-end in the given color.
              
              If you set fill to true, the box will be filled with the
              color. Otherwise only the outline will be drawn.
              
              This function writes the pixels into the black/white/red|gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetUpdateMode(System.Byte)">
             <summary>
              <note>
               The default update mode corresponds to the default e-paper display
               manufacturer settings. All of the other modes are experimental and
               will result in increased ghosting and possibly other long-term
               side effects.
              </note>
              
               If you want to know more about the inner workings of an e-paper display
               take a look at this excellent video from Ben Krasnow:
               `https://www.youtube.com/watch?v=MsbiO8EAsGw &lt;https://www.youtube.com/watch?v=MsbiO8EAsGw&gt;`__.
              
               If you are not sure about this option, leave the update mode at default.
              
              Currently there are three update modes available:
              
              * Default: Settings as given by the manufacturer. An update will take about
                7.5 seconds and during the update the screen will flicker several times.
              * Black/White: This will only update the black/white pixel. It uses the manufacturer
                settings for black/white and ignores the red or gray pixel buffer. With this mode the
                display will flicker once and it takes about 2.5 seconds. Compared to the default settings
                there is more ghosting.
              * Delta: This will only update the black/white pixel. It uses an aggressive method where
                the changes are not applied for a whole buffer but only for the delta between the last
                and the next buffer. With this mode the display will not flicker during an update and
                it takes about 900-950ms. Compared to the other two settings there is more ghosting. This
                mode can be used for something like a flicker-free live update of a text.
              
              With the black/white/red display if you use either the black/white or the delta mode,
              after a while of going back and forth between black and white the white color will
              start to appear red-ish or pink-ish.
              
              If you use the aggressive delta mode and rapidly change the content, we recommend that you
              change back to the default mode every few hours and in the default mode cycle between the
              three available colors a few times. This will get rid of the ghosting and after that you can
              go back to the delta mode with flicker-free updates.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetUpdateMode">
             <summary>
              Returns the update mode as set by <see cref="M:Tinkerforge.BrickletEPaper296x128.SetUpdateMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetDisplayType(System.Byte)">
             <summary>
              Sets the type of the display. The e-paper display is available
              in black/white/red and black/white/gray. This will be factory set
              during the flashing and testing phase. The value is saved in
              non-volatile memory and will stay after a power cycle.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetDisplayType">
             <summary>
              Returns the type of the e-paper display. It can either be
              black/white/red or black/white/gray.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetDisplayDriver(System.Byte)">
             <summary>
              Sets the type of display driver. The Bricklet can currently support
              SSD1675A and SSD1680. This will be factory set
              during the flashing and testing phase. The value is saved in
              non-volatile memory and will stay after a power cycle.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetDisplayDriver">
             <summary>
              Returns the e-paper display driver.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletEPaper296x128.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletEPaper296x128.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletEPaper296x128.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])">
             <summary>
              Writes black/white pixels to the specified window into the buffer.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The value 0 (false) corresponds to a black pixel and the value 1 (true) to a
              white pixel.
              
              This function writes the pixels into the black/white pixel buffer, to draw the
              buffer to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
              
              Use <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteColor(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" /> to write red or gray pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.ReadBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte)">
             <summary>
              Returns the current content of the black/white pixel buffer for the specified window.
              
              The pixels are read into the window line by line top to bottom and
              each line is read from left to right.
              
              The current content of the buffer does not have to be the current content of the display.
              It is possible that the data was not drawn to the display yet and after a restart of
              the Bricklet the buffer will be reset to black, while the display retains its content.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.WriteColor(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])">
             <summary>
              The E-Paper 296x128 Bricklet is available with the colors black/white/red and
              black/white/gray. Depending on the model this function writes either red or
              gray pixels to the specified window into the buffer.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The value 0 (false) means that this pixel does not have color. It will be either black
              or white (see <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" />). The value 1 (true) corresponds to a red or gray
              pixel, depending on the Bricklet model.
              
              This function writes the pixels into the red or gray pixel buffer, to draw the buffer
              to the display use <see cref="M:Tinkerforge.BrickletEPaper296x128.Draw" />.
              
              Use <see cref="M:Tinkerforge.BrickletEPaper296x128.WriteBlackWhite(System.Int32,System.Byte,System.Int32,System.Byte,System.Boolean[])" /> to write black/white pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.ReadColor(System.Int32,System.Byte,System.Int32,System.Byte)">
             <summary>
              Returns the current content of the red or gray pixel buffer for the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              The current content of the buffer does not have to be the current content of the display.
              It is possible that the data was not drawn to the display yet and after a restart of
              the Bricklet the buffer will be reset to black, while the display retains its content.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEPaper296x128.OnDrawStatusCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletEnergyMonitor">
             <summary>
              Measures Voltage, Current, Energy, Real/Apparent/Reactive Power, Power Factor and Frequency
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_ENERGY_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_RESET_ENERGY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_WAVEFORM_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_TRANSFORMER_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_SET_TRANSFORMER_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_TRANSFORMER_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_CALIBRATE_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_SET_ENERGY_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_ENERGY_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletEnergyMonitor.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletEnergyMonitor.EnergyDataCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetEnergyDataCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletEnergyMonitor.GetEnergyData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletEnergyMonitor.EnergyDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetEnergyData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns all of the measurements that are done by the Energy Monitor Bricklet.
              
              * Voltage RMS
              * Current RMS
              * Energy (integrated over time)
              * Real Power
              * Apparent Power
              * Reactive Power
              * Power Factor
              * Frequency (AC Frequency of the mains voltage)
              
              The frequency is recalculated every 6 seconds.
              
              All other values are integrated over 10 zero-crossings of the voltage sine wave.
              With a standard AC mains voltage frequency of 50Hz this results in a 5 measurements
              per second (or an integration time of 200ms per measurement).
              
              If no voltage transformer is connected, the Bricklet will use the current waveform
              to calculate the frequency and it will use an integration time of
              10 zero-crossings of the current waveform.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.ResetEnergy">
             <summary>
              Sets the energy value (see <see cref="M:Tinkerforge.BrickletEnergyMonitor.GetEnergyData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />) back to 0Wh.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetWaveformLowLevel(System.Int32@,System.Int16[]@)">
             <summary>
              Returns a snapshot of the voltage and current waveform. The values
              in the returned array alternate between voltage and current. The data from
              one getter call contains 768 data points for voltage and current, which
              correspond to about 3 full sine waves.
              
              The voltage is given with a resolution of 100mV and the current is given
              with a resolution of 10mA.
              
              This data is meant to be used for a non-realtime graphical representation of
              the voltage and current waveforms.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetTransformerStatus(System.Boolean@,System.Boolean@)">
             <summary>
              Returns *true* if a voltage/current transformer is connected to the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.SetTransformerCalibration(System.Int32,System.Int32,System.Int16)">
             <summary>
              Sets the transformer ratio for the voltage and current transformer in 1/100 form.
              
              Example: If your mains voltage is 230V, you use 9V voltage transformer and a
              1V:30A current clamp your voltage ratio is 230/9 = 25.56 and your current ratio
              is 30/1 = 30.
              
              In this case you have to set the values 2556 and 3000 for voltage ratio and current
              ratio.
              
              The calibration is saved in non-volatile memory, you only have to set it once.
              
              Set the phase shift to 0. It is for future use and currently not supported by the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetTransformerCalibration(System.Int32@,System.Int32@,System.Int16@)">
             <summary>
              Returns the transformer calibration as set by <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetTransformerCalibration(System.Int32,System.Int32,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.CalibrateOffset">
             <summary>
              Calling this function will start an offset calibration. The offset calibration will
              integrate the voltage and current waveform over a longer time period to find the 0
              transition point in the sine wave.
              
              The Bricklet comes with a factory-calibrated offset value, you should not have to
              call this function.
              
              If you want to re-calibrate the offset we recommend that you connect a load that
              has a smooth sinusoidal voltage and current waveform. Alternatively you can also
              short both inputs.
              
              The calibration is saved in non-volatile memory, you only have to set it once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.SetEnergyDataCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletEnergyMonitor.EnergyDataCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetEnergyDataCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetEnergyDataCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletEnergyMonitor.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletEnergyMonitor.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.GetWaveform">
             <summary>
              Returns a snapshot of the voltage and current waveform. The values
              in the returned array alternate between voltage and current. The data from
              one getter call contains 768 data points for voltage and current, which
              correspond to about 3 full sine waves.
              
              The voltage is given with a resolution of 100mV and the current is given
              with a resolution of 10mA.
              
              This data is meant to be used for a non-realtime graphical representation of
              the voltage and current waveforms.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletEnergyMonitor.OnEnergyDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS">
             <summary>
              Determine position, velocity and altitude using GPS
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_COORDINATES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_ALTITUDE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_RESTART">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_SET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_SET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_SET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_SET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_SET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FIX_NO_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FIX_2D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.FIX_3D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.RESTART_TYPE_HOT_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.RESTART_TYPE_WARM_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.RESTART_TYPE_COLD_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPS.RESTART_TYPE_FACTORY_RESET">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.CoordinatesCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPS.SetCoordinatesCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPS.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPS.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS.CoordinatesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.Coordinates">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.StatusCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPS.SetStatusCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPS.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS.StatusEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.Status">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.AltitudeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPS.SetAltitudeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPS.GetAltitude(System.Int32@,System.Int32@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPS.AltitudeCallback" /> callback is only triggered if the altitude changed since
              the last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS.AltitudeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.Altitude">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.MotionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPS.SetMotionCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPS.GetMotion(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPS.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS.MotionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.Motion">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.DateTimeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPS.SetDateTimeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPS.GetDateTime(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPS.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPS.DateTimeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPS.DateTime">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the GPS coordinates. Latitude and longitude are given in the
              ``DD.dddddd°`` format, the value 57123468 means 57.123468°.
              The parameter ``ns`` and ``ew`` are the cardinal directions for
              latitude and longitude. Possible values for ``ns`` and ``ew`` are 'N', 'S', 'E'
              and 'W' (north, south, east and west).
              
              PDOP, HDOP and VDOP are the dilution of precision (DOP) values. They specify
              the additional multiplicative effect of GPS satellite geometry on GPS
              precision. See
              `here &lt;https://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)&gt;`__
              for more information.
              
              EPE is the "Estimated Position Error". This is not the
              absolute maximum error, it is the error with a specific confidence. See
              `here &lt;https://www.nps.gov/gis/gps/WhatisEPE.html&gt;`__ for more information.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the current fix status, the number of satellites that are in view and
              the number of satellites that are currently used.
              
              Possible fix status values can be:
              
              <code>
               "Value", "Description"
              
               "1", "No Fix, <see cref="M:Tinkerforge.BrickletGPS.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />, <see cref="M:Tinkerforge.BrickletGPS.GetAltitude(System.Int32@,System.Int32@)" /> and <see cref="M:Tinkerforge.BrickletGPS.GetMotion(System.Int64@,System.Int64@)" /> return invalid data"
               "2", "2D Fix, only <see cref="M:Tinkerforge.BrickletGPS.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" /> and <see cref="M:Tinkerforge.BrickletGPS.GetMotion(System.Int64@,System.Int64@)" /> return valid data"
               "3", "3D Fix, <see cref="M:Tinkerforge.BrickletGPS.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />, <see cref="M:Tinkerforge.BrickletGPS.GetAltitude(System.Int32@,System.Int32@)" /> and <see cref="M:Tinkerforge.BrickletGPS.GetMotion(System.Int64@,System.Int64@)" /> return valid data"
              </code>
              
              There is also a :ref:`blue LED &lt;gps_bricklet_fix_led&gt;` on the Bricklet that
              indicates the fix status.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetAltitude(System.Int32@,System.Int32@)">
             <summary>
              Returns the current altitude and corresponding geoidal separation.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetMotion(System.Int64@,System.Int64@)">
             <summary>
              Returns the current course and speed. A course of 0° means the Bricklet is
              traveling north bound and 90° means it is traveling east bound.
              
              Please note that this only returns useful values if an actual movement
              is present.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPS.GetStatus(System.Byte@,System.Byte@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetDateTime(System.Int64@,System.Int64@)">
             <summary>
              Returns the current date and time. The date is
              given in the format ``ddmmyy`` and the time is given
              in the format ``hhmmss.sss``. For example, 140713 means
              14.07.13 as date and 195923568 means 19:59:23.568 as time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.Restart(System.Byte)">
             <summary>
              Restarts the GPS Bricklet, the following restart types are available:
              
              <code>
               "Value", "Description"
              
               "0", "Hot start (use all available data in the NV store)"
               "1", "Warm start (don't use ephemeris at restart)"
               "2", "Cold start (don't use time, position, almanacs and ephemeris at restart)"
               "3", "Factory reset (clear all system/user configurations at restart)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.SetCoordinatesCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPS.CoordinatesCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPS.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetCoordinatesCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPS.SetCoordinatesCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.SetStatusCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPS.StatusCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPS.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetStatusCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPS.SetStatusCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.SetAltitudeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPS.AltitudeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPS.AltitudeCallback" /> callback is only triggered if the altitude changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetAltitudeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPS.SetAltitudeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.SetMotionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPS.MotionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPS.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetMotionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPS.SetMotionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.SetDateTimeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPS.DateTimeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPS.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetDateTimeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPS.SetDateTimeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.OnCoordinatesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.OnStatusCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.OnAltitudeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.OnMotionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPS.OnDateTimeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2">
             <summary>
              Determine position, velocity and altitude using GPS
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_COORDINATES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_ALTITUDE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_RESTART">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_SATELLITE_SYSTEM_STATUS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_SATELLITE_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_FIX_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_FIX_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_SBAS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_SBAS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.RESTART_TYPE_HOT_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.RESTART_TYPE_WARM_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.RESTART_TYPE_COLD_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.RESTART_TYPE_FACTORY_RESET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.SATELLITE_SYSTEM_GPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.SATELLITE_SYSTEM_GLONASS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.SATELLITE_SYSTEM_GALILEO">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_NO_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_2D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_3D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_LED_CONFIG_SHOW_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.FIX_LED_CONFIG_SHOW_PPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.SBAS_ENABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.SBAS_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.PulsePerSecondCallback">
             <summary>
              This callback is triggered precisely once per second,
              see `PPS &lt;https://en.wikipedia.org/wiki/Pulse-per-second_signal&gt;`__.
              
              The precision of two subsequent pulses will be skewed because
              of the latency in the USB/RS485/Ethernet connection. But in the
              long run this will be very precise. For example a count of
              3600 pulses will take exactly 1 hour.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.PulsePerSecondEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.CoordinatesCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetCoordinatesCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV2.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.CoordinatesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.StatusCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetStatusCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.StatusEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.AltitudeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetAltitudeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV2.GetAltitude(System.Int32@,System.Int32@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.AltitudeCallback" /> callback is only triggered if the altitude changed since the
              last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.AltitudeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.MotionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetMotionCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV2.GetMotion(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.MotionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV2.DateTimeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetDateTimeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV2.GetDateTime(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV2.DateTimeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@)">
             <summary>
              Returns the GPS coordinates. Latitude and longitude are given in the
              ``DD.dddddd°`` format, the value 57123468 means 57.123468°.
              The parameter ``ns`` and ``ew`` are the cardinal directions for
              latitude and longitude. Possible values for ``ns`` and ``ew`` are 'N', 'S', 'E'
              and 'W' (north, south, east and west).
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)">
             <summary>
              Returns if a fix is currently available as well as the number of
              satellites that are in view.
              
              There is also a :ref:`green LED &lt;gps_v2_bricklet_fix_led&gt;` on the Bricklet that
              indicates the fix status.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetAltitude(System.Int32@,System.Int32@)">
             <summary>
              Returns the current altitude and corresponding geoidal separation.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetMotion(System.Int64@,System.Int64@)">
             <summary>
              Returns the current course and speed. A course of 0° means the Bricklet is
              traveling north bound and 90° means it is traveling east bound.
              
              Please note that this only returns useful values if an actual movement
              is present.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV2.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetDateTime(System.Int64@,System.Int64@)">
             <summary>
              Returns the current date and time. The date is
              given in the format ``ddmmyy`` and the time is given
              in the format ``hhmmss.sss``. For example, 140713 means
              14.07.13 as date and 195923568 means 19:59:23.568 as time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.Restart(System.Byte)">
             <summary>
              Restarts the GPS Bricklet, the following restart types are available:
              
              <code>
               "Value", "Description"
              
               "0", "Hot start (use all available data in the NV store)"
               "1", "Warm start (don't use ephemeris at restart)"
               "2", "Cold start (don't use time, position, almanacs and ephemeris at restart)"
               "3", "Factory reset (clear all system/user configurations at restart)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetSatelliteSystemStatusLowLevel(System.Byte,System.Byte@,System.Byte[]@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the
              
              * satellite numbers list (up to 12 items)
              * fix value,
              * PDOP value,
              * HDOP value and
              * VDOP value
              
              for a given satellite system. Currently GPS and GLONASS are supported, Galileo
              is not yet supported.
              
              The GPS and GLONASS satellites have unique numbers and the satellite list gives
              the numbers of the satellites that are currently utilized. The number 0 is not
              a valid satellite number and can be ignored in the list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetSatelliteStatus(System.Byte,System.Byte,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current elevation, azimuth and SNR
              for a given satellite and satellite system.
              
              The satellite number here always goes from 1 to 32. For GLONASS it corresponds to
              the satellites 65-96.
              
              Galileo is not yet supported.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetFixLEDConfig(System.Byte)">
             <summary>
              Sets the fix LED configuration. By default the LED shows if
              the Bricklet got a GPS fix yet. If a fix is established the LED turns on.
              If there is no fix then the LED is turned off.
              
              You can also turn the LED permanently on/off, show a heartbeat or let it blink
              in sync with the PPS (pulse per second) output of the GPS module.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetFixLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetFixLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetCoordinatesCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV2.CoordinatesCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetCoordinatesCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetCoordinatesCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetStatusCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV2.StatusCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetStatusCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetStatusCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetAltitudeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV2.AltitudeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.AltitudeCallback" /> callback is only triggered if the altitude changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetAltitudeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetAltitudeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetMotionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV2.MotionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetMotionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetMotionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetDateTimeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV2.DateTimeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV2.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetDateTimeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetDateTimeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetSBASConfig(System.Byte)">
             <summary>
              If `SBAS &lt;https://en.wikipedia.org/wiki/GNSS_augmentation#Satellite-based_augmentation_system&gt;`__ is enabled,
              the position accuracy increases (if SBAS satellites are in view),
              but the update rate is limited to 5Hz. With SBAS disabled the update rate is increased to 10Hz.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetSBASConfig">
             <summary>
              Returns the SBAS configuration as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetSBASConfig(System.Byte)" />
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletGPSV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletGPSV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletGPSV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletGPSV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.GetSatelliteSystemStatus(System.Byte,System.Byte[]@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the
              
              * satellite numbers list (up to 12 items)
              * fix value,
              * PDOP value,
              * HDOP value and
              * VDOP value
              
              for a given satellite system. Currently GPS and GLONASS are supported, Galileo
              is not yet supported.
              
              The GPS and GLONASS satellites have unique numbers and the satellite list gives
              the numbers of the satellites that are currently utilized. The number 0 is not
              a valid satellite number and can be ignored in the list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnPulsePerSecondCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnCoordinatesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnStatusCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnAltitudeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnMotionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV2.OnDateTimeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3">
             <summary>
              Determine position, velocity and altitude using GPS
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_COORDINATES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_ALTITUDE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_RESTART">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_SATELLITE_SYSTEM_STATUS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_SATELLITE_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_FIX_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_FIX_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_COORDINATES_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_STATUS_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_ALTITUDE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_MOTION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_SBAS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_SBAS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.RESTART_TYPE_HOT_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.RESTART_TYPE_WARM_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.RESTART_TYPE_COLD_START">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.RESTART_TYPE_FACTORY_RESET">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.SATELLITE_SYSTEM_GPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.SATELLITE_SYSTEM_GLONASS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.SATELLITE_SYSTEM_GALILEO">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_NO_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_2D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_3D_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_LED_CONFIG_SHOW_FIX">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.FIX_LED_CONFIG_SHOW_PPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.SBAS_ENABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.SBAS_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletGPSV3.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.PulsePerSecondCallback">
             <summary>
              This callback is triggered precisely once per second,
              see `PPS &lt;https://en.wikipedia.org/wiki/Pulse-per-second_signal&gt;`__.
              
              The precision of two subsequent pulses will be skewed because
              of the latency in the USB/RS485/Ethernet connection. But in the
              long run this will be very precise. For example a count of
              3600 pulses will take exactly 1 hour.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.PulsePerSecondEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.CoordinatesCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetCoordinatesCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV3.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.CoordinatesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.StatusCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetStatusCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.StatusEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.AltitudeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetAltitudeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV3.GetAltitude(System.Int32@,System.Int32@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.AltitudeCallback" /> callback is only triggered if the altitude changed since the
              last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.AltitudeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.MotionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetMotionCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV3.GetMotion(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering and if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.MotionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletGPSV3.DateTimeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetDateTimeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletGPSV3.GetDateTime(System.Int64@,System.Int64@)" />.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletGPSV3.DateTimeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetCoordinates(System.Int64@,System.Char@,System.Int64@,System.Char@)">
             <summary>
              Returns the GPS coordinates. Latitude and longitude are given in the
              ``DD.dddddd°`` format, the value 57123468 means 57.123468°.
              The parameter ``ns`` and ``ew`` are the cardinal directions for
              latitude and longitude. Possible values for ``ns`` and ``ew`` are 'N', 'S', 'E'
              and 'W' (north, south, east and west).
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)">
             <summary>
              Returns if a fix is currently available as well as the number of
              satellites that are in view.
              
              There is also a :ref:`green LED &lt;gps_v2_bricklet_fix_led&gt;` on the Bricklet that
              indicates the fix status.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetAltitude(System.Int32@,System.Int32@)">
             <summary>
              Returns the current altitude and corresponding geoidal separation.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetMotion(System.Int64@,System.Int64@)">
             <summary>
              Returns the current course and speed. A course of 0° means the Bricklet is
              traveling north bound and 90° means it is traveling east bound.
              
              Please note that this only returns useful values if an actual movement
              is present.
              
              This data is only valid if there is currently a fix as indicated by
              <see cref="M:Tinkerforge.BrickletGPSV3.GetStatus(System.Boolean@,System.Byte@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetDateTime(System.Int64@,System.Int64@)">
             <summary>
              Returns the current date and time. The date is
              given in the format ``ddmmyy`` and the time is given
              in the format ``hhmmss.sss``. For example, 140713 means
              14.07.13 as date and 195923568 means 19:59:23.568 as time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.Restart(System.Byte)">
             <summary>
              Restarts the GPS Bricklet, the following restart types are available:
              
              <code>
               "Value", "Description"
              
               "0", "Hot start (use all available data in the NV store)"
               "1", "Warm start (don't use ephemeris at restart)"
               "2", "Cold start (don't use time, position, almanacs and ephemeris at restart)"
               "3", "Factory reset (clear all system/user configurations at restart)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetSatelliteSystemStatusLowLevel(System.Byte,System.Byte@,System.Byte[]@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the
              
              * satellite numbers list (up to 12 items)
              * fix value,
              * PDOP value,
              * HDOP value and
              * VDOP value
              
              for a given satellite system. Currently GPS and GLONASS are supported, Galileo
              is not yet supported.
              
              The GPS and GLONASS satellites have unique numbers and the satellite list gives
              the numbers of the satellites that are currently utilized. The number 0 is not
              a valid satellite number and can be ignored in the list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetSatelliteStatus(System.Byte,System.Byte,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current elevation, azimuth and SNR
              for a given satellite and satellite system.
              
              The satellite number here always goes from 1 to 32. For GLONASS it corresponds to
              the satellites 65-96.
              
              Galileo is not yet supported.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetFixLEDConfig(System.Byte)">
             <summary>
              Sets the fix LED configuration. By default the LED shows if
              the Bricklet got a GPS fix yet. If a fix is established the LED turns on.
              If there is no fix then the LED is turned off.
              
              You can also turn the LED permanently on/off, show a heartbeat or let it blink
              in sync with the PPS (pulse per second) output of the GPS module.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetFixLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetFixLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetCoordinatesCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV3.CoordinatesCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.CoordinatesCallback" /> callback is only triggered if the coordinates changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetCoordinatesCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetCoordinatesCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetStatusCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV3.StatusCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.StatusCallback" /> callback is only triggered if the status changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetStatusCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetStatusCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetAltitudeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV3.AltitudeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.AltitudeCallback" /> callback is only triggered if the altitude changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetAltitudeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetAltitudeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetMotionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV3.MotionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.MotionCallback" /> callback is only triggered if the motion changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetMotionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetMotionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetDateTimeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletGPSV3.DateTimeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletGPSV3.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetDateTimeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetDateTimeCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetSBASConfig(System.Byte)">
             <summary>
              If `SBAS &lt;https://en.wikipedia.org/wiki/GNSS_augmentation#Satellite-based_augmentation_system&gt;`__ is enabled,
              the position accuracy increases (if SBAS satellites are in view),
              but the update rate is limited to 5Hz. With SBAS disabled the update rate is increased to 10Hz.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetSBASConfig">
             <summary>
              Returns the SBAS configuration as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetSBASConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletGPSV3.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletGPSV3.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletGPSV3.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletGPSV3.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.GetSatelliteSystemStatus(System.Byte,System.Byte[]@,System.Byte@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the
              
              * satellite numbers list (up to 12 items)
              * fix value,
              * PDOP value,
              * HDOP value and
              * VDOP value
              
              for a given satellite system. Currently GPS and GLONASS are supported, Galileo
              is not yet supported.
              
              The GPS and GLONASS satellites have unique numbers and the satellite list gives
              the numbers of the satellites that are currently utilized. The number 0 is not
              a valid satellite number and can be ignored in the list.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnPulsePerSecondCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnCoordinatesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnStatusCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnAltitudeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnMotionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletGPSV3.OnDateTimeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHallEffect">
             <summary>
              Detects presence of magnetic field
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_SET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_SET_EDGE_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_EDGE_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_SET_EDGE_COUNT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_EDGE_COUNT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_EDGE_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffect.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHallEffect.EdgeCountCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeCountCallbackPeriod(System.Int64)" />. The parameters are the
              current count and the current value (see <see cref="M:Tinkerforge.BrickletHallEffect.GetValue" /> and
              <see cref="M:Tinkerforge.BrickletHallEffect.GetEdgeCount(System.Boolean)" />).
              
              The <see cref="E:Tinkerforge.BrickletHallEffect.EdgeCountCallback" /> callback is only triggered if the count or value changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHallEffect.EdgeCountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHallEffect.EdgeCount">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetValue">
             <summary>
              Returns *true* if a magnetic field of 3.5 millitesla or greater is detected.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetEdgeCount(System.Boolean)">
             <summary>
              Returns the current value of the edge counter. You can configure
              edge type (rising, falling, both) that is counted with
              <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeCountConfig(System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.SetEdgeCountConfig(System.Byte,System.Byte)">
             <summary>
              The edge type parameter configures if rising edges, falling edges or
              both are counted. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              A magnetic field of 3.5 millitesla or greater causes a falling edge and a
              magnetic field of 2.5 millitesla or smaller causes a rising edge.
              
              If a magnet comes near the Bricklet the signal goes low (falling edge), if
              a magnet is removed from the vicinity the signal goes high (rising edge).
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetEdgeCountConfig(System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time as set by <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeCountConfig(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.SetEdgeInterrupt(System.Int64)">
             <summary>
              Sets the number of edges until an interrupt is invoked.
              
              If *edges* is set to n, an interrupt is invoked for every n-th detected edge.
              
              If *edges* is set to 0, the interrupt is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetEdgeInterrupt">
             <summary>
              Returns the edges as set by <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeInterrupt(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.SetEdgeCountCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletHallEffect.EdgeCountCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletHallEffect.EdgeCountCallback" /> callback is only triggered if the edge count has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetEdgeCountCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeCountCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.EdgeInterrupt(System.Int64@,System.Boolean@)">
             <summary>
              This callback is triggered every n-th count, as configured with
              <see cref="M:Tinkerforge.BrickletHallEffect.SetEdgeInterrupt(System.Int64)" />. The parameters are the
              current count and the current value (see <see cref="M:Tinkerforge.BrickletHallEffect.GetValue" /> and
              <see cref="M:Tinkerforge.BrickletHallEffect.GetEdgeCount(System.Boolean)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffect.OnEdgeCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHallEffectV2">
             <summary>
              Measures magnetic flux density between -7mT and +7mT
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_MAGNETIC_FLUX_DENSITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_MAGNETIC_FLUX_DENSITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_MAGNETIC_FLUX_DENSITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_COUNTER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_COUNTER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_COUNTER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_COUNTER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHallEffectV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHallEffectV2.MagneticFluxDensityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletHallEffectV2.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletHallEffectV2.GetMagneticFluxDensity" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHallEffectV2.MagneticFluxDensityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHallEffectV2.CounterCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletHallEffectV2.SetCounterCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The count is the same as you would get with <see cref="M:Tinkerforge.BrickletHallEffectV2.GetCounter(System.Boolean)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHallEffectV2.CounterEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetMagneticFluxDensity">
             <summary>
              Returns the `magnetic flux density (magnetic induction) &lt;https://en.wikipedia.org/wiki/Magnetic_flux&gt;`__.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHallEffectV2.MagneticFluxDensityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletHallEffectV2.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletHallEffectV2.MagneticFluxDensityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletHallEffectV2.MagneticFluxDensityCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetMagneticFluxDensityCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletHallEffectV2.SetMagneticFluxDensityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetCounter(System.Boolean)">
             <summary>
              Returns the current value of the counter.
              
              You can configure the low/high thresholds and the debounce time
              with <see cref="M:Tinkerforge.BrickletHallEffectV2.SetCounterConfig(System.Int16,System.Int16,System.Int64)" />.
              
              If you set reset counter to *true*, the count is set back to 0
              directly after it is read.
              
              If you want to get the count periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHallEffectV2.CounterCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletHallEffectV2.SetCounterCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetCounterConfig(System.Int16,System.Int16,System.Int64)">
             <summary>
              Sets a high and a low threshold as well as a debounce time.
              
              If the measured magnetic flux density goes above the high threshold or
              below the low threshold, the count of the counter is increased by 1.
              
              The debounce time is the minimum time between two count increments.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetCounterConfig(System.Int16@,System.Int16@,System.Int64@)">
             <summary>
              Returns the counter config as set by <see cref="M:Tinkerforge.BrickletHallEffectV2.SetCounterConfig(System.Int16,System.Int16,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetCounterCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletHallEffectV2.CounterCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetCounterCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletHallEffectV2.SetCounterCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletHallEffectV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletHallEffectV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletHallEffectV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletHallEffectV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.OnMagneticFluxDensityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHallEffectV2.OnCounterCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidity">
             <summary>
              Measures relative humidity
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_HUMIDITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_SET_HUMIDITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_HUMIDITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_SET_HUMIDITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_HUMIDITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidity.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.HumidityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackPeriod(System.Int64)" />. The parameter is the humidity of
              the sensor.
              
              The <see cref="E:Tinkerforge.BrickletHumidity.HumidityCallback" /> callback is only triggered if the humidity has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidity.HumidityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.Humidity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog
              value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueCallback" /> callback is only triggered if the humidity has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidity.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.HumidityReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the humidity of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletHumidity.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidity.HumidityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.HumidityReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletHumidity.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidity.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidity.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetHumidity">
             <summary>
              Returns the humidity of the sensor.
              
              If you want to get the humidity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHumidity.HumidityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletHumidity.GetHumidity" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletHumidity.GetAnalogValue" /> gives back raw
               unfiltered analog values. The returned humidity value is calibrated for
               room temperatures, if you use the sensor in extreme cold or extreme
               warm environments, you might want to calculate the humidity from
               the analog value yourself. See the `HIH 5030 datasheet
               &lt;https://github.com/Tinkerforge/humidity-bricklet/raw/master/datasheets/hih-5030.pdf&gt;`__.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletHumidity.HumidityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletHumidity.HumidityCallback" /> callback is only triggered if the humidity has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetHumidityCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletHumidity.HumidityReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the humidity is *outside* the min and max values"
               "'i'",    "Callback is triggered when the humidity is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the humidity is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the humidity is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetHumidityCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletHumidity.HumidityReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletHumidity.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletHumidity.SetHumidityCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletHumidity.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletHumidity.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.OnHumidityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.OnHumidityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidity.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidityV2">
             <summary>
              Measures relative humidity
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_HUMIDITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_HUMIDITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_HEATER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_HEATER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_SAMPLES_PER_SECOND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_SAMPLES_PER_SECOND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.HEATER_CONFIG_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.HEATER_CONFIG_ENABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_20">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_10">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_5">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_02">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.SPS_01">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletHumidityV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidityV2.HumidityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletHumidityV2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletHumidityV2.GetHumidity" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidityV2.HumidityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletHumidityV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletHumidityV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletHumidityV2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletHumidityV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetHumidity">
             <summary>
              Returns the humidity measured by the sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHumidityV2.HumidityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletHumidityV2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletHumidityV2.HumidityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletHumidityV2.HumidityCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetHumidityCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetHumidityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetTemperature">
             <summary>
              Returns the temperature measured by the sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletHumidityV2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletHumidityV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletHumidityV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletHumidityV2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetHeaterConfiguration(System.Byte)">
             <summary>
              Enables/disables the heater. The heater can be used to dry the sensor in
              extremely wet conditions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetHeaterConfiguration">
             <summary>
              Returns the heater configuration as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetHeaterConfiguration(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetMovingAverageConfiguration(System.Int32,System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the humidity and temperature.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
              
              New data is gathered every 50ms*. With a moving average of length 1000 the resulting
              averaging window has a length of 50s. If you want to do long term measurements the longest
              moving average will give the cleanest results.
              
              \* In firmware version 2.0.3 we added the <see cref="M:Tinkerforge.BrickletHumidityV2.SetSamplesPerSecond(System.Byte)" /> function. It
              configures the measurement frequency. Since high frequencies can result in self-heating
              of th IC, changed the default value from 20 samples per second to 1. With 1 sample per second
              a moving average length of 1000 would result in an averaging window of 1000 seconds!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetMovingAverageConfiguration(System.Int32@,System.Int32@)">
             <summary>
              Returns the moving average configuration as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetMovingAverageConfiguration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetSamplesPerSecond(System.Byte)">
             <summary>
              Sets the samples per second that are gathered by the humidity/temperature sensor HDC1080.
              
              We added this function since we found out that a high measurement frequency can lead to
              self-heating of the sensor. Which can distort the temperature measurement.
              
              If you don't need a lot of measurements, you can use the lowest available measurement
              frequency of 0.1 samples per second for the least amount of self-heating.
              
              Before version 2.0.3 the default was 20 samples per second. The new default is 1 sample per second.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetSamplesPerSecond">
             <summary>
              Returnes the samples per second, as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetSamplesPerSecond(System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletHumidityV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletHumidityV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletHumidityV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletHumidityV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.OnHumidityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletHumidityV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3">
             <summary>
              Full fledged AHRS with 9 degrees of freedom
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_MAGNETIC_FIELD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ANGULAR_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ORIENTATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_LINEAR_ACCELERATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_GRAVITY_VECTOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_QUATERNION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SAVE_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_SENSOR_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_SENSOR_FUSION_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_SENSOR_FUSION_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_MAGNETIC_FIELD_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_MAGNETIC_FIELD_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_ANGULAR_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ANGULAR_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_ORIENTATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ORIENTATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_LINEAR_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_LINEAR_ACCELERATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_GRAVITY_VECTOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_GRAVITY_VECTOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_QUATERNION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_QUATERNION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_ALL_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_ALL_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_2HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_6HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_8HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_10HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_15HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_20HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.MAGNETOMETER_RATE_30HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_RANGE_2000DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_RANGE_1000DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_RANGE_500DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_RANGE_250DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_RANGE_125DPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_523HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_230HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_116HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_47HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_23HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_12HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_64HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.GYROSCOPE_BANDWIDTH_32HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_RANGE_2G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_RANGE_4G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_RANGE_8G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_RANGE_16G">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_7_81HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_15_63HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_31_25HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_62_5HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_125HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_250HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_500HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.ACCELEROMETER_BANDWIDTH_1000HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.SENSOR_FUSION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.SENSOR_FUSION_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.SENSOR_FUSION_ON_WITHOUT_MAGNETOMETER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.SENSOR_FUSION_ON_WITHOUT_FAST_MAGNETOMETER_CALIBRATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIMUV3.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.AccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the acceleration
              for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.AccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.MagneticFieldCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetMagneticFieldCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the magnetic
              field for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.MagneticFieldEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.AngularVelocityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAngularVelocityCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the angular
              velocity for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.AngularVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.TemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean)" />. The parameter is the temperature.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.LinearAccelerationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetLinearAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              linear acceleration for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.LinearAccelerationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.GravityVectorCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetGravityVectorCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters gravity vector
              for the x, y and z axis.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.GravityVectorEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.OrientationCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetOrientationCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the orientation
              (heading (yaw), roll, pitch) of the IMU Brick in Euler angles. See
              <see cref="M:Tinkerforge.BrickletIMUV3.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" /> for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.OrientationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.QuaternionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetQuaternionCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the orientation
              (w, x, y, z) of the IMU Brick in quaternions. See <see cref="M:Tinkerforge.BrickletIMUV3.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)" />
              for details.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.QuaternionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIMUV3.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAllDataCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are as for
              <see cref="M:Tinkerforge.BrickletIMUV3.GetAllData(System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16@,System.Byte@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIMUV3.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated acceleration from the accelerometer for the
              x, y and z axis. The acceleration is in the range configured with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              If you want to get the acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.AccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated magnetic field from the magnetometer for the
              x, y and z axis.
              
              If you want to get the magnetic field periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.MagneticFieldCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetMagneticFieldCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the calibrated angular velocity from the gyroscope for the
              x, y and z axis. The angular velocity is in the range configured with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              If you want to get the angular velocity periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.AngularVelocityCallback" /> acallback nd set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAngularVelocityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetTemperature">
             <summary>
              Returns the temperature of the IMU Brick.
              The temperature is measured in the core of the BNO055 IC, it is not the
              ambient temperature
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetOrientation(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current orientation (heading, roll, pitch) of the IMU Brick as
              independent Euler angles. Note that Euler angles always
              experience a `gimbal lock &lt;https://en.wikipedia.org/wiki/Gimbal_lock&gt;`__.
              We recommend that you use quaternions instead, if you need the absolute
              orientation.
              
              If you want to get the orientation periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.OrientationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetOrientationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the linear acceleration of the IMU Brick for the
              x, y and z axis. The acceleration is in the range configured with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              The linear acceleration is the acceleration in each of the three
              axis of the IMU Brick with the influences of gravity removed.
              
              It is also possible to get the gravity vector with the influence of linear
              acceleration removed, see <see cref="M:Tinkerforge.BrickletIMUV3.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)" />.
              
              If you want to get the linear acceleration periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.LinearAccelerationCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetLinearAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current gravity vector of the IMU Brick for the
              x, y and z axis.
              
              The gravity vector is the acceleration that occurs due to gravity.
              Influences of additional linear acceleration are removed.
              
              It is also possible to get the linear acceleration with the influence
              of gravity removed, see <see cref="M:Tinkerforge.BrickletIMUV3.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)" />.
              
              If you want to get the gravity vector periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.GravityVectorCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetGravityVectorCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the current orientation (w, x, y, z) of the IMU Brick as
              `quaternions &lt;https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation&gt;`__.
              
              You have to divide the return values by 16383 (14 bit) to get
              the usual range of -1.0 to +1.0 for quaternions.
              
              If you want to get the quaternions periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.QuaternionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetQuaternionCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAllData(System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16[]@,System.Int16@,System.Byte@)">
             <summary>
              Return all of the available data of the IMU Brick.
              
              * acceleration (see <see cref="M:Tinkerforge.BrickletIMUV3.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)" />)
              * magnetic field (see <see cref="M:Tinkerforge.BrickletIMUV3.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)" />)
              * angular velocity (see <see cref="M:Tinkerforge.BrickletIMUV3.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)" />)
              * Euler angles (see <see cref="M:Tinkerforge.BrickletIMUV3.GetOrientation(System.Int16@,System.Int16@,System.Int16@)" />)
              * quaternion (see <see cref="M:Tinkerforge.BrickletIMUV3.GetQuaternion(System.Int16@,System.Int16@,System.Int16@,System.Int16@)" />)
              * linear acceleration (see <see cref="M:Tinkerforge.BrickletIMUV3.GetLinearAcceleration(System.Int16@,System.Int16@,System.Int16@)" />)
              * gravity vector (see <see cref="M:Tinkerforge.BrickletIMUV3.GetGravityVector(System.Int16@,System.Int16@,System.Int16@)" />)
              * temperature (see <see cref="M:Tinkerforge.BrickletIMUV3.GetTemperature" />)
              * calibration status (see below)
              
              The calibration status consists of four pairs of two bits. Each pair
              of bits represents the status of the current calibration.
              
              * bit 0-1: Magnetometer
              * bit 2-3: Accelerometer
              * bit 4-5: Gyroscope
              * bit 6-7: System
              
              A value of 0 means for "not calibrated" and a value of 3 means
              "fully calibrated". In your program you should always be able to
              ignore the calibration status, it is used by the calibration
              window of the Brick Viewer and it can be ignored after the first
              calibration. See the documentation in the calibration window for
              more information regarding the calibration of the IMU Brick.
              
              If you want to get the data periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletIMUV3.AllDataCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIMUV3.SetAllDataCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SaveCalibration">
             <summary>
              A call of this function saves the current calibration to be used
              as a starting point for the next restart of continuous calibration
              of the IMU Brick.
              
              A return value of *true* means that the calibration could be used and
              *false* means that it could not be used (this happens if the calibration
              status is not "fully calibrated").
              
              This function is used by the calibration window of the Brick Viewer, you
              should not need to call it in your program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the available sensor configuration for the Magnetometer, Gyroscope and
              Accelerometer. The Accelerometer Range is user selectable in all fusion modes,
              all other configurations are auto-controlled in fusion mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetSensorConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the sensor configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetSensorConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetSensorFusionMode(System.Byte)">
             <summary>
              If the fusion mode is turned off, the functions <see cref="M:Tinkerforge.BrickletIMUV3.GetAcceleration(System.Int16@,System.Int16@,System.Int16@)" />,
              <see cref="M:Tinkerforge.BrickletIMUV3.GetMagneticField(System.Int16@,System.Int16@,System.Int16@)" /> and <see cref="M:Tinkerforge.BrickletIMUV3.GetAngularVelocity(System.Int16@,System.Int16@,System.Int16@)" /> return uncalibrated
              and uncompensated sensor data. All other sensor data getters return no data.
              
              Since firmware version 2.0.6 you can also use a fusion mode without magnetometer.
              In this mode the calculated orientation is relative (with magnetometer it is
              absolute with respect to the earth). However, the calculation can't be influenced
              by spurious magnetic fields.
              
              Since firmware version 2.0.13 you can also use a fusion mode without fast
              magnetometer calibration. This mode is the same as the normal fusion mode,
              but the fast magnetometer calibration is turned off. So to find the orientation
              the first time will likely take longer, but small magnetic influences might
              not affect the automatic calibration as much.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetSensorFusionMode">
             <summary>
              Returns the sensor fusion mode as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetSensorFusionMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.AccelerationCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAccelerationCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetMagneticFieldCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.MagneticFieldCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetMagneticFieldCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetMagneticFieldCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetAngularVelocityCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.AngularVelocityCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAngularVelocityCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetAngularVelocityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.TemperatureCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetOrientationCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.OrientationCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetOrientationCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetOrientationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetLinearAccelerationCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.LinearAccelerationCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetLinearAccelerationCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetLinearAccelerationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetGravityVectorCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.GravityVectorCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetGravityVectorCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetGravityVectorCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetQuaternionCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.QuaternionCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetQuaternionCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetQuaternionCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetAllDataCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIMUV3.AllDataCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetAllDataCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetAllDataCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIMUV3.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIMUV3.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIMUV3.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIMUV3.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnMagneticFieldCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnAngularVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnLinearAccelerationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnGravityVectorCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnOrientationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnQuaternionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIMUV3.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16">
             <summary>
              16-channel digital input/output
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_PORT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_PORT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_PORT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_PORT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_PORT_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_PORT_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_PORT_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_PORT_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_SELECTED_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_SET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.DIRECTION_IN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.DIRECTION_OUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16.InterruptCallback">
             <summary>
              This callback is triggered whenever a change of the voltage level is detected
              on pins where the interrupt was activated with <see cref="M:Tinkerforge.BrickletIO16.SetPortInterrupt(System.Char,System.Byte)" />.
              
              The values are the port, a bitmask that specifies which interrupts occurred
              and the current value bitmask of the port.
              
              For example:
              
              * ('a', 1, 1) or ('a', 0b00000001, 0b00000001) means that on port A an
                interrupt on pin 0 occurred and currently pin 0 is high and pins 1-7 are low.
              * ('b', 129, 254) or ('b', 0b10000001, 0b11111110) means that on port B
                interrupts on pins 0 and 7 occurred and currently pin 0 is low and pins 1-7
                are high.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16.InterruptEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16.Interrupt">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the port, the involved pins and the current value of
              the pins (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetPort(System.Char,System.Byte)">
             <summary>
              Sets the output value (high or low) for a port ("a" or "b") with a bitmask
              (8bit). A 1 in the bitmask means high and a 0 in the bitmask means low.
              
              For example: The value 15 or 0b00001111 will turn the pins 0-3 high and the
              pins 4-7 low for the specified port.
              
              All running monoflop timers of the given port will be aborted if this function
              is called.
              
              <note>
               This function does nothing for pins that are configured as input.
               Pull-up resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO16.SetPortConfiguration(System.Char,System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetPort(System.Char)">
             <summary>
              Returns a bitmask of the values that are currently measured on the
              specified port. This function works if the pin is configured to input
              as well as if it is configured to output.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetPortConfiguration(System.Char,System.Byte,System.Char,System.Boolean)">
             <summary>
              Configures the value and direction of a specified port. Possible directions
              are 'i' and 'o' for input and output.
              
              If the direction is configured as output, the value is either high or low
              (set as *true* or *false*).
              
              If the direction is configured as input, the value is either pull-up or
              default (set as *true* or *false*).
              
              For example:
              
              * ('a', 255, 'i', true) or ('a', 0b11111111, 'i', true) will set all pins of port A as input pull-up.
              * ('a', 128, 'i', false) or ('a', 0b10000000, 'i', false) will set pin 7 of port A as input default (floating if nothing is connected).
              * ('b', 3, 'o', false) or ('b', 0b00000011, 'o', false) will set pins 0 and 1 of port B as output low.
              * ('b', 4, 'o', true) or ('b', 0b00000100, 'o', true) will set pin 2 of port B as output high.
              
              Running monoflop timers for the selected pins will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetPortConfiguration(System.Char,System.Byte@,System.Byte@)">
             <summary>
              Returns a direction bitmask and a value bitmask for the specified port. A 1 in
              the direction bitmask means input and a 0 in the bitmask means output.
              
              For example: A return value of (15, 51) or (0b00001111, 0b00110011) for
              direction and value means that:
              
              * pins 0 and 1 are configured as input pull-up,
              * pins 2 and 3 are configured as input default,
              * pins 4 and 5 are configured as output high
              * and pins 6 and 7 are configured as output low.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the debounce period of the <see cref="E:Tinkerforge.BrickletIO16.InterruptCallback" /> callback.
              
              For example: If you set this value to 100, you will get the interrupt
              maximal every 100ms. This is necessary if something that bounces is
              connected to the IO-16 Bricklet, such as a button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletIO16.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetPortInterrupt(System.Char,System.Byte)">
             <summary>
              Sets the pins on which an interrupt is activated with a bitmask.
              Interrupts are triggered on changes of the voltage level of the pin,
              i.e. changes from high to low and low to high.
              
              For example: ('a', 129) or ('a', 0b10000001) will enable the interrupt for
              pins 0 and 7 of port a.
              
              The interrupt is delivered with the <see cref="E:Tinkerforge.BrickletIO16.InterruptCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetPortInterrupt(System.Char)">
             <summary>
              Returns the interrupt bitmask for the specified port as set by
              <see cref="M:Tinkerforge.BrickletIO16.SetPortInterrupt(System.Char,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetPortMonoflop(System.Char,System.Byte,System.Byte,System.Int64)">
             <summary>
              Configures a monoflop of the pins specified by the second parameter as 8 bit
              long bitmask. The specified pins must be configured for output. Non-output
              pins will be ignored.
              
              The third parameter is a bitmask with the desired value of the specified
              output pins. A 1 in the bitmask means high and a 0 in the bitmask means low.
              
              The forth parameter indicates the time that the pins should hold
              the value.
              
              If this function is called with the parameters ('a', 9, 1, 1500) or
              ('a', 0b00001001, 0b00000001, 1500): Pin 0 will get high and pin 3 will get
              low on port 'a'. In 1.5s pin 0 will get low and pin 3 will get high again.
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and an IO-16 Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds and pin 0 set to high. Pin 0 will be high all the time. If now
              the RS485 connection is lost, then pin 0 will get low in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetPortMonoflop(System.Char,System.Byte,System.Byte@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given pin) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIO16.SetPortMonoflop(System.Char,System.Byte,System.Byte,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetSelectedValues(System.Char,System.Byte,System.Byte)">
             <summary>
              Sets the output value (high or low) for a port ("a" or "b" with a bitmask,
              according to the selection mask. The bitmask is 8 bit long and a 1 in the
              bitmask means high and a 0 in the bitmask means low.
              
              For example: The parameters ('a', 192, 128) or ('a', 0b11000000, 0b10000000)
              will turn pin 7 high and pin 6 low on port A, pins 0-6 will remain untouched.
              
              Running monoflop timers for the selected pins will be aborted if this
              function is called.
              
              <note>
               This function does nothing for pins that are configured as input.
               Pull-up resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO16.SetPortConfiguration(System.Char,System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected pin on port A.
              You can configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIO16.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for the selected pin of port A. Pins 0 and 1
              are available for edge counting.
              
              The edge type parameter configures if rising edges, falling edges or
              both are counted if the pin is configured for input. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetEdgeCountConfig(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected pin of port A as set by
              <see cref="M:Tinkerforge.BrickletIO16.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.OnInterruptCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16V2">
             <summary>
              16-channel digital input/output
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_ALL_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_ALL_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.DIRECTION_IN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.DIRECTION_OUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO16V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16V2.InputValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
              
              The parameters are the channel, a value-changed indicator and the actual value
              for the channel. The `changed` parameter is true if the value has changed since
              the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16V2.InputValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16V2.AllInputValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIO16V2.GetValue" />. Additional the
              `changed` parameter is true if the value has changed since
              the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16V2.AllInputValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO16V2.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the channel and the current value of the channel
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO16V2.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetValue(System.Boolean[])">
             <summary>
              Sets the output value of all sixteen channels. A value of *true* or *false* outputs
              logic 1 or logic 0 respectively on the corresponding channel.
              
              Use <see cref="M:Tinkerforge.BrickletIO16V2.SetSelectedValue(System.Byte,System.Boolean)" /> to change only one output channel state.
              
              For example: (True, True, False, False, ..., False) will turn the channels 0-1
              high and the channels 2-15 low.
              
              All running monoflop timers will be aborted if this function is called.
              
              <note>
               This function does nothing for channels that are configured as input. Pull-up
               resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO16V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetValue">
             <summary>
              Returns the logic levels that are currently measured on the channels.
              This function works if the channel is configured as input as well as if it is
              configured as output.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the output value of a specific channel without affecting the other channels.
              
              A running monoflop timer for the specific channel will be aborted if this
              function is called.
              
              <note>
               This function does nothing for channels that are configured as input. Pull-up
               resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO16V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetConfiguration(System.Byte,System.Char,System.Boolean)">
             <summary>
              Configures the value and direction of a specific channel. Possible directions
              are 'i' and 'o' for input and output.
              
              If the direction is configured as output, the value is either high or low
              (set as *true* or *false*).
              
              If the direction is configured as input, the value is either pull-up or
              default (set as *true* or *false*).
              
              For example:
              
              * (0, 'i', true) will set channel-0 as input pull-up.
              * (1, 'i', false) will set channel-1 as input default (floating if nothing is connected).
              * (2, 'o', true) will set channel-2 as output high.
              * (3, 'o', false) will set channel-3 as output low.
              
              A running monoflop timer for the specific channel will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetConfiguration(System.Byte,System.Char@,System.Boolean@)">
             <summary>
              Returns the channel configuration as set by <see cref="M:Tinkerforge.BrickletIO16V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)">
             <summary>
              This callback can be configured per channel.
              
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIO16V2.InputValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetInputValueCallbackConfiguration(System.Byte,System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIO16V2.AllInputValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetAllInputValueCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              Configures a monoflop of the specified channel.
              
              The second parameter is the desired value of the specified
              channel. A *true* means relay closed and a *false* means relay open.
              
              The third parameter indicates the time that the channels should hold
              the value.
              
              If this function is called with the parameters (0, 1, 1500) channel 0 will
              close and in 1.5s channel 0 will open again
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and a IO-16 Bricklet 2.0 connected to one of
              the slave stacks. You can now call this function every second, with a time
              parameter of two seconds and channel 0 closed. Channel 0 will be closed all the
              time. If now the RS485 connection is lost, then channel 0 will be opened in at
              most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given channel) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected channel. You can
              configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIO16V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for a specific channel.
              
              The edge type parameter configures if rising edges, falling edges or
              both are counted if the channel is configured for input. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetEdgeCountConfiguration(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected channel as set by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIO16V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIO16V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIO16V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIO16V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.OnInputValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.OnAllInputValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO16V2.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4">
             <summary>
              4-channel digital input/output
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_SELECTED_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_SET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.DIRECTION_IN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.DIRECTION_OUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4.InterruptCallback">
             <summary>
              This callback is triggered whenever a change of the voltage level is detected
              on pins where the interrupt was activated with <see cref="M:Tinkerforge.BrickletIO4.SetInterrupt(System.Byte)" />.
              
              The values are a bitmask that specifies which interrupts occurred
              and the current value bitmask.
              
              For example:
              
              * (1, 1) or (0b0001, 0b0001) means that an interrupt on pin 0 occurred and
                currently pin 0 is high and pins 1-3 are low.
              * (9, 14) or (0b1001, 0b1110) means that interrupts on pins 0 and 3
                occurred and currently pin 0 is low and pins 1-3 are high.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4.InterruptEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4.Interrupt">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the involved pins and the current value of the pins
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetValue(System.Byte)">
             <summary>
              Sets the output value (high or low) with a bitmask (4bit). A 1 in the bitmask
              means high and a 0 in the bitmask means low.
              
              For example: The value 3 or 0b0011 will turn the pins 0-1 high and the
              pins 2-3 low.
              
              All running monoflop timers will be aborted if this function is called.
              
              <note>
               This function does nothing for pins that are configured as input.
               Pull-up resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO4.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetValue">
             <summary>
              Returns a bitmask of the values that are currently measured.
              This function works if the pin is configured to input
              as well as if it is configured to output.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetConfiguration(System.Byte,System.Char,System.Boolean)">
             <summary>
              Configures the value and direction of the specified pins. Possible directions
              are 'i' and 'o' for input and output.
              
              If the direction is configured as output, the value is either high or low
              (set as *true* or *false*).
              
              If the direction is configured as input, the value is either pull-up or
              default (set as *true* or *false*).
              
              For example:
              
              * (15, 'i', true) or (0b1111, 'i', true) will set all pins of as input pull-up.
              * (8, 'i', false) or (0b1000, 'i', false) will set pin 3 of as input default (floating if nothing is connected).
              * (3, 'o', false) or (0b0011, 'o', false) will set pins 0 and 1 as output low.
              * (4, 'o', true) or (0b0100, 'o', true) will set pin 2 of as output high.
              
              Running monoflop timers for the specified pins will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns a value bitmask and a direction bitmask. A 1 in the direction bitmask
              means input and a 0 in the bitmask means output.
              
              For example: A return value of (3, 5) or (0b0011, 0b0101) for direction and
              value means that:
              
              * pin 0 is configured as input pull-up,
              * pin 1 is configured as input default,
              * pin 2 is configured as output high and
              * pin 3 is are configured as output low.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the debounce period of the <see cref="E:Tinkerforge.BrickletIO4.InterruptCallback" /> callback.
              
              For example: If you set this value to 100, you will get the interrupt
              maximal every 100ms. This is necessary if something that bounces is
              connected to the IO-4 Bricklet, such as a button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletIO4.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetInterrupt(System.Byte)">
             <summary>
              Sets the pins on which an interrupt is activated with a bitmask.
              Interrupts are triggered on changes of the voltage level of the pin,
              i.e. changes from high to low and low to high.
              
              For example: An interrupt bitmask of 10 or 0b1010 will enable the interrupt for
              pins 1 and 3.
              
              The interrupt is delivered with the <see cref="E:Tinkerforge.BrickletIO4.InterruptCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetInterrupt">
             <summary>
              Returns the interrupt bitmask as set by <see cref="M:Tinkerforge.BrickletIO4.SetInterrupt(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetMonoflop(System.Byte,System.Byte,System.Int64)">
             <summary>
              Configures a monoflop of the pins specified by the first parameter as 4 bit
              long bitmask. The specified pins must be configured for output. Non-output
              pins will be ignored.
              
              The second parameter is a bitmask with the desired value of the specified
              output pins. A 1 in the bitmask means high and a 0 in the bitmask means low.
              
              The third parameter indicates the time that the pins should hold
              the value.
              
              If this function is called with the parameters (9, 1, 1500) or
              (0b1001, 0b0001, 1500): Pin 0 will get high and pin 3 will get low. In 1.5s pin
              0 will get low and pin 3 will get high again.
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and an IO-4 Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds and pin 0 set to high. Pin 0 will be high all the time. If now
              the RS485 connection is lost, then pin 0 will get low in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetMonoflop(System.Byte,System.Byte@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given pin) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIO4.SetMonoflop(System.Byte,System.Byte,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetSelectedValues(System.Byte,System.Byte)">
             <summary>
              Sets the output value (high or low) with a bitmask, according to
              the selection mask. The bitmask is 4 bit long, *true* refers to high
              and *false* refers to low.
              
              For example: The parameters (9, 4) or (0b0110, 0b0100) will turn
              pin 1 low and pin 2 high, pin 0 and 3 will remain untouched.
              
              Running monoflop timers for the selected pins will be aborted if this
              function is called.
              
              <note>
               This function does nothing for pins that are configured as input.
               Pull-up resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO4.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected pin. You can
              configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIO4.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for the selected pins.
              
              The edge type parameter configures if rising edges, falling edges or
              both are counted if the pin is configured for input. Possible edge types are:
              
              * 0 = rising (default)
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetEdgeCountConfig(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected pin as set by
              <see cref="M:Tinkerforge.BrickletIO4.SetEdgeCountConfig(System.Byte,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.OnInterruptCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4V2">
             <summary>
              4-channel digital input/output
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_ALL_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_ALL_INPUT_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_PWM_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_PWM_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.DIRECTION_IN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.DIRECTION_OUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIO4V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4V2.InputValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
              
              The parameters are the channel, a value-changed indicator and the actual value
              for the channel. The `changed` parameter is true if the value has changed since
              the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4V2.InputValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4V2.AllInputValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIO4V2.GetValue" />. Additional the
              `changed` parameter is true if the value has changed since
              the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4V2.AllInputValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIO4V2.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the channel and the current value of the channel
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIO4V2.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetValue(System.Boolean[])">
             <summary>
              Sets the output value of all four channels. A value of *true* or *false* outputs
              logic 1 or logic 0 respectively on the corresponding channel.
              
              Use <see cref="M:Tinkerforge.BrickletIO4V2.SetSelectedValue(System.Byte,System.Boolean)" /> to change only one output channel state.
              
              For example: (True, True, False, False) will turn the channels 0-1 high and the
              channels 2-3 low.
              
              All running monoflop timers and PWMs will be aborted if this function is called.
              
              <note>
               This function does nothing for channels that are configured as input. Pull-up
               resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO4V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetValue">
             <summary>
              Returns the logic levels that are currently measured on the channels.
              This function works if the channel is configured as input as well as if it is
              configured as output.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the output value of a specific channel without affecting the other channels.
              
              A running monoflop timer or PWM for the specific channel will be aborted if this
              function is called.
              
              <note>
               This function does nothing for channels that are configured as input. Pull-up
               resistors can be switched on with <see cref="M:Tinkerforge.BrickletIO4V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetConfiguration(System.Byte,System.Char,System.Boolean)">
             <summary>
              Configures the value and direction of a specific channel. Possible directions
              are 'i' and 'o' for input and output.
              
              If the direction is configured as output, the value is either high or low
              (set as *true* or *false*).
              
              If the direction is configured as input, the value is either pull-up or
              default (set as *true* or *false*).
              
              For example:
              
              * (0, 'i', true) will set channel 0 as input pull-up.
              * (1, 'i', false) will set channel 1 as input default (floating if nothing is connected).
              * (2, 'o', true) will set channel 2 as output high.
              * (3, 'o', false) will set channel 3 as output low.
              
              A running monoflop timer or PWM for the specific channel will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetConfiguration(System.Byte,System.Char@,System.Boolean@)">
             <summary>
              Returns the channel configuration as set by <see cref="M:Tinkerforge.BrickletIO4V2.SetConfiguration(System.Byte,System.Char,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)">
             <summary>
              This callback can be configured per channel.
              
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIO4V2.InputValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetInputValueCallbackConfiguration(System.Byte,System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration for the given channel as set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetInputValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIO4V2.AllInputValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetAllInputValueCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetAllInputValueCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              The first parameter is the desired state of the channel (*true* means output *high*
              and *false* means output *low*). The second parameter indicates the time that
              the channel should hold the state.
              
              If this function is called with the parameters (true, 1500):
              The channel will turn on and in 1.5s it will turn off again.
              
              A PWM for the selected channel will be aborted if this function is called.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a IO-4 Bricklet 2.0 is connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds. The channel will be *high* all the time. If now the RS485
              connection is lost, the channel will turn *low* in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given channel) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected channel. You can
              configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIO4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
              
              <note>
               Calling this function is only allowed for channels configured as input.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for a specific channel.
              
              The edge type parameter configures if rising edges, falling edges or
              both are counted if the channel is configured for input. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
              
              <note>
               Calling this function is only allowed for channels configured as input.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetEdgeCountConfiguration(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected channel as set by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              <note>
               Calling this function is only allowed for channels configured as input.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetPWMConfiguration(System.Byte,System.Int64,System.Int32)">
             <summary>
              Activates a PWM for the given channel.
              
              You need to set the channel to output before you call this function, otherwise it will
              report an invalid parameter error. To turn the PWM off again, you can set the frequency to 0 or any other
              function that changes a value of the channel (e.g. <see cref="M:Tinkerforge.BrickletIO4V2.SetSelectedValue(System.Byte,System.Boolean)" />).
              
              A running monoflop timer for the given channel will be aborted if this function
              is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetPWMConfiguration(System.Byte,System.Int64@,System.Int32@)">
             <summary>
              Returns the PWM configuration as set by <see cref="M:Tinkerforge.BrickletIO4V2.SetPWMConfiguration(System.Byte,System.Int64,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIO4V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIO4V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIO4V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIO4V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.OnInputValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.OnAllInputValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIO4V2.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialAnalogOut">
             <summary>
              Generates configurable DC voltage and current, 0V to 10V and 4mA to 20mA
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_DISABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_IS_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_SET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_SET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.VOLTAGE_RANGE_0_TO_5V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.VOLTAGE_RANGE_0_TO_10V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.CURRENT_RANGE_4_TO_20MA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.CURRENT_RANGE_0_TO_20MA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOut.CURRENT_RANGE_0_TO_24MA">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.Enable">
             <summary>
              Enables the output of voltage and current.
              
              The default is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.Disable">
             <summary>
              Disables the output of voltage and current.
              
              The default is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.IsEnabled">
             <summary>
              Returns *true* if output of voltage and current is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.SetVoltage(System.Int32)">
             <summary>
              Sets the output voltage.
              
              The output voltage and output current are linked. Changing the output voltage
              also changes the output current.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.GetVoltage">
             <summary>
              Returns the voltage as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOut.SetVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.SetCurrent(System.Int32)">
             <summary>
              Sets the output current.
              
              The output current and output voltage are linked. Changing the output current
              also changes the output voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.GetCurrent">
             <summary>
              Returns the current as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOut.SetCurrent(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Configures the voltage and current range.
              
              Possible voltage ranges are:
              
              * 0V to 5V
              * 0V to 10V
              
              Possible current ranges are:
              
              * 4mA to 20mA
              * 0mA to 20mA
              * 0mA to 24mA
              
              The resolution will always be 12 bit. This means, that the
              precision is higher with a smaller range.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOut.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOut.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialAnalogOutV2">
             <summary>
              Generates configurable DC voltage and current, 0V to 10V and 4mA to 20mA
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_OUT_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_OUT_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_OUT_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_OUT_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.VOLTAGE_RANGE_0_TO_5V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.VOLTAGE_RANGE_0_TO_10V">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.CURRENT_RANGE_4_TO_20MA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.CURRENT_RANGE_0_TO_20MA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.CURRENT_RANGE_0_TO_24MA">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_CONFIG_SHOW_OUT_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_STATUS_CONFIG_THRESHOLD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.OUT_LED_STATUS_CONFIG_INTENSITY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialAnalogOutV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetEnabled(System.Boolean)">
             <summary>
              Enables/disables the output of voltage and current.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetEnabled">
             <summary>
              Returns *true* if output of voltage and current is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetVoltage(System.Int32)">
             <summary>
              Sets the output voltage.
              
              The output voltage and output current are linked. Changing the output voltage
              also changes the output current.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetVoltage">
             <summary>
              Returns the voltage as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetCurrent(System.Int32)">
             <summary>
              Sets the output current.
              
              The output current and output voltage are linked. Changing the output current
              also changes the output voltage.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetCurrent">
             <summary>
              Returns the current as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetCurrent(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Configures the voltage and current range.
              
              Possible voltage ranges are:
              
              * 0V to 5V
              * 0V to 10V
              
              Possible current ranges are:
              
              * 4mA to 20mA
              * 0mA to 20mA
              * 0mA to 24mA
              
              The resolution will always be 12 bit. This means, that the
              precision is higher with a smaller range.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDConfig(System.Byte)">
             <summary>
              You can turn the Out LED off, on or show a
              heartbeat. You can also set the LED to "Out Status". In this mode the
              LED can either be turned on with a pre-defined threshold or the intensity
              of the LED can change with the output value (voltage or current).
              
              You can configure the channel status behavior with <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDStatusConfig(System.Int32,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetOutLEDConfig">
             <summary>
              Returns the Out LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDStatusConfig(System.Int32,System.Int32,System.Byte)">
             <summary>
              Sets the Out LED status config. This config is used if the Out LED is
              configured as "Out Status", see <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDConfig(System.Byte)" />.
              
              For each channel you can choose between threshold and intensity mode.
              
              In threshold mode you can define a positive or a negative threshold.
              For a positive threshold set the "min" parameter to the threshold value in mV or
              µA above which the LED should turn on and set the "max" parameter to 0. Example:
              If you set a positive threshold of 5V, the LED will turn on as soon as the
              output value exceeds 5V and turn off again if it goes below 5V.
              For a negative threshold set the "max" parameter to the threshold value in mV or
              µA below which the LED should turn on and set the "min" parameter to 0. Example:
              If you set a negative threshold of 5V, the LED will turn on as soon as the
              output value goes below 5V and the LED will turn off when the output value
              exceeds 5V.
              
              In intensity mode you can define a range mV or µA that is used to scale the brightness
              of the LED. Example with min=2V, max=8V: The LED is off at 2V and below, on at
              8V and above and the brightness is linearly scaled between the values 2V and 8V.
              If the min value is greater than the max value, the LED brightness is scaled the
              other way around.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetOutLEDStatusConfig(System.Int32@,System.Int32@,System.Byte@)">
             <summary>
              Returns the Out LED status configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetOutLEDStatusConfig(System.Int32,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialAnalogOutV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialAnalogOutV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialCounter">
             <summary>
              4 channel counter up to 4MHz
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_ALL_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_ALL_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_SIGNAL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_ALL_SIGNAL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_COUNTER_ACTIVE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_ALL_COUNTER_ACTIVE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_COUNTER_ACTIVE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_ALL_COUNTER_ACTIVE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_COUNTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_COUNTER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_ALL_COUNTER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_ALL_COUNTER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_ALL_SIGNAL_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_ALL_SIGNAL_DATA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_0">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_EDGE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_EDGE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_EDGE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_DIRECTION_UP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_DIRECTION_DOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_DIRECTION_EXTERNAL_UP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.COUNT_DIRECTION_EXTERNAL_DOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_512">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_1024">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_2048">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_4096">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_8192">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_16384">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.DUTY_CYCLE_PRESCALER_32768">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_128_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_256_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_512_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_1024_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_2048_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_4096_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_8192_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_16384_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.FREQUENCY_INTEGRATION_TIME_32768_MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialCounter.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialCounter.AllCounterCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetAllCounterCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIndustrialCounter.GetAllCounter" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialCounter.AllCounterEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialCounter.AllSignalDataCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetAllSignalDataCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIndustrialCounter.GetAllSignalData(System.Int32[]@,System.Int64[]@,System.Int64[]@,System.Boolean[]@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialCounter.AllSignalDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetCounter(System.Byte)">
             <summary>
              Returns the current counter value for the given channel.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetAllCounter">
             <summary>
              Returns the current counter values for all four channels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetCounter(System.Byte,System.Int64)">
             <summary>
              Sets the counter value for the given channel.
              
              The default value for the counters on startup is 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetAllCounter(System.Int64[])">
             <summary>
              Sets the counter values for all four channels.
              
              The default value for the counters on startup is 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetSignalData(System.Byte,System.Int32@,System.Int64@,System.Int64@,System.Boolean@)">
             <summary>
              Returns the signal data (duty cycle, period, frequency and value) for the
              given channel.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetAllSignalData(System.Int32[]@,System.Int64[]@,System.Int64[]@,System.Boolean[]@)">
             <summary>
              Returns the signal data (duty cycle, period, frequency and value) for all four
              channels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetCounterActive(System.Byte,System.Boolean)">
             <summary>
              Activates/deactivates the counter of the given channel.
              
              true = activate, false = deactivate.
              
              By default all channels are activated.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetAllCounterActive(System.Boolean[])">
             <summary>
              Activates/deactivates the counter of all four channels.
              
              true = activate, false = deactivate.
              
              By default all channels are activated.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetCounterActive(System.Byte)">
             <summary>
              Returns the activation state of the given channel.
              
              true = activated, false = deactivated.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetAllCounterActive">
             <summary>
              Returns the activation state of all four channels.
              
              true = activated, false = deactivated.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetCounterConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the counter configuration for the given channel.
              
              * Count Edge: Counter can count on rising, falling or both edges.
              * Count Direction: Counter can count up or down. You can also use
                another channel as direction input, see
                `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Industrial_Counter.html#external-count-direction&gt;`__
                for details.
              * Duty Cycle Prescaler: Sets a divider for the internal clock. See
                `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Industrial_Counter.html#duty-cycle-prescaler-and-frequency-integration-time&gt;`__
                for details.
              * Frequency Integration Time: Sets the integration time for the
                frequency measurement. See
                `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Industrial_Counter.html#duty-cycle-prescaler-and-frequency-integration-time&gt;`__
                for details.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetCounterConfiguration(System.Byte,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the counter configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetCounterConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetAllCounterCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialCounter.AllCounterCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetAllCounterCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetAllCounterCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetAllSignalDataCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialCounter.AllSignalDataCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetAllSignalDataCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetAllSignalDataCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED is on if the channel is high and off otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialCounter.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialCounter.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.OnAllCounterCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialCounter.OnAllSignalDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalIn4">
             <summary>
              4 galvanically isolated digital inputs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_SET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_AVAILABLE_FOR_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_SET_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_INTERRUPT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_SET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_EDGE_COUNT_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalIn4.InterruptCallback">
             <summary>
              This callback is triggered whenever a change of the voltage level is detected
              on pins where the interrupt was activated with <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetInterrupt(System.Int32)" />.
              
              The values are a bitmask that specifies which interrupts occurred
              and the current value bitmask.
              
              For example:
              
              * (1, 1) or (0b0001, 0b0001) means that an interrupt on pin 0 occurred and
                currently pin 0 is high and pins 1-3 are low.
              * (9, 14) or (0b1001, 0b1110) means that interrupts on pins 0 and 3
                occurred and currently pin 0 is low and pins 1-3 are high.
              
              The interrupts use the grouping as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalIn4.InterruptEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalIn4.Interrupt">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetValue">
             <summary>
              Returns the input value with a bitmask. The bitmask is 16bit long, *true*
              refers to high and *false* refers to low.
              
              For example: The value 3 or 0b0011 means that pins 0-1 are high and the other
              pins are low.
              
              If no groups are used (see <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />), the pins correspond to the
              markings on the IndustrialDigital In 4 Bricklet.
              
              If groups are used, the pins correspond to the element in the group.
              Element 1 in the group will get pins 0-3, element 2 pins 4-7, element 3
              pins 8-11 and element 4 pins 12-15.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])">
             <summary>
              Sets a group of Digital In 4 Bricklets that should work together. You can
              find Bricklets that can be grouped together with <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetAvailableForGroup" />.
              
              The group consists of 4 elements. Element 1 in the group will get pins 0-3,
              element 2 pins 4-7, element 3 pins 8-11 and element 4 pins 12-15.
              
              Each element can either be one of the ports ('a' to 'd') or 'n' if it should
              not be used.
              
              For example: If you have two Digital In 4 Bricklets connected to port A and
              port B respectively, you could call with ``['a', 'b', 'n', 'n']``.
              
              Now the pins on the Digital In 4 on port A are assigned to 0-3 and the
              pins on the Digital In 4 on port B are assigned to 4-7. It is now possible
              to call <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetValue" /> and read out two Bricklets at the same time.
              
              Changing the group configuration resets all edge counter configurations
              and values.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetGroup">
             <summary>
              Returns the group as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetAvailableForGroup">
             <summary>
              Returns a bitmask of ports that are available for grouping. For example the
              value 5 or 0b0101 means: Port A and port C are connected to Bricklets that
              can be grouped together.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the debounce period of the <see cref="E:Tinkerforge.BrickletIndustrialDigitalIn4.InterruptCallback" /> callback.
              
              For example: If you set this value to 100, you will get the interrupt
              maximal every 100ms. This is necessary if something that bounces is
              connected to the Digital In 4 Bricklet, such as a button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetInterrupt(System.Int32)">
             <summary>
              Sets the pins on which an interrupt is activated with a bitmask.
              Interrupts are triggered on changes of the voltage level of the pin,
              i.e. changes from high to low and low to high.
              
              For example: An interrupt bitmask of 9 or 0b1001 will enable the interrupt for
              pins 0 and 3.
              
              The interrupts use the grouping as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />.
              
              The interrupt is delivered with the <see cref="E:Tinkerforge.BrickletIndustrialDigitalIn4.InterruptCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetInterrupt">
             <summary>
              Returns the interrupt bitmask as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetInterrupt(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected pin. You can
              configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetEdgeCountConfig(System.Int32,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
              
              The edge counters use the grouping as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetEdgeCountConfig(System.Int32,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for the selected pins. A bitmask of 9 or 0b1001 will
              enable the edge counter for pins 0 and 3.
              
              The edge type parameter configures if rising edges, falling edges or
              both are counted if the pin is configured for input. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
              
              The edge counters use the grouping as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetGroup(System.Char[])" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetEdgeCountConfig(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected pin as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4.SetEdgeCountConfig(System.Int32,System.Byte,System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4.OnInterruptCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalIn4V2">
             <summary>
              4 galvanically isolated digital inputs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_ALL_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_ALL_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_EDGE_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_EDGE_COUNT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_0">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.EDGE_TYPE_RISING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.EDGE_TYPE_FALLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.EDGE_TYPE_BOTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalIn4V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalIn4V2.ValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
              
              The parameters are the channel, a value-changed indicator and the actual
              value for the channel. The `changed` parameter is true if the value has changed
              since the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalIn4V2.ValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalIn4V2.AllValueCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetAllValueCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetValue" />. Additional the
              `changed` parameter is true if the value has changed since
              the last callback.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalIn4V2.AllValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetValue">
             <summary>
              Returns the input value as bools, *true* refers to high and *false* refers to low.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)">
             <summary>
              This callback can be configured per channel.
              
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDigitalIn4V2.ValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetValueCallbackConfiguration(System.Byte,System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration for the given channel as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetValueCallbackConfiguration(System.Byte,System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetAllValueCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDigitalIn4V2.AllValueCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetAllValueCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetAllValueCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetEdgeCount(System.Byte,System.Boolean)">
             <summary>
              Returns the current value of the edge counter for the selected channel. You can
              configure the edges that are counted with <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
              
              If you set the reset counter to *true*, the count is set back to 0
              directly after it is read.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Configures the edge counter for a specific channel.
              
              The edge type parameter configures if rising edges, falling edges or both are
              counted. Possible edge types are:
              
              * 0 = rising
              * 1 = falling
              * 2 = both
              
              Configuring an edge counter resets its value to 0.
              
              If you don't know what any of this means, just leave it at default. The
              default configuration is very likely OK for you.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetEdgeCountConfiguration(System.Byte,System.Byte@,System.Byte@)">
             <summary>
              Returns the edge type and debounce time for the selected channel as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetEdgeCountConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED is on if the channel is high and off otherwise.
              
              By default all channel LEDs are configured as "Channel Status".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.OnValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalIn4V2.OnAllValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalOut4">
             <summary>
              4 galvanically isolated digital outputs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_SET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_GET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_GET_AVAILABLE_FOR_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_SET_SELECTED_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalOut4.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the involved pins and the current value of the pins
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalOut4.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalOut4.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetValue(System.Int32)">
             <summary>
              Sets the output value with a bitmask (16bit). A 1 in the bitmask means high
              and a 0 in the bitmask means low.
              
              For example: The value 3 or 0b0011 will turn pins 0-1 high and the other pins
              low.
              
              If no groups are used (see <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetGroup(System.Char[])" />), the pins correspond to the
              markings on the Industrial Digital Out 4 Bricklet.
              
              If groups are used, the pins correspond to the element in the group.
              Element 1 in the group will get pins 0-3, element 2 pins 4-7, element 3
              pins 8-11 and element 4 pins 12-15.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetValue">
             <summary>
              Returns the bitmask as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetValue(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetMonoflop(System.Int32,System.Int32,System.Int64)">
             <summary>
              Configures a monoflop of the pins specified by the first parameter
              bitmask.
              
              The second parameter is a bitmask with the desired value of the specified
              pins. A 1 in the bitmask means high and a 0 in the bitmask means low.
              
              The third parameter indicates the time that the pins should hold
              the value.
              
              If this function is called with the parameters (9, 1, 1500) or
              (0b1001, 0b0001, 1500): Pin 0 will get high and pin 3 will get low. In 1.5s
              pin 0 will get low and pin 3 will get high again.
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and a Digital Out 4 Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds and pin 0 high. Pin 0 will be high all the time. If now
              the RS485 connection is lost, then pin 0 will turn low in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetMonoflop(System.Byte,System.Int32@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given pin) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetMonoflop(System.Int32,System.Int32,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetGroup(System.Char[])">
             <summary>
              Sets a group of Digital Out 4 Bricklets that should work together. You can
              find Bricklets that can be grouped together with <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetAvailableForGroup" />.
              
              The group consists of 4 elements. Element 1 in the group will get pins 0-3,
              element 2 pins 4-7, element 3 pins 8-11 and element 4 pins 12-15.
              
              Each element can either be one of the ports ('a' to 'd') or 'n' if it should
              not be used.
              
              For example: If you have two Digital Out 4 Bricklets connected to port A and
              port B respectively, you could call with ``['a', 'b', 'n', 'n']``.
              
              Now the pins on the Digital Out 4 on port A are assigned to 0-3 and the
              pins on the Digital Out 4 on port B are assigned to 4-7. It is now possible
              to call <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetValue(System.Int32)" /> and control two Bricklets at the same time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetGroup">
             <summary>
              Returns the group as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetGroup(System.Char[])" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetAvailableForGroup">
             <summary>
              Returns a bitmask of ports that are available for grouping. For example the
              value 5 or 0b0101 means: Port A and port C are connected to Bricklets that
              can be grouped together.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetSelectedValues(System.Int32,System.Int32)">
             <summary>
              Sets the output value with a bitmask, according to the selection mask.
              The bitmask is 16 bit long, *true* refers to high and *false* refers to
              low.
              
              For example: The values (3, 1) or (0b0011, 0b0001) will turn pin 0 high, pin 1
              low the other pins remain untouched.
              
              If no groups are used (see <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4.SetGroup(System.Char[])" />), the pins correspond to the
              markings on the Industrial Digital Out 4 Bricklet.
              
              If groups are used, the pins correspond to the element in the group.
              Element 1 in the group will get pins 0-3, element 2 pins 4-7, element 3
              pins 8-11 and element 4 pins 12-15.
              
              Running monoflop timers for the selected pins will be aborted if this function
              is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalOut4V2">
             <summary>
              4 galvanically isolated digital outputs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_PWM_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_PWM_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDigitalOut4V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDigitalOut4V2.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the channel and the current value of the channel
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDigitalOut4V2.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetValue(System.Boolean[])">
             <summary>
              Sets the output value of all four channels. A value of *true* or *false* outputs
              logic 1 or logic 0 respectively on the corresponding channel.
              
              Use <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetSelectedValue(System.Byte,System.Boolean)" /> to change only one output channel state.
              
              All running monoflop timers and PWMs will be aborted if this function is called.
              
              For example: (True, True, False, False) will turn the channels 0-1 high and the
              channels 2-3 low.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetValue">
             <summary>
              Returns the logic levels that are currently output on the channels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the output value of a specific channel without affecting the other channels.
              
              A running monoflop timer or PWM for the specified channel will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              The first parameter is the desired state of the channel (*true* means output *high*
              and *false* means output *low*). The second parameter indicates the time that
              the channel should hold the state.
              
              If this function is called with the parameters (true, 1500):
              The channel will turn on and in 1.5s it will turn off again.
              
              A PWM for the selected channel will be aborted if this function is called.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a IO-4 Bricklet is connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds. The channel will be *high* all the time. If now the RS485
              connection is lost, the channel will turn *low* in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given channel) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED is on if the channel is high and off otherwise.
              
              By default all channel LEDs are configured as "Channel Status".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetPWMConfiguration(System.Byte,System.Int64,System.Int32)">
             <summary>
              Activates a PWM for the given channel.
              
              To turn the PWM off again, you can set the frequency to 0 or any other
              function that changes a value of the channel (e.g. <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetSelectedValue(System.Byte,System.Boolean)" />).
              
              The optocoupler of the Industrial Digital
              Out 4 Bricklet 2.0 has a rise time and fall time of 11.5us (each) at 24V. So the maximum
              useful frequency value is about 400000 (40kHz).
              
              A running monoflop timer for the given channel will be aborted if this function
              is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetPWMConfiguration(System.Byte,System.Int64@,System.Int32@)">
             <summary>
              Returns the PWM configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetPWMConfiguration(System.Byte,System.Int64,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDigitalOut4V2.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDual020mA">
             <summary>
              Measures two DC currents between 0mA and 20mA (IEC 60381-1)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_SET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_SET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_SET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.SAMPLE_RATE_240_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.SAMPLE_RATE_60_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.SAMPLE_RATE_15_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mA.SAMPLE_RATE_4_SPS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackPeriod(System.Byte,System.Int64)" />. The parameter is the current of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentCallback" /> callback is only triggered if the current has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDual020mA.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDual020mA.Current">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the current of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDual020mA.CurrentReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetCurrent(System.Byte)">
             <summary>
              Returns the current of the specified sensor.
              
              It is possible to detect if an IEC 60381-1 compatible sensor is connected
              and if it works properly.
              
              If the returned current is below 4mA, there is likely no sensor connected
              or the sensor may be defect. If the returned current is over 20mA, there might
              be a short circuit or the sensor may be defect.
              
              If you want to get the current periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackPeriod(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackPeriod(System.Byte,System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentCallback" /> callback is triggered
              periodically for the given sensor. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentCallback" /> callback is only triggered if the current has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetCurrentCallbackPeriod(System.Byte)">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackPeriod(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentReachedCallback" /> callback for the given
              sensor.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the current is *outside* the min and max values"
               "'i'",    "Callback is triggered when the current is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the current is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the current is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetCurrentCallbackThreshold(System.Byte,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletIndustrialDual020mA.CurrentReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetCurrentCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.SetSampleRate(System.Byte)">
             <summary>
              Sets the sample rate to either 240, 60, 15 or 4 samples per second.
              The resolution for the rates is 12, 14, 16 and 18 bit respectively.
              
              <code>
               "Value", "Description"
              
               "0",    "240 samples per second, 12 bit resolution"
               "1",    "60 samples per second, 14 bit resolution"
               "2",    "15 samples per second, 16 bit resolution"
               "3",    "4 samples per second, 18 bit resolution"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetSampleRate">
             <summary>
              Returns the sample rate as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mA.SetSampleRate(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mA.OnCurrentReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDual020mAV2">
             <summary>
              Measures two DC currents between 0mA and 20mA (IEC 60381-1)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_CURRENT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_CURRENT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_GAIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_GAIN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_CHANNEL_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_CHANNEL_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.SAMPLE_RATE_240_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.SAMPLE_RATE_60_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.SAMPLE_RATE_15_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.SAMPLE_RATE_4_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.GAIN_1X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.GAIN_2X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.GAIN_4X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.GAIN_8X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_STATUS_CONFIG_THRESHOLD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.CHANNEL_LED_STATUS_CONFIG_INTENSITY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDual020mAV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDual020mAV2.CurrentCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetCurrentCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetCurrent(System.Byte)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDual020mAV2.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetCurrent(System.Byte)">
             <summary>
              Returns the current of the specified channel.
              
              It is possible to detect if an IEC 60381-1 compatible sensor is connected
              and if it works probably.
              
              If the returned current is below 4mA, there is likely no sensor connected
              or the connected sensor is defective. If the returned current is over 20mA,
              there might be a short circuit or the sensor is defective.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialDual020mAV2.CurrentCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetCurrentCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetCurrentCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDual020mAV2.CurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletIndustrialDual020mAV2.CurrentCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetCurrentCallbackConfiguration(System.Byte,System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetCurrentCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetSampleRate(System.Byte)">
             <summary>
              Sets the sample rate to either 240, 60, 15 or 4 samples per second.
              The resolution for the rates is 12, 14, 16 and 18 bit respectively.
              
              <code>
               "Value", "Description"
              
               "0",    "240 samples per second, 12 bit resolution"
               "1",    "60 samples per second, 14 bit resolution"
               "2",    "15 samples per second, 16 bit resolution"
               "3",    "4 samples per second, 18 bit resolution"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetSampleRate">
             <summary>
              Returns the sample rate as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetSampleRate(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetGain(System.Byte)">
             <summary>
              Sets a gain between 1x and 8x. If you want to measure a very small current,
              you can increase the gain to get some more resolution.
              
              Example: If you measure 0.5mA with a gain of 8x the return value will be
              4mA.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetGain">
             <summary>
              Returns the gain as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetGain(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED can either be turned on with a pre-defined threshold or the intensity
              of the LED can change with the measured value.
              
              You can configure the channel status behavior with <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)">
             <summary>
              Sets the channel LED status config. This config is used if the channel LED is
              configured as "Channel Status", see <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDConfig(System.Byte,System.Byte)" />.
              
              For each channel you can choose between threshold and intensity mode.
              
              In threshold mode you can define a positive or a negative threshold.
              For a positive threshold set the "min" parameter to the threshold value in nA
              above which the LED should turn on and set the "max" parameter to 0. Example:
              If you set a positive threshold of 10mA, the LED will turn on as soon as the
              current exceeds 10mA and turn off again if it goes below 10mA.
              For a negative threshold set the "max" parameter to the threshold value in nA
              below which the LED should turn on and set the "min" parameter to 0. Example:
              If you set a negative threshold of 10mA, the LED will turn on as soon as the
              current goes below 10mA and the LED will turn off when the current exceeds 10mA.
              
              In intensity mode you can define a range in nA that is used to scale the brightness
              of the LED. Example with min=4mA and max=20mA: The LED is off at 4mA and below,
              on at 20mA and above and the brightness is linearly scaled between the values
              4mA and 20mA. If the min value is greater than the max value, the LED brightness
              is scaled the other way around.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetChannelLEDStatusConfig(System.Byte,System.Int32@,System.Int32@,System.Byte@)">
             <summary>
              Returns the channel LED status configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDual020mAV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDual020mAV2.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualACRelay">
             <summary>
              Two relays to switch AC devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualACRelay.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualACRelay.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the relay and the current state of the relay
              (the state after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualACRelay.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetValue(System.Boolean,System.Boolean)">
             <summary>
              Sets the state of the relays, *true* means on and *false* means off.
              For example: (true, false) turns relay 0 on and relay 1 off.
              
              If you just want to set one of the relays and don't know the current state
              of the other relay, you can get the state with <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.GetValue(System.Boolean@,System.Boolean@)" /> or you
              can use <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetSelectedValue(System.Byte,System.Boolean)" />.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetValue(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the state of the relays, *true* means on and *false* means off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED is on if the channel is high and off otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              The first parameter can be 0 or 1 (relay 0 or relay 1). The second parameter
              is the desired state of the relay (*true* means on and *false* means off).
              The third parameter indicates the time that the relay should hold
              the state.
              
              If this function is called with the parameters (1, true, 1500):
              Relay 1 will turn on and in 1.5s it will turn off again.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a Industrial Dual AC Relay Bricklet connected to one of the
              slave stacks. You can now call this function every second, with a time parameter
              of two seconds. The relay will be on all the time. If now the RS485
              connection is lost, the relay will turn off in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given relay) the current state and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the state flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the state of the selected relay, *true* means on and *false*
              means off.
              
              A running monoflop timer for the selected relay will be aborted if this function
              is called.
              
              The other relay remains untouched.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualACRelay.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualACRelay.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogIn">
             <summary>
              Measures two DC voltages between -35V and +35V with 24bit resolution each
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_SET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_SET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_SET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_ADC_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_976_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_488_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_244_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_122_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_61_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_4_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_2_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogIn.SAMPLE_RATE_1_SPS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackPeriod(System.Byte,System.Int64)" />. The parameter is the voltage of the
              channel.
              
              The <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageCallback" /> callback is only triggered if the voltage has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogIn.Voltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the channel.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetVoltage(System.Byte)">
             <summary>
              Returns the voltage for the given channel.
              
              If you want to get the voltage periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackPeriod(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackPeriod(System.Byte,System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageCallback" /> callback is triggered
              periodically for the given channel. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageCallback" /> callback is only triggered if the voltage has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetVoltageCallbackPeriod(System.Byte)">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackPeriod(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageReachedCallback" /> callback for the given
              channel.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetVoltageCallbackThreshold(System.Byte,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogIn.VoltageReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetVoltageCallbackThreshold(System.Byte,System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetSampleRate(System.Byte)">
             <summary>
              Sets the sample rate. The sample rate can be between 1 sample per second
              and 976 samples per second. Decreasing the sample rate will also decrease the
              noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetSampleRate">
             <summary>
              Returns the sample rate as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetSampleRate(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetCalibration(System.Int32[],System.Int32[])">
             <summary>
              Sets offset and gain of MCP3911 internal calibration registers.
              
              See MCP3911 datasheet 7.7 and 7.8. The Industrial Dual Analog In Bricklet
              is already factory calibrated by Tinkerforge. It should not be necessary
              for you to use this function
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetCalibration(System.Int32[]@,System.Int32[]@)">
             <summary>
              Returns the calibration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetCalibration(System.Int32[],System.Int32[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetADCValues">
             <summary>
              Returns the ADC values as given by the MCP3911 IC. This function
              is needed for proper calibration, see <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogIn.SetCalibration(System.Int32[],System.Int32[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogIn.OnVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogInV2">
             <summary>
              Measures two DC voltages between -35V and +35V with 24bit resolution each
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_SAMPLE_RATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_ADC_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_CHANNEL_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_CHANNEL_LED_STATUS_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_ALL_VOLTAGES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_ALL_VOLTAGES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_ALL_VOLTAGES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_976_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_488_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_244_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_122_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_61_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_4_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_2_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.SAMPLE_RATE_1_SPS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_STATUS_CONFIG_THRESHOLD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.CHANNEL_LED_STATUS_CONFIG_INTENSITY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualAnalogInV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.VoltageCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetVoltageCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetVoltage(System.Byte)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogInV2.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.AllVoltagesCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetAllVoltagesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetAllVoltages" />.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualAnalogInV2.AllVoltagesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetVoltage(System.Byte)">
             <summary>
              Returns the voltage for the given channel.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.VoltageCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetVoltageCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetVoltageCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.VoltageCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetVoltageCallbackConfiguration(System.Byte,System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetVoltageCallbackConfiguration(System.Byte,System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetSampleRate(System.Byte)">
             <summary>
              Sets the sample rate. The sample rate can be between 1 sample per second
              and 976 samples per second. Decreasing the sample rate will also decrease the
              noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetSampleRate">
             <summary>
              Returns the sample rate as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetSampleRate(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetCalibration(System.Int32[],System.Int32[])">
             <summary>
              Sets offset and gain of MCP3911 internal calibration registers.
              
              See MCP3911 datasheet 7.7 and 7.8. The Industrial Dual Analog In Bricklet 2.0
              is already factory calibrated by Tinkerforge. It should not be necessary
              for you to use this function
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetCalibration(System.Int32[]@,System.Int32[]@)">
             <summary>
              Returns the calibration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetCalibration(System.Int32[],System.Int32[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetADCValues">
             <summary>
              Returns the ADC values as given by the MCP3911 IC. This function
              is needed for proper calibration, see <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetCalibration(System.Int32[],System.Int32[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED can either be turned on with a pre-defined threshold or the intensity
              of the LED can change with the measured value.
              
              You can configure the channel status behavior with <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)" />.
              
              By default all channel LEDs are configured as "Channel Status".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)">
             <summary>
              Sets the channel LED status config. This config is used if the channel LED is
              configured as "Channel Status", see <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDConfig(System.Byte,System.Byte)" />.
              
              For each channel you can choose between threshold and intensity mode.
              
              In threshold mode you can define a positive or a negative threshold.
              For a positive threshold set the "min" parameter to the threshold value in mV
              above which the LED should turn on and set the "max" parameter to 0. Example:
              If you set a positive threshold of 10V, the LED will turn on as soon as the
              voltage exceeds 10V and turn off again if it goes below 10V.
              For a negative threshold set the "max" parameter to the threshold value in mV
              below which the LED should turn on and set the "min" parameter to 0. Example:
              If you set a negative threshold of 10V, the LED will turn on as soon as the
              voltage goes below 10V and the LED will turn off when the voltage exceeds 10V.
              
              In intensity mode you can define a range in mV that is used to scale the brightness
              of the LED. Example with min=4V, max=20V: The LED is off at 4V, on at 20V
              and the brightness is linearly scaled between the values 4V and 20V. If the
              min value is greater than the max value, the LED brightness is scaled the other
              way around.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetChannelLEDStatusConfig(System.Byte,System.Int32@,System.Int32@,System.Byte@)">
             <summary>
              Returns the channel LED status configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetChannelLEDStatusConfig(System.Byte,System.Int32,System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetAllVoltages">
             <summary>
              Returns the voltages for all channels.
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.AllVoltagesCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetAllVoltagesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetAllVoltagesCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialDualAnalogInV2.AllVoltagesCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetAllVoltagesCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetAllVoltagesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualAnalogInV2.OnAllVoltagesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualRelay">
             <summary>
              Two relays to switch AC/DC devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialDualRelay.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialDualRelay.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the relay and the current state of the relay
              (the state after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialDualRelay.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetValue(System.Boolean,System.Boolean)">
             <summary>
              Sets the state of the relays, *true* means on and *false* means off.
              For example: (true, false) turns relay 0 on and relay 1 off.
              
              If you just want to set one of the relays and don't know the current state
              of the other relay, you can get the state with <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.GetValue(System.Boolean@,System.Boolean@)" /> or you
              can use <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.SetSelectedValue(System.Byte,System.Boolean)" />.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetValue(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the state of the relays, *true* means on and *false* means off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              The first parameter can be 0 or 1 (relay 0 or relay 1). The second parameter
              is the desired state of the relay (*true* means on and *false* means off).
              The third parameter indicates the time that the relay should hold
              the state.
              
              If this function is called with the parameters (1, true, 1500):
              Relay 1 will turn on and in 1.5s it will turn off again.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a Industrial Dual Relay Bricklet connected to one of the
              slave stacks. You can now call this function every second, with a time parameter
              of two seconds. The relay will be on all the time. If now the RS485
              connection is lost, the relay will turn off in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given relay) the current state and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the state flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the state of the selected relay, *true* means on and *false*
              means off.
              
              A running monoflop timer for the selected relay will be aborted if this function
              is called.
              
              The other relay remains untouched.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialDualRelay.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialDualRelay.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialPTC">
             <summary>
              Reads temperatures from Pt100 und Pt1000 sensors
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_RESISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_RESISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_RESISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_IS_SENSOR_CONNECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FILTER_OPTION_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.FILTER_OPTION_60HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.WIRE_MODE_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.WIRE_MODE_3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.WIRE_MODE_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialPTC.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialPTC.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletIndustrialPTC.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialPTC.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialPTC.ResistanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletIndustrialPTC.GetResistance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialPTC.ResistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialPTC.SensorConnectedCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletIndustrialPTC.IsSensorConnected" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialPTC.SensorConnectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetTemperature">
             <summary>
              Returns the temperature of the connected sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialPTC.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialPTC.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletIndustrialPTC.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetResistance">
             <summary>
              Returns the value as measured by the MAX31865 precision delta-sigma ADC.
              
              The value can be converted with the following formulas:
              
              * Pt100:  resistance = (value * 390) / 32768
              * Pt1000: resistance = (value * 3900) / 32768
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialPTC.ResistanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIndustrialPTC.ResistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletIndustrialPTC.ResistanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetResistanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetNoiseRejectionFilter(System.Byte)">
             <summary>
              Sets the noise rejection filter to either 50Hz (0) or 60Hz (1).
              Noise from 50Hz or 60Hz power sources (including
              harmonics of the AC power's fundamental frequency) is
              attenuated by 82dB.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetNoiseRejectionFilter">
             <summary>
              Returns the noise rejection filter option as set by
              <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetNoiseRejectionFilter(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.IsSensorConnected">
             <summary>
              Returns *true* if the sensor is connected correctly.
              
              If this function
              returns *false*, there is either no Pt100 or Pt1000 sensor connected,
              the sensor is connected incorrectly or the sensor itself is faulty.
              
              If you want to get the status automatically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletIndustrialPTC.SensorConnectedCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetWireMode(System.Byte)">
             <summary>
              Sets the wire mode of the sensor. Possible values are 2, 3 and 4 which
              correspond to 2-, 3- and 4-wire sensors. The value has to match the jumper
              configuration on the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetWireMode">
             <summary>
              Returns the wire mode as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetWireMode(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetMovingAverageConfiguration(System.Int32,System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the resistance and temperature.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
              
              New data is gathered every 20ms. With a moving average of length 1000 the resulting
              averaging window has a length of 20s. If you want to do long term measurements the longest
              moving average will give the cleanest results.
              
              The default values match the non-changeable averaging settings of the old PTC Bricklet 1.0
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetMovingAverageConfiguration(System.Int32@,System.Int32@)">
             <summary>
              Returns the moving average configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetMovingAverageConfiguration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)">
             <summary>
              If you enable this callback, the <see cref="E:Tinkerforge.BrickletIndustrialPTC.SensorConnectedCallback" /> callback is triggered
              every time a Pt sensor is connected/disconnected.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetSensorConnectedCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialPTC.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialPTC.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.OnResistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialPTC.OnSensorConnectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialQuadRelay">
             <summary>
              4 galvanically isolated solid state relays
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_SET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_GET_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_GET_AVAILABLE_FOR_GROUP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_SET_SELECTED_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelay.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialQuadRelay.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the involved pins and the current value of the pins
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialQuadRelay.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialQuadRelay.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.SetValue(System.Int32)">
             <summary>
              Sets the output value with a bitmask (16bit). A 1 in the bitmask means relay
              closed and a 0 means relay open.
              
              For example: The value 3 or 0b0011 will close the relay of pins 0-1 and open
              the other pins.
              
              If no groups are used (see <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetGroup(System.Char[])" />), the pins correspond to the
              markings on the Industrial Quad Relay Bricklet.
              
              If groups are used, the pins correspond to the element in the group.
              Element 1 in the group will get pins 0-3, element 2 pins 4-7, element 3
              pins 8-11 and element 4 pins 12-15.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.GetValue">
             <summary>
              Returns the bitmask as set by <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetValue(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.SetMonoflop(System.Int32,System.Int32,System.Int64)">
             <summary>
              Configures a monoflop of the pins specified by the first parameter
              bitmask.
              
              The second parameter is a bitmask with the desired value of the specified
              pins. A 1 in the bitmask means relay closed and a 0 means relay open.
              
              The third parameter indicates the time that the pins should hold
              the value.
              
              If this function is called with the parameters (9, 1, 1500) or
              (0b1001, 0b0001, 1500): Pin 0 will close and pin 3 will open. In 1.5s pin 0
              will open and pin 3 will close again.
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and a Quad Relay Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds and pin 0 closed. Pin 0 will be closed all the time. If now
              the RS485 connection is lost, then pin 0 will be opened in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.GetMonoflop(System.Byte,System.Int32@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given pin) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetMonoflop(System.Int32,System.Int32,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.SetGroup(System.Char[])">
             <summary>
              Sets a group of Quad Relay Bricklets that should work together. You can
              find Bricklets that can be grouped together with <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.GetAvailableForGroup" />.
              
              The group consists of 4 elements. Element 1 in the group will get pins 0-3,
              element 2 pins 4-7, element 3 pins 8-11 and element 4 pins 12-15.
              
              Each element can either be one of the ports ('a' to 'd') or 'n' if it should
              not be used.
              
              For example: If you have two Quad Relay Bricklets connected to port A and
              port B respectively, you could call with ``['a', 'b', 'n', 'n']``.
              
              Now the pins on the Quad Relay on port A are assigned to 0-3 and the
              pins on the Quad Relay on port B are assigned to 4-7. It is now possible
              to call <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetValue(System.Int32)" /> and control two Bricklets at the same time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.GetGroup">
             <summary>
              Returns the group as set by <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetGroup(System.Char[])" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.GetAvailableForGroup">
             <summary>
              Returns a bitmask of ports that are available for grouping. For example the
              value 5 or 0b0101 means: Port A and port C are connected to Bricklets that
              can be grouped together.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.SetSelectedValues(System.Int32,System.Int32)">
             <summary>
              Sets the output value with a bitmask, according to the selection mask.
              The bitmask is 16 bit long, *true* refers to a closed relay and
              *false* refers to an open relay.
              
              For example: The values (3, 1) or (0b0011, 0b0001) will close the relay of
              pin 0, open the relay of pin 1 and leave the others untouched.
              
              If no groups are used (see <see cref="M:Tinkerforge.BrickletIndustrialQuadRelay.SetGroup(System.Char[])" />), the pins correspond to the
              markings on the Industrial Quad Relay Bricklet.
              
              If groups are used, the pins correspond to the element in the group.
              Element 1 in the group will get pins 0-3, element 2 pins 4-7, element 3
              pins 8-11 and element 4 pins 12-15.
              
              Running monoflop timers for the selected relays will be aborted if this function
              is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelay.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialQuadRelayV2">
             <summary>
              4 galvanically isolated solid state relays
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_SELECTED_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_CHANNEL_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.CHANNEL_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.CHANNEL_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.CHANNEL_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIndustrialQuadRelayV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIndustrialQuadRelayV2.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever a monoflop timer reaches 0. The
              parameters contain the channel and the current value of the channel
              (the value after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIndustrialQuadRelayV2.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetValue(System.Boolean[])">
             <summary>
              Sets the value of all four relays. A value of *true* closes the
              relay and a value of *false* opens the relay.
              
              Use <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetSelectedValue(System.Byte,System.Boolean)" /> to only change one relay.
              
              All running monoflop timers will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetValue">
             <summary>
              Returns the values as set by <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetValue(System.Boolean[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetMonoflop(System.Byte,System.Boolean,System.Int64)">
             <summary>
              Configures a monoflop of the specified channel.
              
              The second parameter is the desired value of the specified
              channel. A *true* means relay closed and a *false* means relay open.
              
              The third parameter indicates the time that the channels should hold
              the value.
              
              If this function is called with the parameters (0, 1, 1500) channel 0 will
              close and in 1.5s channel 0 will open again
              
              A monoflop can be used as a fail-safe mechanism. For example: Lets assume you
              have a RS485 bus and a Industrial Quad Relay Bricklet 2.0 connected to one of
              the slave stacks. You can now call this function every second, with a time
              parameter of two seconds and channel 0 closed. Channel 0 will be closed all the
              time. If now the RS485 connection is lost, then channel 0 will be opened in at
              most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetMonoflop(System.Byte,System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns (for the given channel) the current value and the time as set by
              <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetMonoflop(System.Byte,System.Boolean,System.Int64)" /> as well as the remaining time until the value flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetSelectedValue(System.Byte,System.Boolean)">
             <summary>
              Sets the output value of the specified channel without affecting the other
              channels.
              
              A running monoflop timer for the specified channel will be aborted if this
              function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetChannelLEDConfig(System.Byte,System.Byte)">
             <summary>
              Each channel has a corresponding LED. You can turn the LED off, on or show a
              heartbeat. You can also set the LED to "Channel Status". In this mode the
              LED is on if the channel is high and off otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetChannelLEDConfig(System.Byte)">
             <summary>
              Returns the channel LED configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetChannelLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIndustrialQuadRelayV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIndustrialQuadRelayV2.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIsolator">
             <summary>
              Galvanically isolates any Bricklet from any Brick
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_STATISTICS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_SPITFP_BAUDRATE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_SPITFP_BAUDRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_ISOLATOR_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_STATISTICS_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_STATISTICS_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletIsolator.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletIsolator.StatisticsCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletIsolator.SetStatisticsCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletIsolator.GetStatistics(System.Int64@,System.Int64@,System.Int32@,System.String@)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletIsolator.StatisticsEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetStatistics(System.Int64@,System.Int64@,System.Int32@,System.String@)">
             <summary>
              Returns statistics for the Isolator Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)">
             <summary>
              The SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is
              enabled, the Isolator Bricklet will try to adapt the baudrate for the communication
              between Bricks and Bricklets according to the amount of data that is transferred.
              
              The baudrate for communication config between
              Brick and Isolator Bricklet can be set through the API of the Brick.
              
              The baudrate will be increased exponentially if lots of data is sent/received and
              decreased linearly if little data is sent/received.
              
              This lowers the baudrate in applications where little data is transferred (e.g.
              a weather station) and increases the robustness. If there is lots of data to transfer
              (e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.
              
              In cases where some data has to transferred as fast as possible every few seconds
              (e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn
              the dynamic baudrate off to get the highest possible performance.
              
              The maximum value of the baudrate can be set per port with the function
              <see cref="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrate(System.Int64)" />. If the dynamic baudrate is disabled, the baudrate
              as set by <see cref="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrate(System.Int64)" /> will be used statically.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetSPITFPBaudrateConfig(System.Boolean@,System.Int64@)">
             <summary>
              Returns the baudrate config, see <see cref="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrate(System.Int64)">
             <summary>
              Sets the baudrate for a the communication between Isolator Bricklet
              and the connected Bricklet. The baudrate for communication between
              Brick and Isolator Bricklet can be set through the API of the Brick.
              
              If you want to increase the throughput of Bricklets you can increase
              the baudrate. If you get a high error count because of high
              interference (see <see cref="M:Tinkerforge.BrickletIsolator.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)" />) you can decrease the
              baudrate.
              
              If the dynamic baudrate feature is enabled, the baudrate set by this
              function corresponds to the maximum baudrate (see <see cref="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrateConfig(System.Boolean,System.Int64)" />).
              
              Regulatory testing is done with the default baudrate. If CE compatibility
              or similar is necessary in your applications we recommend to not change
              the baudrate.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetSPITFPBaudrate">
             <summary>
              Returns the baudrate, see <see cref="M:Tinkerforge.BrickletIsolator.SetSPITFPBaudrate(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetIsolatorSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Isolator Bricklet and
              the connected Bricklet. Call <see cref="M:Tinkerforge.BrickletIsolator.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)" /> to get the
              error count between Isolator Bricklet and Brick.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetStatisticsCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletIsolator.StatisticsCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetStatisticsCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletIsolator.SetStatisticsCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletIsolator.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletIsolator.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletIsolator.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletIsolator.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletIsolator.OnStatisticsCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick">
             <summary>
              2-axis joystick with push-button
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_IS_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_SET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_SET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystick.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.PositionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackPeriod(System.Int64)" />. The parameter is the position of the
              joystick.
              
              The <see cref="E:Tinkerforge.BrickletJoystick.PositionCallback" /> callback is only triggered if the position has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.Position">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameters are the
              analog values of the joystick.
              
              The <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueCallback" /> callback is only triggered if the values have changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.PositionReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16)" /> is reached.
              The parameters are the position of the joystick.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletJoystick.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.PositionReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32)" /> is reached.
              The parameters are the analog values of the joystick.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletJoystick.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.PressedCallback">
             <summary>
              This callback is triggered when the button is pressed.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.PressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.Pressed">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.ReleasedCallback">
             <summary>
              This callback is triggered when the button is released.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystick.ReleasedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystick.Released">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetPosition(System.Int16@,System.Int16@)">
             <summary>
              Returns the position of the joystick. The middle position of the joystick is x=0, y=0.
              The returned values are averaged and calibrated (see <see cref="M:Tinkerforge.BrickletJoystick.Calibrate" />).
              
              If you want to get the position periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletJoystick.PositionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.IsPressed">
             <summary>
              Returns *true* if the button is pressed and *false* otherwise.
              
              It is recommended to use the <see cref="E:Tinkerforge.BrickletJoystick.PressedCallback" /> and <see cref="E:Tinkerforge.BrickletJoystick.ReleasedCallback" /> callbacks
              to handle the button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetAnalogValue(System.Int32@,System.Int32@)">
             <summary>
              Returns the values as read by a 12-bit analog-to-digital converter.
              
              <note>
               The values returned by <see cref="M:Tinkerforge.BrickletJoystick.GetPosition(System.Int16@,System.Int16@)" /> are averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletJoystick.GetAnalogValue(System.Int32@,System.Int32@)" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletJoystick.GetAnalogValue(System.Int32@,System.Int32@)" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog values periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.Calibrate">
             <summary>
              Calibrates the middle position of the joystick. If your Joystick Bricklet
              does not return x=0 and y=0 in the middle position, call this function
              while the joystick is standing still in the middle position.
              
              The resulting calibration will be saved on the EEPROM of the Joystick
              Bricklet, thus you only have to calibrate it once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.SetPositionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletJoystick.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletJoystick.PositionCallback" /> callback is only triggered if the position has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetPositionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueCallback" /> callback is only triggered if the analog values have
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletJoystick.PositionReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the position is *outside* the min and max values"
               "'i'",    "Callback is triggered when the position is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the position is smaller than the min values (max is ignored)"
               "'&gt;'",    "Callback is triggered when the position is greater than the min values (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetPositionCallbackThreshold(System.Char@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog values are *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog values are *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog values are smaller than the min values (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog values are greater than the min values (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletJoystick.PositionReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletJoystick.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletJoystick.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16,System.Int16,System.Int16)" />,
              * <see cref="M:Tinkerforge.BrickletJoystick.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletJoystick.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystick.OnReleasedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystickV2">
             <summary>
              2-axis joystick with push-button
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_IS_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_SET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_SET_PRESSED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_PRESSED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletJoystickV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystickV2.PositionCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as with <see cref="M:Tinkerforge.BrickletJoystickV2.GetPosition(System.Int16@,System.Int16@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystickV2.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletJoystickV2.PressedCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPressedCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as with <see cref="M:Tinkerforge.BrickletJoystickV2.IsPressed" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletJoystickV2.PressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetPosition(System.Int16@,System.Int16@)">
             <summary>
              Returns the position of the joystick. The middle position of the joystick is x=0, y=0.
              The returned values are averaged and calibrated (see <see cref="M:Tinkerforge.BrickletJoystickV2.Calibrate" />).
              
              If you want to get the position periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletJoystickV2.PositionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.IsPressed">
             <summary>
              Returns *true* if the button is pressed and *false* otherwise.
              
              If you want to get the press-state periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletJoystickV2.PressedCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPressedCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.Calibrate">
             <summary>
              Calibrates the middle position of the joystick. If your Joystick Bricklet 2.0
              does not return x=0 and y=0 in the middle position, call this function
              while the joystick is standing still in the middle position.
              
              The resulting calibration will be saved in non-volatile memory,
              thus you only have to calibrate it once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletJoystickV2.PositionCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetPositionCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.SetPressedCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletJoystickV2.PressedCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after at least one of the values has changed. If the values didn't
              change within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetPressedCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetPressedCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletJoystickV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletJoystickV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletJoystickV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletJoystickV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletJoystickV2.OnPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64">
             <summary>
              7.1cm (2.8") display with 128x64 pixel and touch screen
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_WRITE_PIXELS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_READ_PIXELS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_DRAW_BUFFERED_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_TOUCH_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_TOUCH_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_TOUCH_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_TOUCH_GESTURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_TOUCH_GESTURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_TOUCH_GESTURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_DRAW_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_DRAW_BOX">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_DRAW_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_BUTTON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_BUTTON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_REMOVE_GUI_BUTTON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_BUTTON_PRESSED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_BUTTON_PRESSED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_BUTTON_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_SLIDER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_SLIDER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_REMOVE_GUI_SLIDER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_SLIDER_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_SLIDER_VALUE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_SLIDER_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_TAB_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_TAB_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_TAB_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_TAB_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_TAB_ICON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_TAB_ICON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_REMOVE_GUI_TAB">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_TAB_SELECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_TAB_SELECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_TAB_SELECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_TAB_SELECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_GRAPH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_GRAPH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_GUI_GRAPH_DATA_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_GUI_GRAPH_DATA_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_REMOVE_GUI_GRAPH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_REMOVE_ALL_GUI">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_TOUCH_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_TOUCH_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GESTURE_LEFT_TO_RIGHT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GESTURE_RIGHT_TO_LEFT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GESTURE_TOP_TO_BOTTOM">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GESTURE_BOTTOM_TO_TOP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.COLOR_WHITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.COLOR_BLACK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_6X8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_6X16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_6X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_6X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_12X16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_12X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_12X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_18X24">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_18X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.FONT_24X32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.DIRECTION_HORIZONTAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.DIRECTION_VERTICAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.CHANGE_TAB_ON_CLICK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.CHANGE_TAB_ON_SWIPE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.CHANGE_TAB_ON_CLICK_AND_SWIPE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GRAPH_TYPE_DOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GRAPH_TYPE_LINE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.GRAPH_TYPE_BAR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.TOUCH_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.TOUCH_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.TOUCH_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.TOUCH_LED_CONFIG_SHOW_TOUCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD128x64.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD128x64.TouchPositionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetTouchPositionCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletLCD128x64.GetTouchPosition(System.Int32@,System.Int32@,System.Int32@,System.Int64@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64.TouchPositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD128x64.TouchGestureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetTouchGestureCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletLCD128x64.GetTouchGesture(System.Byte@,System.Int64@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int64@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64.TouchGestureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD128x64.GUIButtonPressedCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIButtonPressedCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletLCD128x64.GetGUIButtonPressed(System.Byte)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64.GUIButtonPressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD128x64.GUISliderValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUISliderValueCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletLCD128x64.GetGUISliderValue(System.Byte)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64.GUISliderValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD128x64.GUITabSelectedCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUITabSelectedCallbackConfiguration(System.Int64,System.Boolean)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletLCD128x64.GetGUITabSelected" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD128x64.GUITabSelectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.WritePixelsLowLevel(System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              Writes pixels to the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              If automatic draw is enabled (default) the pixels are directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the pixels are written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.ReadPixelsLowLevel(System.Byte,System.Byte,System.Byte,System.Byte,System.Int32@,System.Int32@,System.Boolean[]@)">
             <summary>
              Reads pixels from the specified window.
              
              The pixels are read from the window line by line top to bottom
              and each line is read from left to right.
              
              If automatic draw is enabled (default) the pixels that are read are always the
              same that are shown on the display.
              
              If automatic draw is disabled the pixels are read from the internal buffer
              (see <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />).
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.ClearDisplay">
             <summary>
              Clears the complete content of the display.
              
              If automatic draw is enabled (default) the pixels are directly cleared.
              
              If automatic draw is disabled the the internal buffer is cleared and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)">
             <summary>
              Sets the configuration of the display.
              
              If automatic draw is set to *true*, the display is automatically updated with every
              call of <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" /> and <see cref="M:Tinkerforge.BrickletLCD128x64.WriteLine(System.Byte,System.Byte,System.String)" />. If it is set to false, the
              changes are written into an internal buffer and only shown on the display after
              a call of <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetDisplayConfiguration(System.Byte@,System.Byte@,System.Boolean@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              
              For example: (1, 10, "Hello") will write *Hello* in the middle of the
              second line of the display.
              
              The display uses a special 5x7 pixel charset. You can view the characters
              of the charset in Brick Viewer.
              
              If automatic draw is enabled (default) the text is directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the text is written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
              
              This function is a 1:1 replacement for the function with the same name
              in the LCD 20x4 Bricklet. You can draw text at a specific pixel position
              and with different font sizes with the <see cref="M:Tinkerforge.BrickletLCD128x64.DrawText(System.Byte,System.Byte,System.Byte,System.Boolean,System.String)" /> function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)">
             <summary>
              Draws the currently buffered frame. Normally each call of <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" /> and
              <see cref="M:Tinkerforge.BrickletLCD128x64.WriteLine(System.Byte,System.Byte,System.String)" /> draws directly onto the display. If you turn automatic draw off
              (<see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />), the data is written in an internal buffer and
              only transferred to the display by calling this function. This can be used to
              avoid flicker when drawing a complex frame in multiple steps.
              
              Set the `force complete redraw` to *true* to redraw the whole display
              instead of only the changed parts. Normally it should not be necessary to set this to
              *true*. It may only become necessary in case of stuck pixels because of errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetTouchPosition(System.Int32@,System.Int32@,System.Int32@,System.Int64@)">
             <summary>
              Returns the last valid touch position:
              
              * Pressure: Amount of pressure applied by the user
              * X: Touch position on x-axis
              * Y: Touch position on y-axis
              * Age: Age of touch press (how long ago it was)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetTouchPositionCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLCD128x64.TouchPositionCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetTouchPositionCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetTouchPositionCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetTouchGesture(System.Byte@,System.Int64@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int64@)">
             <summary>
              Returns one of four touch gestures that can be automatically detected by the Bricklet.
              
              The gestures are swipes from left to right, right to left, top to bottom and bottom to top.
              
              Additionally to the gestures a vector with a start and end position of the gesture is
              provided. You can use this vector do determine a more exact location of the gesture (e.g.
              the swipe from top to bottom was on the left or right part of the screen).
              
              The age parameter corresponds to the age of gesture (how long ago it was).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetTouchGestureCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLCD128x64.TouchGestureCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetTouchGestureCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetTouchGestureCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.DrawLine(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
             <summary>
              Draws a white or black line from (x, y)-start to (x, y)-end.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.DrawBox(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean)">
             <summary>
              Draws a white or black box from (x, y)-start to (x, y)-end.
              
              If you set fill to true, the box will be filled with the
              color. Otherwise only the outline will be drawn.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.DrawText(System.Byte,System.Byte,System.Byte,System.Boolean,System.String)">
             <summary>
              Draws a text at the pixel position (x, y).
              
              You can use one of 9 different font sizes and draw the text in white or black.
              
              The font conforms to code page 437.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUIButton(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String)">
             <summary>
              Draws a clickable button at position (x, y) with the given text.
              
              You can use up to 12 buttons.
              
              The x position + width has to be within the range of 1 to 128 and the y
              position + height has to be within the range of 1 to 64.
              
              The minimum useful width/height of a button is 3.
              
              You can enable a callback for a button press with
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIButtonPressedCallbackConfiguration(System.Int64,System.Boolean)" />. The callback will
              be triggered for press and release-events.
              
              The button is drawn in a separate GUI buffer and the button-frame will
              always stay on top of the graphics drawn with <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" />. To
              remove the button use <see cref="M:Tinkerforge.BrickletLCD128x64.RemoveGUIButton(System.Byte)" />.
              
              If you want an icon instead of text, you can draw the icon inside of the
              button with <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIButton(System.Byte,System.Boolean@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.String@)">
             <summary>
              Returns the button properties for a given `Index` as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIButton(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String)" />.
              
              Additionally the `Active` parameter shows if a button is currently active/visible
              or not.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.RemoveGUIButton(System.Byte)">
             <summary>
              Removes the button with the given index.
              
              You can use index 255 to remove all buttons.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUIButtonPressedCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLCD128x64.GUIButtonPressedCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIButtonPressedCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIButtonPressedCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIButtonPressed(System.Byte)">
             <summary>
              Returns the state of the button for the given index.
              
              The state can either be pressed (true) or released (false).
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUISlider(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Draws a slider at position (x, y) with the given length.
              
              You can use up to 6 sliders.
              
              If you use the horizontal direction, the x position + length has to be
              within the range of 1 to 128 and the y position has to be within
              the range of 0 to 46.
              
              If you use the vertical direction, the y position + length has to be
              within the range of 1 to 64 and the x position has to be within
              the range of 0 to 110.
              
              The minimum length of a slider is 8.
              
              The parameter value is the start-position of the slider, it can
              be between 0 and length-8.
              
              You can enable a callback for the slider value with
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUISliderValueCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The slider is drawn in a separate GUI buffer and it will
              always stay on top of the graphics drawn with <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" />. To
              remove the button use <see cref="M:Tinkerforge.BrickletLCD128x64.RemoveGUISlider(System.Byte)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUISlider(System.Byte,System.Boolean@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the slider properties for a given `Index` as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUISlider(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              Additionally the `Active` parameter shows if a button is currently active/visible
              or not.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.RemoveGUISlider(System.Byte)">
             <summary>
              Removes the slider with the given index.
              
              You can use index 255 to remove all slider.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUISliderValueCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLCD128x64.GUISliderValueCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUISliderValueCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUISliderValueCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUISliderValue(System.Byte)">
             <summary>
              Returns the current slider value for the given index.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUITabConfiguration(System.Byte,System.Boolean)">
             <summary>
              Sets the general configuration for tabs. You can configure the tabs to only
              accept clicks or only swipes (gesture left/right and right/left) or both.
              
              Additionally, if you set `Clear GUI` to true, all of the GUI elements (buttons,
              slider, graphs) will automatically be removed on every tab change.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUITabConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the tab configuration as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUITabConfiguration(System.Byte,System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUITabText(System.Byte,System.String)">
             <summary>
              Adds a text-tab with the given index.
              
              You can use up to 10 tabs.
              
              A text-tab with the same index as a icon-tab will overwrite the icon-tab.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUITabText(System.Byte,System.Boolean@,System.String@)">
             <summary>
              Returns the text for a given index as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUITabText(System.Byte,System.String)" />.
              
              Additionally the `Active` parameter shows if the tab is currently active/visible
              or not.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUITabIcon(System.Byte,System.Boolean[])">
             <summary>
              Adds a icon-tab with the given index. The icon can have a width of 28 pixels
              with a height of 6 pixels. It is drawn line-by-line from left to right.
              
              You can use up to 10 tabs.
              
              A icon-tab with the same index as a text-tab will overwrite the text-tab.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUITabIcon(System.Byte,System.Boolean@,System.Boolean[]@)">
             <summary>
              Returns the icon for a given index as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUITabIcon(System.Byte,System.Boolean[])" />.
              
              Additionally the `Active` parameter shows if the tab is currently active/visible
              or not.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.RemoveGUITab(System.Byte)">
             <summary>
              Removes the tab with the given index.
              
              You can use index 255 to remove all tabs.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUITabSelected(System.Byte)">
             <summary>
              Sets the tab with the given index as selected (drawn as selected on the display).
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUITabSelectedCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLCD128x64.GUITabSelectedCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUITabSelectedCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUITabSelectedCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUITabSelected">
             <summary>
              Returns the index of the currently selected tab.
              If there are not tabs, the returned index is -1.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)">
             <summary>
              Sets the configuration for up to four graphs.
              
              The graph type can be dot-, line- or bar-graph.
              
              The x and y position are pixel positions.
              
              You can add a text for the x and y axis.
              The text is drawn at the inside of the graph and it can overwrite some
              of the graph data. If you need the text outside of the graph you can
              leave this text here empty and use <see cref="M:Tinkerforge.BrickletLCD128x64.DrawText(System.Byte,System.Byte,System.Byte,System.Boolean,System.String)" /> to draw the caption
              outside of the graph.
              
              The data of the graph can be set and updated with <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphData(System.Byte,System.Byte[])" />.
              
              The graph is drawn in a separate GUI buffer and the graph-frame and data will
              always stay on top of the graphics drawn with <see cref="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" />. To
              remove the graph use <see cref="M:Tinkerforge.BrickletLCD128x64.RemoveGUIGraph(System.Byte)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIGraphConfiguration(System.Byte,System.Boolean@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.String@,System.String@)">
             <summary>
              Returns the graph properties for a given `Index` as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)" />.
              
              Additionally the `Active` parameter shows if a graph is currently active/visible
              or not.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphDataLowLevel(System.Byte,System.Int32,System.Int32,System.Byte[])">
             <summary>
              Sets the data for a graph with the given index. You have to configure the graph with
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)" /> before you can set the first data.
              
              The graph will show the first n values of the data that you set, where
              n is the width set with <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)" />. If you set
              less then n values it will show the rest of the values as zero.
              
              The maximum number of data-points you can set is 118 (which also corresponds to the
              maximum width of the graph).
              
              You have to scale your values to be between 0 and 255. 0 will be shown
              at the bottom of the graph and 255 at the top.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIGraphDataLowLevel(System.Byte,System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the graph data for a given index as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphData(System.Byte,System.Byte[])" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.RemoveGUIGraph(System.Byte)">
             <summary>
              Removes the graph with the given index.
              
              You can use index 255 to remove all graphs.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.RemoveAllGUI">
             <summary>
              Removes all GUI elements (buttons, slider, graphs, tabs).
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetTouchLEDConfig(System.Byte)">
             <summary>
              Sets the touch LED configuration. By default the LED is on if the
              LCD is touched.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetTouchLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetTouchLEDConfig(System.Byte)" />
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletLCD128x64.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletLCD128x64.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])">
             <summary>
              Writes pixels to the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              If automatic draw is enabled (default) the pixels are directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the pixels are written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.ReadPixels(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Reads pixels from the specified window.
              
              The pixels are read from the window line by line top to bottom
              and each line is read from left to right.
              
              If automatic draw is enabled (default) the pixels that are read are always the
              same that are shown on the display.
              
              If automatic draw is disabled the pixels are read from the internal buffer
              (see <see cref="M:Tinkerforge.BrickletLCD128x64.DrawBufferedFrame(System.Boolean)" />).
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletLCD128x64.SetDisplayConfiguration(System.Byte,System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphData(System.Byte,System.Byte[])">
             <summary>
              Sets the data for a graph with the given index. You have to configure the graph with
              <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)" /> before you can set the first data.
              
              The graph will show the first n values of the data that you set, where
              n is the width set with <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.String,System.String)" />. If you set
              less then n values it will show the rest of the values as zero.
              
              The maximum number of data-points you can set is 118 (which also corresponds to the
              maximum width of the graph).
              
              You have to scale your values to be between 0 and 255. 0 will be shown
              at the bottom of the graph and 255 at the top.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.GetGUIGraphData(System.Byte)">
             <summary>
              Returns the graph data for a given index as set by <see cref="M:Tinkerforge.BrickletLCD128x64.SetGUIGraphData(System.Byte,System.Byte[])" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.OnTouchPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.OnTouchGestureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.OnGUIButtonPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.OnGUISliderValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD128x64.OnGUITabSelectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD16x2">
             <summary>
              16x2 character alphanumeric display with blue backlight
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_BACKLIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_BACKLIGHT_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_IS_BACKLIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_SET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_GET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_IS_BUTTON_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_SET_CUSTOM_CHARACTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_GET_CUSTOM_CHARACTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD16x2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD16x2.ButtonPressedCallback">
             <summary>
              This callback is triggered when a button is pressed. The parameter is
              the number of the button.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD16x2.ButtonPressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD16x2.ButtonPressed">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD16x2.ButtonReleasedCallback">
             <summary>
              This callback is triggered when a button is released. The parameter is
              the number of the button.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD16x2.ButtonReleasedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD16x2.ButtonReleased">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              The text can have a maximum of 16 characters.
              
              For example: (0, 5, "Hello") will write *Hello* in the middle of the
              first line of the display.
              
              The display uses a special charset that includes all ASCII characters except
              backslash and tilde. The LCD charset also includes several other non-ASCII characters, see
              the `charset specification &lt;https://github.com/Tinkerforge/lcd-16x2-bricklet/raw/master/datasheets/standard_charset.pdf&gt;`__
              for details. The Unicode example above shows how to specify non-ASCII characters
              and how to translate from Unicode to the LCD charset.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.ClearDisplay">
             <summary>
              Deletes all characters from the display.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.BacklightOn">
             <summary>
              Turns the backlight on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.BacklightOff">
             <summary>
              Turns the backlight off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.IsBacklightOn">
             <summary>
              Returns *true* if the backlight is on and *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.SetConfig(System.Boolean,System.Boolean)">
             <summary>
              Configures if the cursor (shown as "_") should be visible and if it
              should be blinking (shown as a blinking block). The cursor position
              is one character behind the the last text written with
              <see cref="M:Tinkerforge.BrickletLCD16x2.WriteLine(System.Byte,System.Byte,System.String)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.GetConfig(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLCD16x2.SetConfig(System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.IsButtonPressed(System.Byte)">
             <summary>
              Returns *true* if the button is pressed.
              
              If you want to react on button presses and releases it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLCD16x2.ButtonPressedCallback" /> and <see cref="E:Tinkerforge.BrickletLCD16x2.ButtonReleasedCallback" /> callbacks.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.SetCustomCharacter(System.Byte,System.Byte[])">
             <summary>
              The LCD 16x2 Bricklet can store up to 8 custom characters. The characters
              consist of 5x8 pixels and can be addressed with the index 0-7. To describe
              the pixels, the first 5 bits of 8 bytes are used. For example, to make
              a custom character "H", you should transfer the following:
              
              * ``character[0] = 0b00010001`` (decimal value 17)
              * ``character[1] = 0b00010001`` (decimal value 17)
              * ``character[2] = 0b00010001`` (decimal value 17)
              * ``character[3] = 0b00011111`` (decimal value 31)
              * ``character[4] = 0b00010001`` (decimal value 17)
              * ``character[5] = 0b00010001`` (decimal value 17)
              * ``character[6] = 0b00010001`` (decimal value 17)
              * ``character[7] = 0b00000000`` (decimal value 0)
              
              The characters can later be written with <see cref="M:Tinkerforge.BrickletLCD16x2.WriteLine(System.Byte,System.Byte,System.String)" /> by using the
              characters with the byte representation 8 ("\\x08" or "\\u0008") to 15
              ("\\x0F" or "\\u000F").
              
              You can play around with the custom characters in Brick Viewer since
              version 2.0.1.
              
              Custom characters are stored by the LCD in RAM, so they have to be set
              after each startup.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.GetCustomCharacter(System.Byte)">
             <summary>
              Returns the custom character for a given index, as set with
              <see cref="M:Tinkerforge.BrickletLCD16x2.SetCustomCharacter(System.Byte,System.Byte[])" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.OnButtonPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD16x2.OnButtonReleasedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD20x4">
             <summary>
              20x4 character alphanumeric display with blue backlight
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_BACKLIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_BACKLIGHT_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_IS_BACKLIGHT_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_SET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_GET_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_IS_BUTTON_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_SET_CUSTOM_CHARACTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_GET_CUSTOM_CHARACTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_SET_DEFAULT_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_GET_DEFAULT_TEXT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_SET_DEFAULT_TEXT_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_GET_DEFAULT_TEXT_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLCD20x4.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD20x4.ButtonPressedCallback">
             <summary>
              This callback is triggered when a button is pressed. The parameter is
              the number of the button (0 to 2 or 0 to 3 since hardware version 1.2).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD20x4.ButtonPressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD20x4.ButtonPressed">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD20x4.ButtonReleasedCallback">
             <summary>
              This callback is triggered when a button is released. The parameter is
              the number of the button (0 to 2 or 0 to 3 since hardware version 1.2).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLCD20x4.ButtonReleasedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLCD20x4.ButtonReleased">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              The text can have a maximum of 20 characters.
              
              For example: (0, 7, "Hello") will write *Hello* in the middle of the
              first line of the display.
              
              The display uses a special charset that includes all ASCII characters except
              backslash and tilde. The LCD charset also includes several other non-ASCII characters, see
              the `charset specification &lt;https://github.com/Tinkerforge/lcd-20x4-bricklet/raw/master/datasheets/standard_charset.pdf&gt;`__
              for details. The Unicode example above shows how to specify non-ASCII characters
              and how to translate from Unicode to the LCD charset.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.ClearDisplay">
             <summary>
              Deletes all characters from the display.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.BacklightOn">
             <summary>
              Turns the backlight on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.BacklightOff">
             <summary>
              Turns the backlight off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.IsBacklightOn">
             <summary>
              Returns *true* if the backlight is on and *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.SetConfig(System.Boolean,System.Boolean)">
             <summary>
              Configures if the cursor (shown as "_") should be visible and if it
              should be blinking (shown as a blinking block). The cursor position
              is one character behind the the last text written with
              <see cref="M:Tinkerforge.BrickletLCD20x4.WriteLine(System.Byte,System.Byte,System.String)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.GetConfig(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLCD20x4.SetConfig(System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.IsButtonPressed(System.Byte)">
             <summary>
              Returns *true* if the button (0 to 2 or 0 to 3 since hardware version 1.2)
              is pressed.
              
              If you want to react on button presses and releases it is recommended to use
              the <see cref="E:Tinkerforge.BrickletLCD20x4.ButtonPressedCallback" /> and <see cref="E:Tinkerforge.BrickletLCD20x4.ButtonReleasedCallback" /> callbacks.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.SetCustomCharacter(System.Byte,System.Byte[])">
             <summary>
              The LCD 20x4 Bricklet can store up to 8 custom characters. The characters
              consist of 5x8 pixels and can be addressed with the index 0-7. To describe
              the pixels, the first 5 bits of 8 bytes are used. For example, to make
              a custom character "H", you should transfer the following:
              
              * ``character[0] = 0b00010001`` (decimal value 17)
              * ``character[1] = 0b00010001`` (decimal value 17)
              * ``character[2] = 0b00010001`` (decimal value 17)
              * ``character[3] = 0b00011111`` (decimal value 31)
              * ``character[4] = 0b00010001`` (decimal value 17)
              * ``character[5] = 0b00010001`` (decimal value 17)
              * ``character[6] = 0b00010001`` (decimal value 17)
              * ``character[7] = 0b00000000`` (decimal value 0)
              
              The characters can later be written with <see cref="M:Tinkerforge.BrickletLCD20x4.WriteLine(System.Byte,System.Byte,System.String)" /> by using the
              characters with the byte representation 8 ("\\x08" or "\\u0008") to 15
              ("\\x0F" or "\\u000F").
              
              You can play around with the custom characters in Brick Viewer version
              since 2.0.1.
              
              Custom characters are stored by the LCD in RAM, so they have to be set
              after each startup.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.GetCustomCharacter(System.Byte)">
             <summary>
              Returns the custom character for a given index, as set with
              <see cref="M:Tinkerforge.BrickletLCD20x4.SetCustomCharacter(System.Byte,System.Byte[])" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.SetDefaultText(System.Byte,System.String)">
             <summary>
              Sets the default text for lines 0-3. The max number of characters
              per line is 20.
              
              The default text is shown on the LCD, if the default text counter
              expires, see <see cref="M:Tinkerforge.BrickletLCD20x4.SetDefaultTextCounter(System.Int32)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.GetDefaultText(System.Byte)">
             <summary>
              Returns the default text for a given line (0-3) as set by
              <see cref="M:Tinkerforge.BrickletLCD20x4.SetDefaultText(System.Byte,System.String)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.SetDefaultTextCounter(System.Int32)">
             <summary>
              Sets the default text counter. This counter is decremented each
              ms by the LCD firmware. If the counter reaches 0, the default text
              (see <see cref="M:Tinkerforge.BrickletLCD20x4.SetDefaultText(System.Byte,System.String)" />) is shown on the LCD.
              
              This functionality can be used to show a default text if the controlling
              program crashes or the connection is interrupted.
              
              A possible approach is to call <see cref="M:Tinkerforge.BrickletLCD20x4.SetDefaultTextCounter(System.Int32)" /> every
              minute with the parameter 1000*60*2 (2 minutes). In this case the
              default text will be shown no later than 2 minutes after the
              controlling program crashes.
              
              A negative counter turns the default text functionality off.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.GetDefaultTextCounter">
             <summary>
              Returns the current value of the default text counter.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.OnButtonPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLCD20x4.OnButtonReleasedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLEDStrip">
             <summary>
              Controls up to 320 RGB LEDs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_RGB_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_RGB_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_SUPPLY_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_CLOCK_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_CLOCK_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_CHIP_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_CHIP_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_RGBW_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_RGBW_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_SET_CHANNEL_MAPPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_CHANNEL_MAPPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_ENABLE_FRAME_RENDERED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_DISABLE_FRAME_RENDERED_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_IS_FRAME_RENDERED_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHIP_TYPE_WS2801">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHIP_TYPE_WS2811">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHIP_TYPE_WS2812">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHIP_TYPE_LPD8806">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHIP_TYPE_APA102">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BRG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RGBW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RGWB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RBGW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RBWG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RWGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_RWBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GRWB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GRBW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GBWR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GBRW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GWBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_GWRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BRGW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BRWG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BGRW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BGWR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BWRG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_BWGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WRBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WRGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WGBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WGRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WBGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStrip.CHANNEL_MAPPING_WBRG">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback">
             <summary>
              This callback is triggered directly after a new frame is rendered. The
              parameter is the number of RGB or RGBW LEDs in that frame.
              
              You should send the data for the next frame directly after this callback
              was triggered.
              
              For an explanation of the general approach see <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLEDStrip.FrameRenderedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLEDStrip.FrameRendered">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])">
             <summary>
              Sets *length* RGB values for the LEDs starting from *index*.
              
              To make the colors show correctly you need to configure the chip type
              (<see cref="M:Tinkerforge.BrickletLEDStrip.SetChipType(System.Int32)" />) and a 3-channel channel mapping (<see cref="M:Tinkerforge.BrickletLEDStrip.SetChannelMapping(System.Byte)" />)
              according to the connected LEDs.
              
              Example: If you set
              
              * index to 5,
              * length to 3,
              * r to [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              * g to [0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] and
              * b to [0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
              
              the LED with index 5 will be red, 6 will be green and 7 will be blue.
              
              .. note:: Depending on the LED circuitry colors can be permuted.
              
              The colors will be transfered to actual LEDs when the next
              frame duration ends, see <see cref="M:Tinkerforge.BrickletLEDStrip.SetFrameDuration(System.Int32)" />.
              
              Generic approach:
              
              * Set the frame duration to a value that represents
                the number of frames per second you want to achieve.
              * Set all of the LED colors for one frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              * Set all of the LED colors for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              * and so on.
              
              This approach ensures that you can change the LED colors with
              a fixed frame rate.
              
              The actual number of controllable LEDs depends on the number of free
              Bricklet ports. See :ref:`here &lt;led_strip_bricklet_ram_constraints&gt;` for more
              information. A call of <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" /> with index + length above the
              bounds is ignored completely.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetRGBValues(System.Int32,System.Byte,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
             <summary>
              Returns *length* R, G and B values starting from the
              given LED *index*.
              
              The values are the last values that were set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetFrameDuration(System.Int32)">
             <summary>
              Sets the frame duration.
              
              Example: If you want to achieve 20 frames per second, you should
              set the frame duration to 50ms (50ms * 20 = 1 second).
              
              For an explanation of the general approach see <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetFrameDuration">
             <summary>
              Returns the frame duration as set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetFrameDuration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetSupplyVoltage">
             <summary>
              Returns the current supply voltage of the LEDs.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetClockFrequency(System.Int64)">
             <summary>
              Sets the frequency of the clock.
              
              The Bricklet will choose the nearest achievable frequency, which may
              be off by a few Hz. You can get the exact frequency that is used by
              calling <see cref="M:Tinkerforge.BrickletLEDStrip.GetClockFrequency" />.
              
              If you have problems with flickering LEDs, they may be bits flipping. You
              can fix this by either making the connection between the LEDs and the
              Bricklet shorter or by reducing the frequency.
              
              With a decreasing frequency your maximum frames per second will decrease
              too.
              
              <note>
               The frequency in firmware version 2.0.0 is fixed at 2MHz.
              </note>
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetClockFrequency">
             <summary>
              Returns the currently used clock frequency as set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetClockFrequency(System.Int64)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetChipType(System.Int32)">
             <summary>
              Sets the type of the LED driver chip. We currently support the chips
              
              * WS2801,
              * WS2811,
              * WS2812 / SK6812 / NeoPixel RGB,
              * SK6812RGBW / NeoPixel RGBW (Chip Type = WS2812),
              * LPD8806 and
              * APA102 / DotStar.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetChipType">
             <summary>
              Returns the currently used chip type as set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetChipType(System.Int32)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             <summary>
              Sets *length* RGBW values for the LEDs starting from *index*.
              
              To make the colors show correctly you need to configure the chip type
              (<see cref="M:Tinkerforge.BrickletLEDStrip.SetChipType(System.Int32)" />) and a 4-channel channel mapping (<see cref="M:Tinkerforge.BrickletLEDStrip.SetChannelMapping(System.Byte)" />)
              according to the connected LEDs.
              
              The maximum length is 12, the index goes from 0 to 239 and the rgbw values
              have 8 bits each.
              
              Example: If you set
              
              * index to 5,
              * length to 4,
              * r to [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              * g to [0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              * b to [0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0] and
              * w to [0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0]
              
              the LED with index 5 will be red, 6 will be green, 7 will be blue and 8 will be white.
              
              .. note:: Depending on the LED circuitry colors can be permuted.
              
              The colors will be transfered to actual LEDs when the next
              frame duration ends, see <see cref="M:Tinkerforge.BrickletLEDStrip.SetFrameDuration(System.Int32)" />.
              
              Generic approach:
              
              * Set the frame duration to a value that represents
                the number of frames per second you want to achieve.
              * Set all of the LED colors for one frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              * Set all of the LED colors for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              * and so on.
              
              This approach ensures that you can change the LED colors with
              a fixed frame rate.
              
              The actual number of controllable LEDs depends on the number of free
              Bricklet ports. See :ref:`here &lt;led_strip_bricklet_ram_constraints&gt;` for more
              information. A call of <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])" /> with index + length above the
              bounds is ignored completely.
              
              The LPD8806 LED driver chips have 7-bit channels for RGB. Internally the LED
              Strip Bricklets divides the 8-bit values set using this function by 2 to make
              them 7-bit. Therefore, you can just use the normal value range (0-255) for
              LPD8806 LEDs.
              
              The brightness channel of the APA102 LED driver chips has 5-bit. Internally the
              LED Strip Bricklets divides the 8-bit values set using this function by 8 to make
              them 5-bit. Therefore, you can just use the normal value range (0-255) for
              the brightness channel of APA102 LEDs.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetRGBWValues(System.Int32,System.Byte,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
             <summary>
              Returns *length* RGBW values starting from the given *index*.
              
              The values are the last values that were set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])" />.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.SetChannelMapping(System.Byte)">
             <summary>
              Sets the channel mapping for the connected LEDs.
              
              <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" /> and <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])" /> take the data in RGB(W) order.
              But the connected LED driver chips might have their 3 or 4 channels in a
              different order. For example, the WS2801 chips typically use BGR order, the
              WS2812 chips typically use GRB order and the APA102 chips typically use WBGR
              order.
              
              The APA102 chips are special. They have three 8-bit channels for RGB
              and an additional 5-bit channel for the overall brightness of the RGB LED
              making them 4-channel chips. Internally the brightness channel is the first
              channel, therefore one of the Wxyz channel mappings should be used. Then
              the W channel controls the brightness.
              
              If a 3-channel mapping is selected then <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" /> has to be used.
              Calling <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])" /> with a 3-channel mapping will produce incorrect
              results. Vice-versa if a 4-channel mapping is selected then
              <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBWValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])" /> has to be used. Calling <see cref="M:Tinkerforge.BrickletLEDStrip.SetRGBValues(System.Int32,System.Byte,System.Byte[],System.Byte[],System.Byte[])" /> with a
              4-channel mapping will produce incorrect results.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetChannelMapping">
             <summary>
              Returns the currently used channel mapping as set by <see cref="M:Tinkerforge.BrickletLEDStrip.SetChannelMapping(System.Byte)" />.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.EnableFrameRenderedCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              
              By default the callback is enabled.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.DisableFrameRenderedCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback.
              
              By default the callback is enabled.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.IsFrameRenderedCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletLEDStrip.FrameRenderedCallback" /> callback is enabled, *false* otherwise.
              
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStrip.OnFrameRenderedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLEDStripV2">
             <summary>
              Controls up to 2048 RGB(W) LEDs
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_LED_VALUES_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_LED_VALUES_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_SUPPLY_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_CLOCK_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_CLOCK_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_CHIP_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_CHIP_TYPE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_CHANNEL_MAPPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_CHANNEL_MAPPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_FRAME_STARTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_FRAME_STARTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHIP_TYPE_WS2801">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHIP_TYPE_WS2811">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHIP_TYPE_WS2812">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHIP_TYPE_LPD8806">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHIP_TYPE_APA102">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BRG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RGBW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RGWB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RBGW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RBWG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RWGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_RWBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GRWB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GRBW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GBWR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GBRW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GWBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_GWRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BRGW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BRWG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BGRW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BGWR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BWRG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_BWGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WRBG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WRGB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WGBR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WGRB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WBGR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.CHANNEL_MAPPING_WBRG">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLEDStripV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback">
             <summary>
              This callback is triggered directly after a new frame render is started.
              The parameter is the number of LEDs in that frame.
              
              You should send the data for the next frame directly after this callback
              was triggered.
              
              For an explanation of the general approach see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetLEDValues(System.Int32,System.Byte[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLEDStripV2.FrameStartedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetLEDValuesLowLevel(System.Int32,System.Int32,System.Int32,System.Byte[])">
             <summary>
              Sets the RGB(W) values for the LEDs starting from *index*.
              You can set at most 2048 RGB values or 1536 RGBW values (6144 byte each).
              
              To make the colors show correctly you need to configure the chip type
              (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChipType(System.Int32)" />) and a channel mapping (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChannelMapping(System.Byte)" />)
              according to the connected LEDs.
              
              If the channel mapping has 3 colors, you need to give the data in the sequence
              RGBRGBRGB... if the channel mapping has 4 colors you need to give data in the
              sequence RGBWRGBWRGBW...
              
              The data is double buffered and the colors will be transfered to the
              LEDs when the next frame duration ends (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetFrameDuration(System.Int32)" />).
              
              Generic approach:
              
              * Set the frame duration to a value that represents the number of frames per
                second you want to achieve.
              * Set all of the LED colors for one frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback" /> callback.
              * Set all of the LED colors for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback" /> callback.
              * And so on.
              
              This approach ensures that you can change the LED colors with a fixed frame rate.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetLEDValuesLowLevel(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns *length* RGB(W) values starting from the
              given *index*.
              
              If the channel mapping has 3 colors, you will get the data in the sequence
              RGBRGBRGB... if the channel mapping has 4 colors you will get the data in the
              sequence RGBWRGBWRGBW...
              (assuming you start at an index divisible by 3 (RGB) or 4 (RGBW)).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetFrameDuration(System.Int32)">
             <summary>
              Sets the frame duration.
              
              Example: If you want to achieve 20 frames per second, you should
              set the frame duration to 50ms (50ms * 20 = 1 second).
              
              For an explanation of the general approach see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetLEDValues(System.Int32,System.Byte[])" />.
              
              Default value: 100ms (10 frames per second).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetFrameDuration">
             <summary>
              Returns the frame duration as set by <see cref="M:Tinkerforge.BrickletLEDStripV2.SetFrameDuration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetSupplyVoltage">
             <summary>
              Returns the current supply voltage of the LEDs.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetClockFrequency(System.Int64)">
             <summary>
              Sets the frequency of the clock.
              
              The Bricklet will choose the nearest achievable frequency, which may
              be off by a few Hz. You can get the exact frequency that is used by
              calling <see cref="M:Tinkerforge.BrickletLEDStripV2.GetClockFrequency" />.
              
              If you have problems with flickering LEDs, they may be bits flipping. You
              can fix this by either making the connection between the LEDs and the
              Bricklet shorter or by reducing the frequency.
              
              With a decreasing frequency your maximum frames per second will decrease
              too.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetClockFrequency">
             <summary>
              Returns the currently used clock frequency as set by <see cref="M:Tinkerforge.BrickletLEDStripV2.SetClockFrequency(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetChipType(System.Int32)">
             <summary>
              Sets the type of the LED driver chip. We currently support the chips
              
              * WS2801,
              * WS2811,
              * WS2812 / SK6812 / NeoPixel RGB,
              * SK6812RGBW / NeoPixel RGBW (Chip Type = WS2812),
              * WS2813 / WS2815 (Chip Type = WS2812)
              * LPD8806 and
              * APA102 / DotStar.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetChipType">
             <summary>
              Returns the currently used chip type as set by <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChipType(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetChannelMapping(System.Byte)">
             <summary>
              Sets the channel mapping for the connected LEDs.
              
              If the mapping has 4 colors, the function <see cref="M:Tinkerforge.BrickletLEDStripV2.SetLEDValues(System.Int32,System.Byte[])" /> expects 4
              values per pixel and if the mapping has 3 colors it expects 3 values per pixel.
              
              The function always expects the order RGB(W). The connected LED driver chips
              might have their 3 or 4 channels in a different order. For example, the WS2801
              chips typically use BGR order, then WS2812 chips typically use GRB order and
              the APA102 chips typically use WBGR order.
              
              The APA102 chips are special. They have three 8-bit channels for RGB
              and an additional 5-bit channel for the overall brightness of the RGB LED
              making them 4-channel chips. Internally the brightness channel is the first
              channel, therefore one of the Wxyz channel mappings should be used. Then
              the W channel controls the brightness.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetChannelMapping">
             <summary>
              Returns the currently used channel mapping as set by <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChannelMapping(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetFrameStartedCallbackConfiguration(System.Boolean)">
             <summary>
              Enables/disables the <see cref="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetFrameStartedCallbackConfiguration">
             <summary>
              Returns the configuration as set by
              <see cref="M:Tinkerforge.BrickletLEDStripV2.SetFrameStartedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletLEDStripV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletLEDStripV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLEDStripV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.SetLEDValues(System.Int32,System.Byte[])">
             <summary>
              Sets the RGB(W) values for the LEDs starting from *index*.
              You can set at most 2048 RGB values or 1536 RGBW values (6144 byte each).
              
              To make the colors show correctly you need to configure the chip type
              (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChipType(System.Int32)" />) and a channel mapping (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetChannelMapping(System.Byte)" />)
              according to the connected LEDs.
              
              If the channel mapping has 3 colors, you need to give the data in the sequence
              RGBRGBRGB... if the channel mapping has 4 colors you need to give data in the
              sequence RGBWRGBWRGBW...
              
              The data is double buffered and the colors will be transfered to the
              LEDs when the next frame duration ends (see <see cref="M:Tinkerforge.BrickletLEDStripV2.SetFrameDuration(System.Int32)" />).
              
              Generic approach:
              
              * Set the frame duration to a value that represents the number of frames per
                second you want to achieve.
              * Set all of the LED colors for one frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback" /> callback.
              * Set all of the LED colors for next frame.
              * Wait for the <see cref="E:Tinkerforge.BrickletLEDStripV2.FrameStartedCallback" /> callback.
              * And so on.
              
              This approach ensures that you can change the LED colors with a fixed frame rate.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.GetLEDValues(System.Int32,System.Int32)">
             <summary>
              Returns *length* RGB(W) values starting from the
              given *index*.
              
              If the channel mapping has 3 colors, you will get the data in the sequence
              RGBRGBRGB... if the channel mapping has 4 colors you will get the data in the
              sequence RGBWRGBWRGBW...
              (assuming you start at an index divisible by 3 (RGB) or 4 (RGBW)).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLEDStripV2.OnFrameStartedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinder">
             <summary>
              Measures distance up to 40m with laser light
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_DISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_DISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_VELOCITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_VELOCITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_DISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_VELOCITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_VELOCITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_ENABLE_LASER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_DISABLE_LASER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_IS_LASER_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_SENSOR_HARDWARE_VERSION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.MODE_DISTANCE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.MODE_VELOCITY_MAX_13MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.MODE_VELOCITY_MAX_32MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.MODE_VELOCITY_MAX_64MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.MODE_VELOCITY_MAX_127MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.VERSION_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinder.VERSION_3">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.DistanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackPeriod(System.Int64)" />. The parameter is the distance
              value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceCallback" /> callback is only triggered if the distance value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinder.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.Distance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.VelocityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackPeriod(System.Int64)" />. The parameter is the velocity
              value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityCallback" /> callback is only triggered if the velocity has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinder.VelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.Velocity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.DistanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the distance value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinder.DistanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.DistanceReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.VelocityReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the velocity value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinder.VelocityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinder.VelocityReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetDistance">
             <summary>
              Returns the measured distance.
              
              Sensor hardware version 1 (see <see cref="M:Tinkerforge.BrickletLaserRangeFinder.GetSensorHardwareVersion" />) cannot
              measure distance and velocity at the same time. Therefore, the distance mode
              has to be enabled using <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetMode(System.Byte)" />.
              Sensor hardware version 3 can measure distance and velocity at the same
              time. Also the laser has to be enabled, see <see cref="M:Tinkerforge.BrickletLaserRangeFinder.EnableLaser" />.
              
              If you want to get the distance periodically, it is recommended to
              use the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetVelocity">
             <summary>
              Returns the measured velocity.
              
              Sensor hardware version 1 (see <see cref="M:Tinkerforge.BrickletLaserRangeFinder.GetSensorHardwareVersion" />) cannot
              measure distance and velocity at the same time. Therefore, the velocity mode
              has to be enabled using <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetMode(System.Byte)" />.
              Sensor hardware version 3 can measure distance and velocity at the same
              time, but the velocity measurement only produces stables results if a fixed
              measurement rate (see <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)" />) is configured. Also the laser
              has to be enabled, see <see cref="M:Tinkerforge.BrickletLaserRangeFinder.EnableLaser" />.
              
              If you want to get the velocity periodically, it is recommended to
              use the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceCallback" /> callback is only triggered if the distance value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetDistanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityCallback" /> callback is only triggered if the velocity value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetVelocityCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the distance value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the distance value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the distance value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the distance value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetDistanceCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the velocity is *outside* the min and max values"
               "'i'",    "Callback is triggered when the velocity is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the velocity is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the velocity is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetVelocityCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletLaserRangeFinder.DistanceReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletLaserRangeFinder.VelocityReachedCallback" />,
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetVelocityCallbackThreshold(System.Char,System.Int16,System.Int16)" />,
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetMovingAverage(System.Byte,System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the distance and velocity.
              
              Setting the length to 0 will turn the averaging completely off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetMovingAverage(System.Byte@,System.Byte@)">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetMovingAverage(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetMode(System.Byte)">
             <summary>
              <note>
               This function is only available if you have a LIDAR-Lite sensor with hardware
               version 1. Use <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)" /> for hardware version 3. You can check
               the sensor hardware version using <see cref="M:Tinkerforge.BrickletLaserRangeFinder.GetSensorHardwareVersion" />.
              </note>
              
              The LIDAR-Lite sensor (hardware version 1) has five different modes. One mode is
              for distance measurements and four modes are for velocity measurements with
              different ranges.
              
              The following modes are available:
              
              * 0: Distance is measured with resolution 1.0 cm and range 0-4000 cm
              * 1: Velocity is measured with resolution 0.1 m/s and range is 0-12.7 m/s
              * 2: Velocity is measured with resolution 0.25 m/s and range is 0-31.75 m/s
              * 3: Velocity is measured with resolution 0.5 m/s and range is 0-63.5 m/s
              * 4: Velocity is measured with resolution 1.0 m/s and range is 0-127 m/s
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetMode">
             <summary>
              Returns the mode as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.EnableLaser">
             <summary>
              Activates the laser of the LIDAR.
              
              We recommend that you wait 250ms after enabling the laser before
              the first call of <see cref="M:Tinkerforge.BrickletLaserRangeFinder.GetDistance" /> to ensure stable measurements.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.DisableLaser">
             <summary>
              Deactivates the laser of the LIDAR.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.IsLaserEnabled">
             <summary>
              Returns *true* if the laser is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetSensorHardwareVersion">
             <summary>
              Returns the LIDAR-Lite hardware version.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)">
             <summary>
              <note>
               This function is only available if you have a LIDAR-Lite sensor with hardware
               version 3. Use <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetMode(System.Byte)" /> for hardware version 1. You can check
               the sensor hardware version using <see cref="M:Tinkerforge.BrickletLaserRangeFinder.GetSensorHardwareVersion" />.
              </note>
              
              The **Acquisition Count** defines the number of times the Laser Range Finder Bricklet
              will integrate acquisitions to find a correlation record peak. With a higher count,
              the Bricklet can measure longer distances. With a lower count, the rate increases. The
              allowed values are 1-255.
              
              If you set **Enable Quick Termination** to true, the distance measurement will be terminated
              early if a high peak was already detected. This means that a higher measurement rate can be achieved
              and long distances can be measured at the same time. However, the chance of false-positive
              distance measurements increases.
              
              Normally the distance is calculated with a detection algorithm that uses peak value,
              signal strength and noise. You can however also define a fixed **Threshold Value**.
              Set this to a low value if you want to measure the distance to something that has
              very little reflection (e.g. glass) and set it to a high value if you want to measure
              the distance to something with a very high reflection (e.g. mirror). Set this to 0 to
              use the default algorithm. The other allowed values are 1-255.
              
              Set the **Measurement Frequency** to force a fixed measurement rate. If set to 0,
              the Laser Range Finder Bricklet will use the optimal frequency according to the other
              configurations and the actual measured distance. Since the rate is not fixed in this case,
              the velocity measurement is not stable. For a stable velocity measurement you should
              set a fixed measurement frequency. The lower the frequency, the higher is the resolution
              of the calculated velocity. The allowed values are 10Hz-500Hz (and 0 to turn the fixed
              frequency off).
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetConfiguration(System.Byte@,System.Boolean@,System.Byte@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinder.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.OnVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.OnDistanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinder.OnVelocityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinderV2">
             <summary>
              Measures distance up to 40m with laser light
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_DISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_DISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_OFFSET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_OFFSET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_DISTANCE_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DISTANCE_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DISTANCE_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DISTANCE_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.DISTANCE_LED_CONFIG_SHOW_DISTANCE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLaserRangeFinderV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinderV2.DistanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.GetDistance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinderV2.DistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLaserRangeFinderV2.VelocityCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetVelocityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.GetVelocity" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLaserRangeFinderV2.VelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetDistance">
             <summary>
              Returns the measured distance.
              
              The laser has to be enabled, see <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetEnable(System.Boolean)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.DistanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.DistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.DistanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetDistanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetVelocity">
             <summary>
              Returns the measured velocity. The value has a range of -12800 to 12700
              and is given in 1/100 m/s.
              
              The velocity measurement only produces stables results if a fixed
              measurement rate (see <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)" />) is configured. Also the laser
              has to be enabled, see <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetEnable(System.Boolean)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.VelocityCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetVelocityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetVelocityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.VelocityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletLaserRangeFinderV2.VelocityCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetVelocityCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetVelocityCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetEnable(System.Boolean)">
             <summary>
              Enables the laser of the LIDAR if set to *true*.
              
              We recommend that you wait 250ms after enabling the laser before
              the first call of <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.GetDistance" /> to ensure stable measurements.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetEnable">
             <summary>
              Returns the value as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetEnable(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)">
             <summary>
              The **Acquisition Count** defines the number of times the Laser Range Finder Bricklet
              will integrate acquisitions to find a correlation record peak. With a higher count,
              the Bricklet can measure longer distances. With a lower count, the rate increases. The
              allowed values are 1-255.
              
              If you set **Enable Quick Termination** to true, the distance measurement will be terminated
              early if a high peak was already detected. This means that a higher measurement rate can be achieved
              and long distances can be measured at the same time. However, the chance of false-positive
              distance measurements increases.
              
              Normally the distance is calculated with a detection algorithm that uses peak value,
              signal strength and noise. You can however also define a fixed **Threshold Value**.
              Set this to a low value if you want to measure the distance to something that has
              very little reflection (e.g. glass) and set it to a high value if you want to measure
              the distance to something with a very high reflection (e.g. mirror). Set this to 0 to
              use the default algorithm. The other allowed values are 1-255.
              
              Set the **Measurement Frequency** to force a fixed measurement rate. If set to 0,
              the Laser Range Finder Bricklet will use the optimal frequency according to the other
              configurations and the actual measured distance. Since the rate is not fixed in this case,
              the velocity measurement is not stable. For a stable velocity measurement you should
              set a fixed measurement frequency. The lower the frequency, the higher is the resolution
              of the calculated velocity. The allowed values are 10Hz-500Hz (and 0 to turn the fixed
              frequency off).
              
              The default values for Acquisition Count, Enable Quick Termination, Threshold Value and
              Measurement Frequency are 128, false, 0 and 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetConfiguration(System.Byte@,System.Boolean@,System.Byte@,System.Int32@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetConfiguration(System.Byte,System.Boolean,System.Byte,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetMovingAverage(System.Byte,System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the distance and velocity.
              
              Setting the length to 0 will turn the averaging completely off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetMovingAverage(System.Byte@,System.Byte@)">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetMovingAverage(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetOffsetCalibration(System.Int16)">
             <summary>
              The offset is added to the measured distance.
              It is saved in non-volatile memory, you only have to set it once.
              
              The Bricklet comes with a per-sensor factory-calibrated offset value,
              you should not have to call this function.
              
              If you want to re-calibrate the offset you first have to set it to 0.
              Calculate the offset by measuring the distance to a known distance
              and set it again.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetOffsetCalibration">
             <summary>
              Returns the offset value as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetOffsetCalibration(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceLEDConfig(System.Byte)">
             <summary>
              Configures the distance LED to be either turned off, turned on, blink in
              heartbeat mode or show the distance (brighter = object is nearer).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetDistanceLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetDistanceLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLaserRangeFinderV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.OnDistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLaserRangeFinderV2.OnVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLine">
             <summary>
              Measures reflectivity of a surface
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_GET_REFLECTIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_SET_REFLECTIVITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_GET_REFLECTIVITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_SET_REFLECTIVITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_GET_REFLECTIVITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLine.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLine.ReflectivityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackPeriod(System.Int64)" />. The parameter is the
              reflectivity of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletLine.ReflectivityCallback" /> callback is only triggered if the reflectivity has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLine.ReflectivityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLine.Reflectivity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLine.ReflectivityReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the reflectivity of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLine.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLine.ReflectivityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLine.ReflectivityReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.GetReflectivity">
             <summary>
              Returns the currently measured reflectivity. The reflectivity is
              a value between 0 (not reflective) and 4095 (very reflective).
              
              Usually black has a low reflectivity while white has a high
              reflectivity.
              
              If you want to get the reflectivity periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletLine.ReflectivityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.SetReflectivityCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLine.ReflectivityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLine.ReflectivityCallback" /> callback is only triggered if the reflectivity has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.GetReflectivityCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.SetReflectivityCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLine.ReflectivityReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the reflectivity is *outside* the min and max values"
               "'i'",    "Callback is triggered when the reflectivity is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the reflectivity is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the reflectivity is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.GetReflectivityCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletLine.ReflectivityReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletLine.SetReflectivityCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletLine.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.OnReflectivityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLine.OnReflectivityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPoti">
             <summary>
              59mm linear potentiometer
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_SET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_SET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPoti.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.PositionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackPeriod(System.Int64)" />. The parameter is the position
              of the linear potentiometer.
              
              The <see cref="E:Tinkerforge.BrickletLinearPoti.PositionCallback" /> callback is only triggered if the position has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPoti.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.Position">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the analog value of the
              Linear Potentiometer.
              
              The <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueCallback" /> callback is only triggered if the position has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPoti.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.PositionReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the position of the linear potentiometer.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPoti.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.PositionReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the linear potentiometer.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPoti.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPoti.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetPosition">
             <summary>
              Returns the position of the linear potentiometer. The value is
              between 0% (slider down) and 100% (slider up).
              
              If you want to get the position periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLinearPoti.PositionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletLinearPoti.GetPosition" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletLinearPoti.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletLinearPoti.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLinearPoti.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLinearPoti.PositionCallback" /> callback is only triggered if the position has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetPositionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLinearPoti.PositionReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the position is *outside* the min and max values"
               "'i'",    "Callback is triggered when the position is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the position is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the position is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetPositionCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletLinearPoti.PositionReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletLinearPoti.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletLinearPoti.SetPositionCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletLinearPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletLinearPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPoti.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPotiV2">
             <summary>
              59mm linear potentiometer
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_SET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLinearPotiV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLinearPotiV2.PositionCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Byte,System.Byte)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletLinearPotiV2.GetPosition" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLinearPotiV2.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetPosition">
             <summary>
              Returns the position of the linear potentiometer. The value is
              between 0% (slider down) and 100% (slider up).
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLinearPotiV2.PositionCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Byte,System.Byte)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLinearPotiV2.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletLinearPotiV2.PositionCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetPositionCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Byte@,System.Byte@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletLinearPotiV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLinearPotiV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLinearPotiV2.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLoadCell">
             <summary>
              Measures weight with a load cell
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_WEIGHT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_SET_WEIGHT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_WEIGHT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_SET_WEIGHT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_WEIGHT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_LED_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_LED_OFF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_IS_LED_ON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_TARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.RATE_10HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.RATE_80HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.GAIN_128X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.GAIN_64X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCell.GAIN_32X">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLoadCell.WeightCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackPeriod(System.Int64)" />. The parameter is the weight
              as measured by the load cell.
              
              The <see cref="E:Tinkerforge.BrickletLoadCell.WeightCallback" /> callback is only triggered if the weight has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLoadCell.WeightEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLoadCell.Weight">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLoadCell.WeightReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the weight as measured by the load cell.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLoadCell.WeightReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLoadCell.WeightReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetWeight">
             <summary>
              Returns the currently measured weight.
              
              If you want to get the weight periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletLoadCell.WeightCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletLoadCell.WeightCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletLoadCell.WeightCallback" /> callback is only triggered if the weight has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetWeightCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletLoadCell.WeightReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the weight is *outside* the min and max values"
               "'i'",    "Callback is triggered when the weight is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the weight is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the weight is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetWeightCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletLoadCell.WeightReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletLoadCell.SetWeightCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.SetMovingAverage(System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the weight value.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetMovingAverage">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetMovingAverage(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.LEDOn">
             <summary>
              Turns the LED on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.LEDOff">
             <summary>
              Turns the LED off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.IsLEDOn">
             <summary>
              Returns *true* if the led is on, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.Calibrate(System.Int64)">
             <summary>
              To calibrate your Load Cell Bricklet you have to
              
              * empty the scale and call this function with 0 and
              * add a known weight to the scale and call this function with the weight.
              
              The calibration is saved in the EEPROM of the Bricklet and only
              needs to be done once.
              
              We recommend to use the Brick Viewer for calibration, you don't need
              to call this function in your source code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.Tare">
             <summary>
              Sets the currently measured weight as tare weight.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              The measurement rate and gain are configurable.
              
              The rate can be either 10Hz or 80Hz. A faster rate will produce more noise.
              It is additionally possible to add a moving average
              (see <see cref="M:Tinkerforge.BrickletLoadCell.SetMovingAverage(System.Byte)" />) to the measurements.
              
              The gain can be 128x, 64x or 32x. It represents a measurement range of
              ±20mV, ±40mV and ±80mV respectively. The Load Cell Bricklet uses an
              excitation voltage of 5V and most load cells use an output of 2mV/V. That
              means the voltage range is ±15mV for most load cells (i.e. gain of 128x
              is best). If you don't know what all of this means you should keep it at
              128x, it will most likely be correct.
              
              The configuration is saved in the EEPROM of the Bricklet and only
              needs to be done once.
              
              We recommend to use the Brick Viewer for configuration, you don't need
              to call this function in your source code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLoadCell.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.OnWeightCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCell.OnWeightReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLoadCellV2">
             <summary>
              Measures weight with a load cell
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_WEIGHT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_WEIGHT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_WEIGHT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_INFO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_INFO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_TARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.INFO_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.INFO_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.INFO_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.RATE_10HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.RATE_80HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.GAIN_128X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.GAIN_64X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.GAIN_32X">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletLoadCellV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletLoadCellV2.WeightCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletLoadCellV2.SetWeightCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletLoadCellV2.GetWeight" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletLoadCellV2.WeightEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetWeight">
             <summary>
              Returns the currently measured weight.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletLoadCellV2.WeightCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletLoadCellV2.SetWeightCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetWeightCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletLoadCellV2.WeightCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletLoadCellV2.WeightCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetWeightCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletLoadCellV2.SetWeightCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetMovingAverage(System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the weight value.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetMovingAverage">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletLoadCellV2.SetMovingAverage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetInfoLEDConfig(System.Byte)">
             <summary>
              Configures the info LED to be either turned off, turned on, or blink in
              heartbeat mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetInfoLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletLoadCellV2.SetInfoLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.Calibrate(System.Int64)">
             <summary>
              To calibrate your Load Cell Bricklet 2.0 you have to
              
              * empty the scale and call this function with 0 and
              * add a known weight to the scale and call this function with the weight.
              
              The calibration is saved in the flash of the Bricklet and only
              needs to be done once.
              
              We recommend to use the Brick Viewer for calibration, you don't need
              to call this function in your source code.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.Tare">
             <summary>
              Sets the currently measured weight as tare weight.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              The measurement rate and gain are configurable.
              
              The rate can be either 10Hz or 80Hz. A faster rate will produce more noise.
              It is additionally possible to add a moving average
              (see <see cref="M:Tinkerforge.BrickletLoadCellV2.SetMovingAverage(System.Int32)" />) to the measurements.
              
              The gain can be 128x, 64x or 32x. It represents a measurement range of
              ±20mV, ±40mV and ±80mV respectively. The Load Cell Bricklet uses an
              excitation voltage of 5V and most load cells use an output of 2mV/V. That
              means the voltage range is ±15mV for most load cells (i.e. gain of 128x
              is best). If you don't know what all of this means you should keep it at
              128x, it will most likely be correct.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLoadCellV2.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletLoadCellV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletLoadCellV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletLoadCellV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletLoadCellV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletLoadCellV2.OnWeightCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMoisture">
             <summary>
              Measures soil moisture
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_MOISTURE_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_SET_MOISTURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_MOISTURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_SET_MOISTURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_MOISTURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_SET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_MOVING_AVERAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMoisture.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMoisture.MoistureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackPeriod(System.Int64)" />. The parameter is the
              moisture value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletMoisture.MoistureCallback" /> callback is only triggered if the moisture value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMoisture.MoistureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMoisture.Moisture">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMoisture.MoistureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the moisture value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletMoisture.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMoisture.MoistureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMoisture.MoistureReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetMoistureValue">
             <summary>
              Returns the current moisture value.
              A small value corresponds to little moisture, a big
              value corresponds to much moisture.
              
              If you want to get the moisture value periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletMoisture.MoistureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletMoisture.MoistureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletMoisture.MoistureCallback" /> callback is only triggered if the moisture value has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetMoistureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletMoisture.MoistureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the moisture value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the moisture value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the moisture value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the moisture value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetMoistureCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletMoisture.MoistureReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletMoisture.SetMoistureCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletMoisture.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.SetMovingAverage(System.Byte)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the moisture value.
              
              Setting the length to 0 will turn the averaging completely off. With less
              averaging, there is more noise on the data.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetMovingAverage">
             <summary>
              Returns the length moving average as set by <see cref="M:Tinkerforge.BrickletMoisture.SetMovingAverage(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.OnMoistureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMoisture.OnMoistureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetector">
             <summary>
              Passive infrared (PIR) motion sensor with 7m range
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.FUNCTION_GET_MOTION_DETECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.MOTION_NOT_DETECTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.MOTION_DETECTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetector.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetector.MotionDetectedCallback">
             <summary>
              This callback is called after a motion was detected.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetector.MotionDetectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetector.MotionDetected">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetector.DetectionCycleEndedCallback">
             <summary>
              This callback is called when the detection cycle ended. When this
              callback is called, a new motion can be detected again after approximately 2
              seconds.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetector.DetectionCycleEndedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetector.DetectionCycleEnded">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.GetMotionDetected">
             <summary>
              Returns 1 if a motion was detected. How long this returns 1 after a motion
              was detected can be adjusted with one of the small potentiometers on the
              Motion Detector Bricklet, see :ref:`here
              &lt;motion_detector_bricklet_sensitivity_delay_block_time&gt;`.
              
              There is also a blue LED on the Bricklet that is on as long as the Bricklet is
              in the "motion detected" state.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status led configuration.
              
              By default the status LED turns on if a motion is detected and off is no motion
              is detected.
              
              You can also turn the LED permanently on/off.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletMotionDetector.SetStatusLEDConfig(System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.OnMotionDetectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetector.OnDetectionCycleEndedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetectorV2">
             <summary>
              Passive infrared (PIR) motion sensor with 12m range and dimmable backlight
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_MOTION_DETECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_SET_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_SET_INDICATOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_INDICATOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.MOTION_NOT_DETECTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.MOTION_DETECTED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotionDetectorV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetectorV2.MotionDetectedCallback">
             <summary>
              This callback is called after a motion was detected.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetectorV2.MotionDetectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotionDetectorV2.DetectionCycleEndedCallback">
             <summary>
              This callback is called when the detection cycle ended. When this
              callback is called, a new motion can be detected again after approximately 2
              seconds.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotionDetectorV2.DetectionCycleEndedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetMotionDetected">
             <summary>
              Returns 1 if a motion was detected. It returns 1 approx. for 1.8 seconds
              until the sensor checks for a new movement.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.SetSensitivity(System.Byte)">
             <summary>
              Sets the sensitivity of the PIR sensor. At full
              sensitivity (100), the Bricklet can detect motion in a range of approximately 12m.
              
              The actual range depends on many things in the environment (e.g. reflections) and the
              size of the object to be detected. While a big person might be detected in a range
              of 10m a cat may only be detected at 2m distance with the same setting.
              
              So you will have to find a good sensitivity for your application by trial and error.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetSensitivity">
             <summary>
              Returns the sensitivity as set by <see cref="M:Tinkerforge.BrickletMotionDetectorV2.SetSensitivity(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.SetIndicator(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the blue backlight of the fresnel lens. The backlight consists of
              three LEDs. The brightness of each LED can be controlled with a 8-bit value
              (0-255). A value of 0 turns the LED off and a value of 255 turns the LED
              to full brightness.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetIndicator(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the indicator configuration as set by <see cref="M:Tinkerforge.BrickletMotionDetectorV2.SetIndicator(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletMotionDetectorV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletMotionDetectorV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletMotionDetectorV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletMotionDetectorV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.OnMotionDetectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotionDetectorV2.OnDetectionCycleEndedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotorizedLinearPoti">
             <summary>
              Motorized Linear Potentiometer
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_MOTOR_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_MOTOR_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_POSITION_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_POSITION_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.DRIVE_MODE_FAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.DRIVE_MODE_SMOOTH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMotorizedLinearPoti.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.GetPosition" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotorizedLinearPoti.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionReachedCallback">
             <summary>
              This callback is triggered if a new position as set by
              <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetMotorPosition(System.Int32,System.Byte,System.Boolean)" /> is reached.
              
              The parameter is the current position.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMotorizedLinearPoti.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetPosition">
             <summary>
              Returns the position of the linear potentiometer. The value is
              between 0 (slider down) and 100 (slider up).
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetPositionCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetMotorPosition(System.Int32,System.Byte,System.Boolean)">
             <summary>
              Sets the position of the potentiometer. The motorized potentiometer will
              immediately start to approach the position. Depending on the chosen drive mode,
              the position will either be reached as fast as possible or in a slow but smooth
              motion.
              
              The position has to be between 0 (slider down) and 100 (slider up).
              
              If you set the hold position parameter to true, the position will automatically
              be retained. If a user changes the position of the potentiometer, it will
              automatically drive back to the original set point.
              
              If the hold position parameter is set to false, the potentiometer can be changed
              again by the user as soon as the set point was reached once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetMotorPosition(System.Int32@,System.Byte@,System.Boolean@,System.Boolean@)">
             <summary>
              Returns the last motor position as set by <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetMotorPosition(System.Int32,System.Byte,System.Boolean)" />. This is not
              the current position (use <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.GetPosition" /> to get the current position). This
              is the last used set point and configuration.
              
              The position reached parameter is true if the position has been reached at one point.
              The position may have been changed again in the meantime by the user.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.Calibrate">
             <summary>
              Starts a calibration procedure. The potentiometer will be driven to the extreme
              points to calibrate the potentiometer.
              
              The calibration is saved in flash, it does not have to be called on every start up.
              
              The Motorized Linear Poti Bricklet is already factory-calibrated during
              testing at Tinkerforge.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionReachedCallbackConfiguration(System.Boolean)">
             <summary>
              Enables/Disables <see cref="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionReachedCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetPositionReachedCallbackConfiguration">
             <summary>
              Returns the <see cref="E:Tinkerforge.BrickletMotorizedLinearPoti.PositionReachedCallback" /> callback configuration
              as set by <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetPositionReachedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletMotorizedLinearPoti.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMotorizedLinearPoti.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMultiTouch">
             <summary>
              Capacitive touch sensor for 12 electrodes
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_GET_TOUCH_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_RECALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_SET_ELECTRODE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_GET_ELECTRODE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_SET_ELECTRODE_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_GET_ELECTRODE_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouch.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMultiTouch.TouchStateCallback">
             <summary>
              Returns the current touch state, see <see cref="M:Tinkerforge.BrickletMultiTouch.GetTouchState" /> for
              information about the state.
              
              This callback is triggered every time the touch state changes.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMultiTouch.TouchStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMultiTouch.TouchState">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.GetTouchState">
             <summary>
              Returns the current touch state. The state is given as a bitfield.
              
              Bits 0 to 11 represent the 12 electrodes and bit 12 represents
              the proximity.
              
              If an electrode is touched, the corresponding bit is *true*. If
              a hand or similar is in proximity to the electrodes, bit 12 is
              *true*.
              
              Example: The state 4103 = 0x1007 = 0b1000000000111 means that
              electrodes 0, 1 and 2 are touched and that something is in the
              proximity of the electrodes.
              
              The proximity is activated with a distance of 1-2cm. An electrode
              is already counted as touched if a finger is nearly touching the
              electrode. This means that you can put a piece of paper or foil
              or similar on top of a electrode to build a touch panel with
              a professional look.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.Recalibrate">
             <summary>
              Recalibrates the electrodes. Call this function whenever you changed
              or moved you electrodes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.SetElectrodeConfig(System.Int32)">
             <summary>
              Enables/disables electrodes with a bitfield (see <see cref="M:Tinkerforge.BrickletMultiTouch.GetTouchState" />).
              
              *True* enables the electrode, *false* disables the electrode. A
              disabled electrode will always return *false* as its state. If you
              don't need all electrodes you can disable the electrodes that are
              not needed.
              
              It is recommended that you disable the proximity bit (bit 12) if
              the proximity feature is not needed. This will reduce the amount of
              traffic that is produced by the <see cref="E:Tinkerforge.BrickletMultiTouch.TouchStateCallback" /> callback.
              
              Disabling electrodes will also reduce power consumption.
              
              Default: 8191 = 0x1FFF = 0b1111111111111 (all electrodes and proximity feature enabled)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.GetElectrodeConfig">
             <summary>
              Returns the electrode configuration, as set by <see cref="M:Tinkerforge.BrickletMultiTouch.SetElectrodeConfig(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.SetElectrodeSensitivity(System.Byte)">
             <summary>
              Sets the sensitivity of the electrodes. An electrode with a high sensitivity
              will register a touch earlier then an electrode with a low sensitivity.
              
              If you build a big electrode you might need to decrease the sensitivity, since
              the area that can be charged will get bigger. If you want to be able to
              activate an electrode from further away you need to increase the sensitivity.
              
              After a new sensitivity is set, you likely want to call <see cref="M:Tinkerforge.BrickletMultiTouch.Recalibrate" />
              to calibrate the electrodes with the newly defined sensitivity.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.GetElectrodeSensitivity">
             <summary>
              Returns the current sensitivity, as set by <see cref="M:Tinkerforge.BrickletMultiTouch.SetElectrodeSensitivity(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouch.OnTouchStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMultiTouchV2">
             <summary>
              Capacitive touch sensor for 12 electrodes
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_TOUCH_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_TOUCH_STATE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_TOUCH_STATE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_RECALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_ELECTRODE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_ELECTRODE_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_ELECTRODE_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_ELECTRODE_SENSITIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_TOUCH_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_TOUCH_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.TOUCH_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.TOUCH_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.TOUCH_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.TOUCH_LED_CONFIG_SHOW_TOUCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletMultiTouchV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletMultiTouchV2.TouchStateCallback">
             <summary>
              Returns the current touch state, see <see cref="M:Tinkerforge.BrickletMultiTouchV2.GetTouchState" /> for
              information about the state.
              
              This callback is triggered every time the touch state changes with
              a given period (see <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetTouchStateCallbackConfiguration(System.Int64,System.Boolean)" />)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletMultiTouchV2.TouchStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetTouchState">
             <summary>
              Returns the current touch state. The state is given as a array of
              bools.
              
              Element 0 to 11 represent the 12 electrodes and element 12 represents
              the proximity.
              
              If an electrode is touched, the corresponding element is *true*. If
              a hand or similar is in proximity to the electrodes, element 12 is
              *true*.
              
              The proximity is activated with a distance of 1-2cm. An electrode
              is already counted as touched if a finger is nearly touching the
              electrode. This means that you can put a piece of paper or foil
              or similar on top of a electrode to build a touch panel with
              a professional look.
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletMultiTouchV2.TouchStateCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetTouchStateCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetTouchStateCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletMultiTouchV2.TouchStateCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetTouchStateCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetTouchStateCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.Recalibrate">
             <summary>
              Recalibrates the electrodes. Call this function whenever you changed
              or moved you electrodes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetElectrodeConfig(System.Boolean[])">
             <summary>
              Enables/disables electrodes with a bool array (see <see cref="M:Tinkerforge.BrickletMultiTouchV2.GetTouchState" />).
              
              *True* enables the electrode, *false* disables the electrode. A
              disabled electrode will always return *false* as its state. If you
              don't need all electrodes you can disable the electrodes that are
              not needed.
              
              It is recommended that you disable the proximity electrode (element 12) if
              the proximity feature is not needed. This will reduce the amount of
              traffic that is produced by the <see cref="E:Tinkerforge.BrickletMultiTouchV2.TouchStateCallback" /> callback.
              
              Disabling electrodes will also reduce power consumption.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetElectrodeConfig">
             <summary>
              Returns the electrode configuration, as set by <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetElectrodeConfig(System.Boolean[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetElectrodeSensitivity(System.Byte)">
             <summary>
              Sets the sensitivity of the electrodes. An electrode with a high sensitivity
              will register a touch earlier then an electrode with a low sensitivity.
              
              If you build a big electrode you might need to decrease the sensitivity, since
              the area that can be charged will get bigger. If you want to be able to
              activate an electrode from further away you need to increase the sensitivity.
              
              After a new sensitivity is set, you likely want to call <see cref="M:Tinkerforge.BrickletMultiTouchV2.Recalibrate" />
              to calibrate the electrodes with the newly defined sensitivity.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetElectrodeSensitivity">
             <summary>
              Returns the current sensitivity, as set by <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetElectrodeSensitivity(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetTouchLEDConfig(System.Byte)">
             <summary>
              Configures the touch LED to be either turned off, turned on, blink in
              heartbeat mode or show the touch state (electrode touched = LED on).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetTouchLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetTouchLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletMultiTouchV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletMultiTouchV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletMultiTouchV2.OnTouchStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFC">
             <summary>
              NFC tag read/write, NFC P2P and Card Emulation
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_REQUEST_TAG_ID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_GET_TAG_ID_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_WRITE_NDEF_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_REQUEST_NDEF">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_READ_NDEF_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_AUTHENTICATE_MIFARE_CLASSIC_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_WRITE_PAGE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_REQUEST_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READER_READ_PAGE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_CARDEMU_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_CARDEMU_START_DISCOVERY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_CARDEMU_WRITE_NDEF_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_CARDEMU_START_TRANSFER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_P2P_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_P2P_START_DISCOVERY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_P2P_WRITE_NDEF_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_P2P_START_TRANSFER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_P2P_READ_NDEF_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_DETECTION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_DETECTION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_MAXIMUM_TIMEOUT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_MAXIMUM_TIMEOUT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SIMPLE_GET_TAG_ID_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.MODE_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.MODE_CARDEMU">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.MODE_P2P">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.MODE_READER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.MODE_SIMPLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.TAG_TYPE_MIFARE_CLASSIC">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.TAG_TYPE_TYPE1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.TAG_TYPE_TYPE2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.TAG_TYPE_TYPE3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.TAG_TYPE_TYPE4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_INITIALIZATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_TAG_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_TAG_ID_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_TAG_ID_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_NDEF_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_WRITE_NDEF_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_NDEF_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_STATE_REQUEST_NDEF_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.KEY_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.KEY_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_WRITE_TYPE4_CAPABILITY_CONTAINER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_WRITE_TYPE4_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_REQUEST_TYPE4_CAPABILITY_CONTAINER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.READER_REQUEST_TYPE4_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_INITIALIZATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_DISCOVER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_DISCOVER_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_DISCOVER_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_TRANSFER_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_TRANSFER_NDEF_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_STATE_TRANSFER_NDEF_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_TRANSFER_ABORT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.CARDEMU_TRANSFER_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_INITIALIZATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_DISCOVER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_DISCOVER_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_DISCOVER_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_TRANSFER_NDEF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_TRANSFER_NDEF_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_STATE_TRANSFER_NDEF_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_TRANSFER_ABORT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_TRANSFER_WRITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.P2P_TRANSFER_READ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DETECTION_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DETECTION_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DETECTION_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.DETECTION_LED_CONFIG_SHOW_DETECTION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFC.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback">
             <summary>
              This callback is called if the reader state of the NFC Bricklet changes.
              See <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> for more information about the possible states.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFC.ReaderStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletNFC.CardemuStateChangedCallback">
             <summary>
              This callback is called if the cardemu state of the NFC Bricklet changes.
              See <see cref="M:Tinkerforge.BrickletNFC.CardemuGetState(System.Byte@,System.Boolean@)" /> for more information about the possible states.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFC.CardemuStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletNFC.P2PStateChangedCallback">
             <summary>
              This callback is called if the P2P state of the NFC Bricklet changes.
              See <see cref="M:Tinkerforge.BrickletNFC.P2PGetState(System.Byte@,System.Boolean@)" /> for more information about the possible states.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFC.P2PStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetMode(System.Byte)">
             <summary>
              Sets the mode. The NFC Bricklet supports four modes:
              
              * Off
              * Card Emulation (Cardemu): Emulates a tag for other readers
              * Peer to Peer (P2P): Exchange data with other readers
              * Reader: Reads and writes tags
              * Simple: Automatically reads tag IDs
              
              If you change a mode, the Bricklet will reconfigure the hardware for this mode.
              Therefore, you can only use functions corresponding to the current mode. For
              example, in Reader mode you can only use Reader functions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetMode">
             <summary>
              Returns the mode as set by <see cref="M:Tinkerforge.BrickletNFC.SetMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderRequestTagID">
             <summary>
              After you call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" /> the NFC Bricklet will try to read
              the tag ID from the tag. After this process is done the state will change.
              You can either register the <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback or you can poll
              <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> to find out about the state change.
              
              If the state changes to *ReaderRequestTagIDError* it means that either there was
              no tag present or that the tag has an incompatible type. If the state
              changes to *ReaderRequestTagIDReady* it means that a compatible tag was found
              and that the tag ID has been saved. You can now read out the tag ID by
              calling <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" />.
              
              If two tags are in the proximity of the NFC Bricklet, this
              function will cycle through the tags. To select a specific tag you have
              to call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" /> until the correct tag ID is found.
              
              In case of any *ReaderError* state the selection is lost and you have to
              start again by calling <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderGetTagIDLowLevel(System.Byte@,System.Byte@,System.Byte[]@)">
             <summary>
              Returns the tag type and the tag ID. This function can only be called if the
              NFC Bricklet is currently in one of the *ReaderReady* states. The returned tag ID
              is the tag ID that was saved through the last call of <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />.
              
              To get the tag ID of a tag the approach is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)">
             <summary>
              Returns the current reader state of the NFC Bricklet.
              
              On startup the Bricklet will be in the *ReaderInitialization* state. The
              initialization will only take about 20ms. After that it changes to *ReaderIdle*.
              
              The Bricklet is also reinitialized if the mode is changed, see <see cref="M:Tinkerforge.BrickletNFC.SetMode(System.Byte)" />.
              
              The functions of this Bricklet can be called in the *ReaderIdle* state and all of
              the *ReaderReady* and *ReaderError* states.
              
              Example: If you call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)" />, the state will change to
              *ReaderRequestPage* until the reading of the page is finished. Then it will change
              to either *ReaderRequestPageReady* if it worked or to *ReaderRequestPageError* if it
              didn't. If the request worked you can get the page by calling <see cref="M:Tinkerforge.BrickletNFC.ReaderReadPage" />.
              
              The same approach is used analogously for the other API functions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderWriteNDEFLowLevel(System.Int32,System.Int32,System.Byte[])">
             <summary>
              Writes NDEF formated data.
              
              This function currently supports NFC Forum Type 2 and 4.
              
              The general approach for writing a NDEF message is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see
                 <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check
                 if the expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderWriteNDEF(System.Byte[])" /> with the NDEF message that you want to write
              5. Wait for state to change to *ReaderWriteNDEFReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderRequestNDEF">
             <summary>
              Reads NDEF formated data from a tag.
              
              This function currently supports NFC Forum Type 1, 2, 3 and 4.
              
              The general approach for reading a NDEF message is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestNDEF" />
              5. Wait for state to change to *ReaderRequestNDEFReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              6. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderReadNDEF" /> to retrieve the NDEF message from the buffer
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderReadNDEFLowLevel(System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the NDEF data from an internal buffer. To fill the buffer
              with a NDEF message you have to call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestNDEF" /> beforehand.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderAuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])">
             <summary>
              Mifare Classic tags use authentication. If you want to read from or write to
              a Mifare Classic page you have to authenticate it beforehand.
              Each page can be authenticated with two keys: A (``key_number`` = 0) and B
              (``key_number`` = 1). A new Mifare Classic
              tag that has not yet been written to can be accessed with key A
              and the default key ``[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]``.
              
              The approach to read or write a Mifare Classic page is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderAuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" /> with page and key for the page
              5. Wait for state to change to *ReaderAuthenticatingMifareClassicPageReady* (see
                 <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              6. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)" /> or <see cref="M:Tinkerforge.BrickletNFC.ReaderWritePage(System.Int32,System.Byte[])" /> to read/write page
              
              The authentication will always work for one whole sector (4 pages).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderWritePageLowLevel(System.Int32,System.Int32,System.Int32,System.Byte[])">
             <summary>
              Writes a maximum of 8192 bytes starting from the given page. How many pages are written
              depends on the tag type. The page sizes are as follows:
              
              * Mifare Classic page size: 16 byte
              * NFC Forum Type 1 page size: 8 byte
              * NFC Forum Type 2 page size: 4 byte
              * NFC Forum Type 3 page size: 16 byte
              * NFC Forum Type 4: No pages, page = file selection (CC or NDEF, see below)
              
              The general approach for writing to a tag is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderWritePage(System.Int32,System.Byte[])" /> with page number and data
              5. Wait for state to change to *ReaderWritePageReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              
              If you use a Mifare Classic tag you have to authenticate a page before you
              can write to it. See <see cref="M:Tinkerforge.BrickletNFC.ReaderAuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" />.
              
              NFC Forum Type 4 tags are not organized into pages but different files. We currently
              support two files: Capability Container file (CC) and NDEF file.
              
              Choose CC by setting page to 3 or NDEF by setting page to 4.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)">
             <summary>
              Reads a maximum of 8192 bytes starting from the given page and stores them into a buffer.
              The buffer can then be read out with <see cref="M:Tinkerforge.BrickletNFC.ReaderReadPage" />.
              How many pages are read depends on the tag type. The page sizes are
              as follows:
              
              * Mifare Classic page size: 16 byte
              * NFC Forum Type 1 page size: 8 byte
              * NFC Forum Type 2 page size: 4 byte
              * NFC Forum Type 3 page size: 16 byte
              * NFC Forum Type 4: No pages, page = file selection (CC or NDEF, see below)
              
              The general approach for reading a tag is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)" /> with page number
              5. Wait for state to change to *ReaderRequestPageReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              6. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderReadPage" /> to retrieve the page from the buffer
              
              If you use a Mifare Classic tag you have to authenticate a page before you
              can read it. See <see cref="M:Tinkerforge.BrickletNFC.ReaderAuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" />.
              
              NFC Forum Type 4 tags are not organized into pages but different files. We currently
              support two files: Capability Container file (CC) and NDEF file.
              
              Choose CC by setting page to 3 or NDEF by setting page to 4.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderReadPageLowLevel(System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the page data from an internal buffer. To fill the buffer
              with specific pages you have to call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)" /> beforehand.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.CardemuGetState(System.Byte@,System.Boolean@)">
             <summary>
              Returns the current cardemu state of the NFC Bricklet.
              
              On startup the Bricklet will be in the *CardemuInitialization* state. The
              initialization will only take about 20ms. After that it changes to *CardemuIdle*.
              
              The Bricklet is also reinitialized if the mode is changed, see <see cref="M:Tinkerforge.BrickletNFC.SetMode(System.Byte)" />.
              
              The functions of this Bricklet can be called in the *CardemuIdle* state and all of
              the *CardemuReady* and *CardemuError* states.
              
              Example: If you call <see cref="M:Tinkerforge.BrickletNFC.CardemuStartDiscovery" />, the state will change to
              *CardemuDiscover* until the discovery is finished. Then it will change
              to either *CardemuDiscoverReady* if it worked or to *CardemuDiscoverError* if it
              didn't.
              
              The same approach is used analogously for the other API functions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.CardemuStartDiscovery">
             <summary>
              Starts the discovery process. If you call this function while a NFC
              reader device is near to the NFC Bricklet the state will change from
              *CardemuDiscovery* to *CardemuDiscoveryReady*.
              
              If no NFC reader device can be found or if there is an error during
              discovery the cardemu state will change to *CardemuDiscoveryError*. In this case you
              have to restart the discovery process.
              
              If the cardemu state changes to *CardemuDiscoveryReady* you can start the NDEF message
              transfer with <see cref="M:Tinkerforge.BrickletNFC.CardemuWriteNDEF(System.Byte[])" /> and <see cref="M:Tinkerforge.BrickletNFC.CardemuStartTransfer(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.CardemuWriteNDEFLowLevel(System.Int32,System.Int32,System.Byte[])">
             <summary>
              Writes the NDEF message that is to be transferred to the NFC peer.
              
              The maximum supported NDEF message size in Cardemu mode is 255 byte.
              
              You can call this function at any time in Cardemu mode. The internal buffer
              will not be overwritten until you call this function again or change the
              mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.CardemuStartTransfer(System.Byte)">
             <summary>
              You can start the transfer of a NDEF message if the cardemu state is *CardemuDiscoveryReady*.
              
              Before you call this function to start a write transfer, the NDEF message that
              is to be transferred has to be written via <see cref="M:Tinkerforge.BrickletNFC.CardemuWriteNDEF(System.Byte[])" /> first.
              
              After you call this function the state will change to *CardemuTransferNDEF*. It will
              change to *CardemuTransferNDEFReady* if the transfer was successful or
              *CardemuTransferNDEFError* if it wasn't.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PGetState(System.Byte@,System.Boolean@)">
             <summary>
              Returns the current P2P state of the NFC Bricklet.
              
              On startup the Bricklet will be in the *P2PInitialization* state. The
              initialization will only take about 20ms. After that it changes to *P2PIdle*.
              
              The Bricklet is also reinitialized if the mode is changed, see <see cref="M:Tinkerforge.BrickletNFC.SetMode(System.Byte)" />.
              
              The functions of this Bricklet can be called in the *P2PIdle* state and all of
              the *P2PReady* and *P2PError* states.
              
              Example: If you call <see cref="M:Tinkerforge.BrickletNFC.P2PStartDiscovery" />, the state will change to
              *P2PDiscover* until the discovery is finished. Then it will change
              to either P2PDiscoverReady* if it worked or to *P2PDiscoverError* if it
              didn't.
              
              The same approach is used analogously for the other API functions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PStartDiscovery">
             <summary>
              Starts the discovery process. If you call this function while another NFC
              P2P enabled device is near to the NFC Bricklet the state will change from
              *P2PDiscovery* to *P2PDiscoveryReady*.
              
              If no NFC P2P enabled device can be found or if there is an error during
              discovery the P2P state will change to *P2PDiscoveryError*. In this case you
              have to restart the discovery process.
              
              If the P2P state changes to *P2PDiscoveryReady* you can start the NDEF message
              transfer with <see cref="M:Tinkerforge.BrickletNFC.P2PStartTransfer(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PWriteNDEFLowLevel(System.Int32,System.Int32,System.Byte[])">
             <summary>
              Writes the NDEF message that is to be transferred to the NFC peer.
              
              The maximum supported NDEF message size for P2P transfer is 255 byte.
              
              You can call this function at any time in P2P mode. The internal buffer
              will not be overwritten until you call this function again, change the
              mode or use P2P to read an NDEF messages.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PStartTransfer(System.Byte)">
             <summary>
              You can start the transfer of a NDEF message if the P2P state is *P2PDiscoveryReady*.
              
              Before you call this function to start a write transfer, the NDEF message that
              is to be transferred has to be written via <see cref="M:Tinkerforge.BrickletNFC.P2PWriteNDEF(System.Byte[])" /> first.
              
              After you call this function the P2P state will change to *P2PTransferNDEF*. It will
              change to *P2PTransferNDEFReady* if the transfer was successfull or
              *P2PTransferNDEFError* if it wasn't.
              
              If you started a write transfer you are now done. If you started a read transfer
              you can now use <see cref="M:Tinkerforge.BrickletNFC.P2PReadNDEF" /> to read the NDEF message that was written
              by the NFC peer.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PReadNDEFLowLevel(System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the NDEF message that was written by a NFC peer in NFC P2P mode.
              
              The NDEF message is ready if you called <see cref="M:Tinkerforge.BrickletNFC.P2PStartTransfer(System.Byte)" /> with a
              read transfer and the P2P state changed to *P2PTransferNDEFReady*.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetDetectionLEDConfig(System.Byte)">
             <summary>
              Sets the detection LED configuration. By default the LED shows
              if a card/reader is detected.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetDetectionLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletNFC.SetDetectionLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetMaximumTimeout(System.Int32)">
             <summary>
              Sets the maximum timeout.
              
              This is a global maximum used for all internal state timeouts. The timeouts depend heavily
              on the used tags etc. For example: If you use a Type 2 tag and you want to detect if
              it is present, you have to use <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" /> and wait for the state
              to change to either the error state or the ready state.
              
              With the default configuration this takes 2-3 seconds. By setting the maximum timeout to
              100ms you can reduce this time to ~150-200ms. For Type 2 this would also still work
              with a 20ms timeout (a Type 2 tag answers usually within 10ms). A type 4 tag can take
              up to 500ms in our tests.
              
              If you need a fast response time to discover if a tag is present or not you can find
              a good timeout value by trial and error for your specific tag.
              
              By default we use a very conservative timeout, to be sure that any tag can always
              answer in time.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetMaximumTimeout">
             <summary>
              Returns the timeout as set by <see cref="M:Tinkerforge.BrickletNFC.SetMaximumTimeout(System.Int32)" />
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SimpleGetTagIDLowLevel(System.Byte,System.Byte@,System.Byte@,System.Byte[]@,System.Int64@)">
             <summary>
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletNFC.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletNFC.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletNFC.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletNFC.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)">
             <summary>
              Returns the tag type and the tag ID. This function can only be called if the
              NFC Bricklet is currently in one of the *ReaderReady* states. The returned tag ID
              is the tag ID that was saved through the last call of <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />.
              
              To get the tag ID of a tag the approach is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderWriteNDEF(System.Byte[])">
             <summary>
              Writes NDEF formated data.
              
              This function currently supports NFC Forum Type 2 and 4.
              
              The general approach for writing a NDEF message is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see
                 <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check
                 if the expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderWriteNDEF(System.Byte[])" /> with the NDEF message that you want to write
              5. Wait for state to change to *ReaderWriteNDEFReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderReadNDEF">
             <summary>
              Returns the NDEF data from an internal buffer. To fill the buffer
              with a NDEF message you have to call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestNDEF" /> beforehand.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderWritePage(System.Int32,System.Byte[])">
             <summary>
              Writes a maximum of 8192 bytes starting from the given page. How many pages are written
              depends on the tag type. The page sizes are as follows:
              
              * Mifare Classic page size: 16 byte
              * NFC Forum Type 1 page size: 8 byte
              * NFC Forum Type 2 page size: 4 byte
              * NFC Forum Type 3 page size: 16 byte
              * NFC Forum Type 4: No pages, page = file selection (CC or NDEF, see below)
              
              The general approach for writing to a tag is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestTagID" />
              2. Wait for state to change to *ReaderRequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFC.ReaderGetTagID(System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFC.ReaderWritePage(System.Int32,System.Byte[])" /> with page number and data
              5. Wait for state to change to *ReaderWritePageReady* (see <see cref="M:Tinkerforge.BrickletNFC.ReaderGetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFC.ReaderStateChangedCallback" /> callback)
              
              If you use a Mifare Classic tag you have to authenticate a page before you
              can write to it. See <see cref="M:Tinkerforge.BrickletNFC.ReaderAuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" />.
              
              NFC Forum Type 4 tags are not organized into pages but different files. We currently
              support two files: Capability Container file (CC) and NDEF file.
              
              Choose CC by setting page to 3 or NDEF by setting page to 4.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.ReaderReadPage">
             <summary>
              Returns the page data from an internal buffer. To fill the buffer
              with specific pages you have to call <see cref="M:Tinkerforge.BrickletNFC.ReaderRequestPage(System.Int32,System.Int32)" /> beforehand.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.CardemuWriteNDEF(System.Byte[])">
             <summary>
              Writes the NDEF message that is to be transferred to the NFC peer.
              
              The maximum supported NDEF message size in Cardemu mode is 255 byte.
              
              You can call this function at any time in Cardemu mode. The internal buffer
              will not be overwritten until you call this function again or change the
              mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PWriteNDEF(System.Byte[])">
             <summary>
              Writes the NDEF message that is to be transferred to the NFC peer.
              
              The maximum supported NDEF message size for P2P transfer is 255 byte.
              
              You can call this function at any time in P2P mode. The internal buffer
              will not be overwritten until you call this function again, change the
              mode or use P2P to read an NDEF messages.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.P2PReadNDEF">
             <summary>
              Returns the NDEF message that was written by a NFC peer in NFC P2P mode.
              
              The NDEF message is ready if you called <see cref="M:Tinkerforge.BrickletNFC.P2PStartTransfer(System.Byte)" /> with a
              read transfer and the P2P state changed to *P2PTransferNDEFReady*.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.SimpleGetTagID(System.Byte,System.Byte@,System.Byte[]@,System.Int64@)">
             <summary>
              .. versionadded:: 2.0.6$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.OnReaderStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.OnCardemuStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFC.OnP2PStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFCRFID">
             <summary>
              Reads and writes NFC and RFID tags
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_REQUEST_TAG_ID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_GET_TAG_ID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_AUTHENTICATE_MIFARE_CLASSIC_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_WRITE_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_REQUEST_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_GET_PAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.TAG_TYPE_MIFARE_CLASSIC">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.TAG_TYPE_TYPE1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.TAG_TYPE_TYPE2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_INITIALIZATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_IDLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_TAG_ID">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_TAG_ID_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_TAG_ID_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_WRITE_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_WRITE_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_WRITE_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_PAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_PAGE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.STATE_REQUEST_PAGE_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.KEY_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletNFCRFID.KEY_B">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback">
             <summary>
              This callback is called if the state of the NFC/RFID Bricklet changes.
              See <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> for more information about the possible states.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletNFCRFID.StateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletNFCRFID.StateChanged">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)">
             <summary>
              To read or write a tag that is in proximity of the NFC/RFID Bricklet you
              first have to call this function with the expected tag type as parameter.
              It is no problem if you don't know the tag type. You can cycle through
              the available tag types until the tag gives an answer to the request.
              
              Currently the following tag types are supported:
              
              * Mifare Classic
              * NFC Forum Type 1
              * NFC Forum Type 2
              
              After you call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" /> the NFC/RFID Bricklet will try to read
              the tag ID from the tag. After this process is done the state will change.
              You can either register the <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback or you can poll
              <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> to find out about the state change.
              
              If the state changes to *RequestTagIDError* it means that either there was
              no tag present or that the tag is of an incompatible type. If the state
              changes to *RequestTagIDReady* it means that a compatible tag was found
              and that the tag ID could be read out. You can now get the tag ID by
              calling <see cref="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)" />.
              
              If two tags are in the proximity of the NFC/RFID Bricklet, this
              function will cycle through the tags. To select a specific tag you have
              to call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" /> until the correct tag id is found.
              
              In case of any *Error* state the selection is lost and you have to
              start again by calling <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)">
             <summary>
              Returns the tag type, tag ID and the length of the tag ID
              (4 or 7 bytes are possible length). This function can only be called if the
              NFC/RFID is currently in one of the *Ready* states. The returned ID
              is the ID that was saved through the last call of <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />.
              
              To get the tag ID of a tag the approach is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              3. Call <see cref="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)">
             <summary>
              Returns the current state of the NFC/RFID Bricklet.
              
              On startup the Bricklet will be in the *Initialization* state. The
              initialization will only take about 20ms. After that it changes to *Idle*.
              
              The functions of this Bricklet can be called in the *Idle* state and all of
              the *Ready* and *Error* states.
              
              Example: If you call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestPage(System.Int32)" />, the state will change to
              *RequestPage* until the reading of the page is finished. Then it will change
              to either *RequestPageReady* if it worked or to *RequestPageError* if it
              didn't. If the request worked you can get the page by calling <see cref="M:Tinkerforge.BrickletNFCRFID.GetPage" />.
              
              The same approach is used analogously for the other API functions.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.AuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])">
             <summary>
              Mifare Classic tags use authentication. If you want to read from or write to
              a Mifare Classic page you have to authenticate it beforehand.
              Each page can be authenticated with two keys: A (``key_number`` = 0) and B
              (``key_number`` = 1). A new Mifare Classic
              tag that has not yet been written to can be accessed with key A
              and the default key ``[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]``.
              
              The approach to read or write a Mifare Classic page is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found go back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFCRFID.AuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" /> with page and key for the page
              5. Wait for state to change to *AuthenticatingMifareClassicPageReady* (see
                 <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> or <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              6. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestPage(System.Int32)" /> or <see cref="M:Tinkerforge.BrickletNFCRFID.WritePage(System.Int32,System.Byte[])" /> to read/write page
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.WritePage(System.Int32,System.Byte[])">
             <summary>
              Writes 16 bytes starting from the given page. How many pages are written
              depends on the tag type. The page sizes are as follows:
              
              * Mifare Classic page size: 16 byte (one page is written)
              * NFC Forum Type 1 page size: 8 byte (two pages are written)
              * NFC Forum Type 2 page size: 4 byte (four pages are written)
              
              The general approach for writing to a tag is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFCRFID.WritePage(System.Int32,System.Byte[])" /> with page number and data
              5. Wait for state to change to *WritePageReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" /> or
                 <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              
              If you use a Mifare Classic tag you have to authenticate a page before you
              can write to it. See <see cref="M:Tinkerforge.BrickletNFCRFID.AuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.RequestPage(System.Int32)">
             <summary>
              Reads 16 bytes starting from the given page and stores them into a buffer.
              The buffer can then be read out with <see cref="M:Tinkerforge.BrickletNFCRFID.GetPage" />.
              How many pages are read depends on the tag type. The page sizes are
              as follows:
              
              * Mifare Classic page size: 16 byte (one page is read)
              * NFC Forum Type 1 page size: 8 byte (two pages are read)
              * NFC Forum Type 2 page size: 4 byte (four pages are read)
              
              The general approach for reading a tag is as follows:
              
              1. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestTagID(System.Byte)" />
              2. Wait for state to change to *RequestTagIDReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              3. If looking for a specific tag then call <see cref="M:Tinkerforge.BrickletNFCRFID.GetTagID(System.Byte@,System.Byte@,System.Byte[]@)" /> and check if the
                 expected tag was found, if it was not found got back to step 1
              4. Call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestPage(System.Int32)" /> with page number
              5. Wait for state to change to *RequestPageReady* (see <see cref="M:Tinkerforge.BrickletNFCRFID.GetState(System.Byte@,System.Boolean@)" />
                 or <see cref="E:Tinkerforge.BrickletNFCRFID.StateChangedCallback" /> callback)
              6. Call <see cref="M:Tinkerforge.BrickletNFCRFID.GetPage" /> to retrieve the page from the buffer
              
              If you use a Mifare Classic tag you have to authenticate a page before you
              can read it. See <see cref="M:Tinkerforge.BrickletNFCRFID.AuthenticateMifareClassicPage(System.Int32,System.Byte,System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.GetPage">
             <summary>
              Returns 16 bytes of data from an internal buffer. To fill the buffer
              with specific pages you have to call <see cref="M:Tinkerforge.BrickletNFCRFID.RequestPage(System.Int32)" /> beforehand.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletNFCRFID.OnStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOLED128x64">
             <summary>
              3.3cm (1.3") OLED display with 128x64 pixels
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_WRITE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_NEW_WINDOW">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_SET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_GET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])">
             <summary>
              Appends 64 byte of data to the window as set by <see cref="M:Tinkerforge.BrickletOLED128x64.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              Each row has a height of 8 pixels which corresponds to one byte of data.
              
              Example: if you call <see cref="M:Tinkerforge.BrickletOLED128x64.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" /> with column from 0 to 127 and row
              from 0 to 7 (the whole display) each call of <see cref="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])" /> (red arrow) will
              write half of a row.
              
              .. image:: /Images/Bricklets/bricklet_oled_128x64_display.png
                 :scale: 100 %
                 :alt: Display pixel order
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_oled_128x64_display.png
              
              The LSB (D0) of each data byte is at the top and the MSB (D7) is at the
              bottom of the row.
              
              The next call of <see cref="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])" /> will write the second half of the row
              and the next two the second row and so on. To fill the whole display
              you need to call <see cref="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])" /> 16 times.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the window in which you can write with <see cref="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])" />. One row
              has a height of 8 pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.ClearDisplay">
             <summary>
              Clears the current content of the window as set by <see cref="M:Tinkerforge.BrickletOLED128x64.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.SetDisplayConfiguration(System.Byte,System.Boolean)">
             <summary>
              Sets the configuration of the display.
              
              You can set a contrast value from 0 to 255 and you can invert the color
              (black/white) of the display.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.GetDisplayConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOLED128x64.SetDisplayConfiguration(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              The text can have a maximum of 26 characters.
              
              For example: (1, 10, "Hello") will write *Hello* in the middle of the
              second line of the display.
              
              You can draw to the display with <see cref="M:Tinkerforge.BrickletOLED128x64.Write(System.Byte[])" /> and then add text to it
              afterwards.
              
              The display uses a special 5x7 pixel charset. You can view the characters
              of the charset in Brick Viewer.
              
              The font conforms to code page 437.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOLED128x64V2">
             <summary>
              3.3cm (1.3") OLED display with 128x64 pixels
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_WRITE_PIXELS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_READ_PIXELS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_SET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_DRAW_BUFFERED_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED128x64V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.WritePixelsLowLevel(System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              Writes pixels to the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              If automatic draw is enabled (default) the pixels are directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the pixels are written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.ReadPixelsLowLevel(System.Byte,System.Byte,System.Byte,System.Byte,System.Int32@,System.Int32@,System.Boolean[]@)">
             <summary>
              Reads pixels from the specified window.
              
              The pixels are read from the window line by line top to bottom
              and each line is read from left to right.
              
              If automatic draw is enabled (default) the pixels that are read are always the
              same that are shown on the display.
              
              If automatic draw is disabled the pixels are read from the internal buffer
              (see <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />).
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.ClearDisplay">
             <summary>
              Clears the complete content of the display.
              
              If automatic draw is enabled (default) the pixels are directly cleared.
              
              If automatic draw is disabled the the internal buffer is cleared and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)">
             <summary>
              Sets the configuration of the display.
              
              You can set a contrast value from 0 to 255 and you can invert the color
              (white/black) of the display.
              
              If automatic draw is set to *true*, the display is automatically updated with every
              call of <see cref="M:Tinkerforge.BrickletOLED128x64V2.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" /> or <see cref="M:Tinkerforge.BrickletOLED128x64V2.WriteLine(System.Byte,System.Byte,System.String)" />. If it is set to false, the
              changes are written into an internal buffer and only shown on the display after
              a call of <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetDisplayConfiguration(System.Byte@,System.Boolean@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              The text can have a maximum of 22 characters.
              
              For example: (1, 10, "Hello") will write *Hello* in the middle of the
              second line of the display.
              
              The display uses a special 5x7 pixel charset. You can view the characters
              of the charset in Brick Viewer.
              
              If automatic draw is enabled (default) the text is directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the text is written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
              
              The font conforms to code page 437.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)">
             <summary>
              Draws the currently buffered frame. Normally each call of <see cref="M:Tinkerforge.BrickletOLED128x64V2.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])" /> and
              <see cref="M:Tinkerforge.BrickletOLED128x64V2.WriteLine(System.Byte,System.Byte,System.String)" /> draws directly onto the display. If you turn automatic draw off
              (<see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />), the data is written in an internal buffer and
              only transferred to the display by calling this function. This can be used to
              avoid flicker when drawing a complex frame in multiple steps.
              
              Set the `force complete redraw` to *true* to redraw the whole display
              instead of only the changed parts. Normally it should not be necessary to set this to
              *true*. It may only become necessary in case of stuck pixels because of errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletOLED128x64V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.WritePixels(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean[])">
             <summary>
              Writes pixels to the specified window.
              
              The pixels are written into the window line by line top to bottom
              and each line is written from left to right.
              
              If automatic draw is enabled (default) the pixels are directly written to
              the screen. Only pixels that have actually changed are updated on the screen,
              the rest stays the same.
              
              If automatic draw is disabled the pixels are written to an internal buffer and
              the buffer is transferred to the display only after <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />
              is called. This can be used to avoid flicker when drawing a complex frame in
              multiple steps.
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED128x64V2.ReadPixels(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Reads pixels from the specified window.
              
              The pixels are read from the window line by line top to bottom
              and each line is read from left to right.
              
              If automatic draw is enabled (default) the pixels that are read are always the
              same that are shown on the display.
              
              If automatic draw is disabled the pixels are read from the internal buffer
              (see <see cref="M:Tinkerforge.BrickletOLED128x64V2.DrawBufferedFrame(System.Boolean)" />).
              
              Automatic draw can be configured with the <see cref="M:Tinkerforge.BrickletOLED128x64V2.SetDisplayConfiguration(System.Byte,System.Boolean,System.Boolean)" />
              function.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOLED64x48">
             <summary>
              1.68cm (0.66") OLED display with 64x48 pixels
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_WRITE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_NEW_WINDOW">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_CLEAR_DISPLAY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_SET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_GET_DISPLAY_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_WRITE_LINE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOLED64x48.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])">
             <summary>
              Appends 64 byte of data to the window as set by <see cref="M:Tinkerforge.BrickletOLED64x48.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" />.
              
              Each row has a height of 8 pixels which corresponds to one byte of data.
              
              Example: if you call <see cref="M:Tinkerforge.BrickletOLED64x48.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" /> with column from 0 to 63 and row
              from 0 to 5 (the whole display) each call of <see cref="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])" /> (red arrow) will
              write one row.
              
              .. image:: /Images/Bricklets/bricklet_oled_64x48_display.png
                 :scale: 100 %
                 :alt: Display pixel order
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_oled_64x48_display.png
              
              The LSB (D0) of each data byte is at the top and the MSB (D7) is at the
              bottom of the row.
              
              The next call of <see cref="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])" /> will write the second row and so on. To
              fill the whole display you need to call <see cref="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])" /> 6 times.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the window in which you can write with <see cref="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])" />. One row
              has a height of 8 pixels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.ClearDisplay">
             <summary>
              Clears the current content of the window as set by <see cref="M:Tinkerforge.BrickletOLED64x48.NewWindow(System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.SetDisplayConfiguration(System.Byte,System.Boolean)">
             <summary>
              Sets the configuration of the display.
              
              You can set a contrast value from 0 to 255 and you can invert the color
              (black/white) of the display.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.GetDisplayConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOLED64x48.SetDisplayConfiguration(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.WriteLine(System.Byte,System.Byte,System.String)">
             <summary>
              Writes text to a specific line with a specific position.
              The text can have a maximum of 13 characters.
              
              For example: (1, 4, "Hello") will write *Hello* in the middle of the
              second line of the display.
              
              You can draw to the display with <see cref="M:Tinkerforge.BrickletOLED64x48.Write(System.Byte[])" /> and then add text to it
              afterwards.
              
              The display uses a special 5x7 pixel charset. You can view the characters
              of the charset in Brick Viewer.
              
              The font conforms to code page 437.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOLED64x48.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOneWire">
             <summary>
              Communicates with up 64 1-Wire devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_SEARCH_BUS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_RESET_BUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_WRITE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_READ">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_WRITE_COMMAND">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_SET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_BUSY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_NO_PRESENCE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_TIMEOUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.COMMUNICATION_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.COMMUNICATION_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOneWire.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SearchBusLowLevel(System.Int32@,System.Int32@,System.Int64[]@,System.Byte@)">
             <summary>
              Returns a list of up to 64 identifiers of the connected 1-Wire devices.
              Each identifier is 64-bit and consists of 8-bit family code, 48-bit ID and
              8-bit CRC.
              
              To get these identifiers the Bricklet runs the
              `SEARCH ROM algorithm &lt;https://www.maximintegrated.com/en/app-notes/index.mvp/id/187&gt;`__,
              as defined by Maxim.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.ResetBus">
             <summary>
              Resets the bus with the 1-Wire reset operation.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.Write(System.Byte)">
             <summary>
              Writes a byte of data to the 1-Wire bus.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.Read(System.Byte@,System.Byte@)">
             <summary>
              Reads a byte of data from the 1-Wire bus.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.WriteCommand(System.Int64,System.Byte)">
             <summary>
              Writes a command to the 1-Wire device with the given identifier. You can obtain
              the identifier by calling <see cref="M:Tinkerforge.BrickletOneWire.SearchBus(System.Int64[]@,System.Byte@)" />. The MATCH ROM operation is used to
              write the command.
              
              If you only have one device connected or want to broadcast to all devices
              you can set the identifier to 0. In this case the SKIP ROM operation is used to
              write the command.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SetCommunicationLEDConfig(System.Byte)">
             <summary>
              Sets the communication LED configuration. By default the LED shows 1-wire
              communication traffic by flickering.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetCommunicationLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOneWire.SetCommunicationLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletOneWire.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletOneWire.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletOneWire.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOneWire.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOneWire.SearchBus(System.Int64[]@,System.Byte@)">
             <summary>
              Returns a list of up to 64 identifiers of the connected 1-Wire devices.
              Each identifier is 64-bit and consists of 8-bit family code, 48-bit ID and
              8-bit CRC.
              
              To get these identifiers the Bricklet runs the
              `SEARCH ROM algorithm &lt;https://www.maximintegrated.com/en/app-notes/index.mvp/id/187&gt;`__,
              as defined by Maxim.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOutdoorWeather">
             <summary>
              433MHz receiver for outdoor weather station
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_STATION_IDENTIFIERS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_SENSOR_IDENTIFIERS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_STATION_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_SENSOR_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_SET_STATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_STATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_SET_SENSOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_SENSOR_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_N">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_NNE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_NE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_ENE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_E">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_ESE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_SE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_SSE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_S">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_SSW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_SW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_WSW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_W">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_WNW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_NW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_NNW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.WIND_DIRECTION_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletOutdoorWeather.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletOutdoorWeather.StationDataCallback">
             <summary>
              Reports the station data every time a new data packet is received.
              See <see cref="M:Tinkerforge.BrickletOutdoorWeather.GetStationData(System.Byte,System.Int16@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Byte@,System.Boolean@,System.Int32@)" /> for information about the data.
              
              For each station the callback will be triggered about every 45 seconds.
              
              Turn the callback on/off with <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetStationCallbackConfiguration(System.Boolean)" />
              (by default it is turned off).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOutdoorWeather.StationDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletOutdoorWeather.SensorDataCallback">
             <summary>
              Reports the sensor data every time a new data packet is received.
              See <see cref="M:Tinkerforge.BrickletOutdoorWeather.GetSensorData(System.Byte,System.Int16@,System.Byte@,System.Int32@)" /> for information about the data.
              
              For each sensor the callback will be called about every 45 seconds.
              
              Turn the callback on/off with <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetSensorCallbackConfiguration(System.Boolean)" />
              (by default it is turned off).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletOutdoorWeather.SensorDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetStationIdentifiersLowLevel(System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the identifiers (number between 0 and 255) of all `stations
              &lt;https://www.tinkerforge.com/en/shop/accessories/sensors/outdoor-weather-station-ws-6147.html&gt;`__
              that have been seen since the startup of the Bricklet.
              
              Each station gives itself a random identifier on first startup.
              
              Since firmware version 2.0.2 a station is removed from the list if no data was received for
              12 hours.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetSensorIdentifiersLowLevel(System.Int32@,System.Int32@,System.Byte[]@)">
             <summary>
              Returns the identifiers (number between 0 and 255) of all `sensors
              &lt;https://www.tinkerforge.com/en/shop/accessories/sensors/temperature-humidity-sensor-th-6148.html&gt;`__
              that have been seen since the startup of the Bricklet.
              
              Each sensor gives itself a random identifier on first startup.
              
              Since firmware version 2.0.2 a sensor is removed from the list if no data was received for
              12 hours.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetStationData(System.Byte,System.Int16@,System.Byte@,System.Int64@,System.Int64@,System.Int64@,System.Byte@,System.Boolean@,System.Int32@)">
             <summary>
              Returns the last received data for a station with the given identifier.
              Call <see cref="M:Tinkerforge.BrickletOutdoorWeather.GetStationIdentifiers" /> for a list of all available identifiers.
              
              The return values are:
              
              * Temperature,
              * Humidity,
              * Wind Speed,
              * Gust Speed,
              * Rain Fall (accumulated since station power-up),
              * Wind Direction,
              * Battery Low (true if battery is low) and
              * Last Change (seconds since the reception of this data).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetSensorData(System.Byte,System.Int16@,System.Byte@,System.Int32@)">
             <summary>
              Returns the last measured data for a sensor with the given identifier.
              Call <see cref="M:Tinkerforge.BrickletOutdoorWeather.GetSensorIdentifiers" /> for a list of all available identifiers.
              
              The return values are:
              
              * Temperature,
              * Humidity and
              * Last Change (seconds since the last reception of data).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.SetStationCallbackConfiguration(System.Boolean)">
             <summary>
              Turns callback for station data on or off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetStationCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetStationCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.SetSensorCallbackConfiguration(System.Boolean)">
             <summary>
              Turns callback for sensor data on or off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetSensorCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetSensorCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletOutdoorWeather.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletOutdoorWeather.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetStationIdentifiers">
             <summary>
              Returns the identifiers (number between 0 and 255) of all `stations
              &lt;https://www.tinkerforge.com/en/shop/accessories/sensors/outdoor-weather-station-ws-6147.html&gt;`__
              that have been seen since the startup of the Bricklet.
              
              Each station gives itself a random identifier on first startup.
              
              Since firmware version 2.0.2 a station is removed from the list if no data was received for
              12 hours.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.GetSensorIdentifiers">
             <summary>
              Returns the identifiers (number between 0 and 255) of all `sensors
              &lt;https://www.tinkerforge.com/en/shop/accessories/sensors/temperature-humidity-sensor-th-6148.html&gt;`__
              that have been seen since the startup of the Bricklet.
              
              Each sensor gives itself a random identifier on first startup.
              
              Since firmware version 2.0.2 a sensor is removed from the list if no data was received for
              12 hours.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.OnStationDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletOutdoorWeather.OnSensorDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC">
             <summary>
              Reads temperatures from Pt100 und Pt1000 sensors
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_RESISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_RESISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_RESISTANCE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_RESISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_RESISTANCE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_IS_SENSOR_CONNECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_SET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FILTER_OPTION_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.FILTER_OPTION_60HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.WIRE_MODE_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.WIRE_MODE_3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTC.WIRE_MODE_4">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.TemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              temperature of the connected sensor.
              
              The <see cref="E:Tinkerforge.BrickletPTC.TemperatureCallback" /> callback is only triggered if the temperature has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.Temperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.TemperatureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the temperature of the connected sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletPTC.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC.TemperatureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.TemperatureReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.ResistanceCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackPeriod(System.Int64)" />. The parameter is the resistance
              of the connected sensor.
              
              The <see cref="E:Tinkerforge.BrickletPTC.ResistanceCallback" /> callback is only triggered if the resistance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC.ResistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.Resistance">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.ResistanceReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the resistance of the connected sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletPTC.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC.ResistanceReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.ResistanceReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.SensorConnectedCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletPTC.IsSensorConnected" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTC.SensorConnectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTC.SensorConnected">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetTemperature">
             <summary>
              Returns the temperature of connected sensor.
              
              If you want to get the temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletPTC.TemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetResistance">
             <summary>
              Returns the value as measured by the MAX31865 precision delta-sigma ADC.
              
              The value can be converted with the following formulas:
              
              * Pt100:  resistance = (value * 390) / 32768
              * Pt1000: resistance = (value * 3900) / 32768
              
              If you want to get the resistance periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletPTC.ResistanceCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletPTC.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletPTC.TemperatureCallback" /> callback is only triggered if the temperature has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetResistanceCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletPTC.ResistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletPTC.ResistanceCallback" /> callback is only triggered if the resistance has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetResistanceCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletPTC.TemperatureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetTemperatureCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetResistanceCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletPTC.ResistanceReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetResistanceCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletPTC.TemperatureReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletPTC.ResistanceReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletPTC.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletPTC.SetResistanceCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletPTC.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetNoiseRejectionFilter(System.Byte)">
             <summary>
              Sets the noise rejection filter to either 50Hz (0) or 60Hz (1).
              Noise from 50Hz or 60Hz power sources (including
              harmonics of the AC power's fundamental frequency) is
              attenuated by 82dB.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetNoiseRejectionFilter">
             <summary>
              Returns the noise rejection filter option as set by
              <see cref="M:Tinkerforge.BrickletPTC.SetNoiseRejectionFilter(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.IsSensorConnected">
             <summary>
              Returns *true* if the sensor is connected correctly.
              
              If this function
              returns *false*, there is either no Pt100 or Pt1000 sensor connected,
              the sensor is connected incorrectly or the sensor itself is faulty.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetWireMode(System.Byte)">
             <summary>
              Sets the wire mode of the sensor. Possible values are 2, 3 and 4 which
              correspond to 2-, 3- and 4-wire sensors. The value has to match the jumper
              configuration on the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetWireMode">
             <summary>
              Returns the wire mode as set by <see cref="M:Tinkerforge.BrickletPTC.SetWireMode(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)">
             <summary>
              If you enable this callback, the <see cref="E:Tinkerforge.BrickletPTC.SensorConnectedCallback" /> callback is triggered
              every time a Pt sensor is connected/disconnected.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetSensorConnectedCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletPTC.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.OnTemperatureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.OnResistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.OnResistanceReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTC.OnSensorConnectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTCV2">
             <summary>
              Reads temperatures from Pt100 und Pt1000 sensors
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_RESISTANCE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_RESISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_RESISTANCE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_NOISE_REJECTION_FILTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_IS_SENSOR_CONNECTED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_WIRE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_MOVING_AVERAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_SENSOR_CONNECTED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FILTER_OPTION_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.FILTER_OPTION_60HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.WIRE_MODE_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.WIRE_MODE_3">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.WIRE_MODE_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPTCV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTCV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletPTCV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletPTCV2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTCV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTCV2.ResistanceCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletPTCV2.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletPTCV2.GetResistance" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTCV2.ResistanceEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPTCV2.SensorConnectedCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletPTCV2.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletPTCV2.IsSensorConnected" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPTCV2.SensorConnectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetTemperature">
             <summary>
              Returns the temperature of the connected sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletPTCV2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletPTCV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletPTCV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletPTCV2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetResistance">
             <summary>
              Returns the value as measured by the MAX31865 precision delta-sigma ADC.
              
              The value can be converted with the following formulas:
              
              * Pt100:  resistance = (value * 390) / 32768
              * Pt1000: resistance = (value * 3900) / 32768
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletPTCV2.ResistanceCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletPTCV2.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletPTCV2.ResistanceCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletPTCV2.ResistanceCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetResistanceCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetResistanceCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetNoiseRejectionFilter(System.Byte)">
             <summary>
              Sets the noise rejection filter to either 50Hz (0) or 60Hz (1).
              Noise from 50Hz or 60Hz power sources (including
              harmonics of the AC power's fundamental frequency) is
              attenuated by 82dB.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetNoiseRejectionFilter">
             <summary>
              Returns the noise rejection filter option as set by
              <see cref="M:Tinkerforge.BrickletPTCV2.SetNoiseRejectionFilter(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.IsSensorConnected">
             <summary>
              Returns *true* if the sensor is connected correctly.
              
              If this function
              returns *false*, there is either no Pt100 or Pt1000 sensor connected,
              the sensor is connected incorrectly or the sensor itself is faulty.
              
              If you want to get the status automatically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletPTCV2.SensorConnectedCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletPTCV2.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetWireMode(System.Byte)">
             <summary>
              Sets the wire mode of the sensor. Possible values are 2, 3 and 4 which
              correspond to 2-, 3- and 4-wire sensors. The value has to match the jumper
              configuration on the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetWireMode">
             <summary>
              Returns the wire mode as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetWireMode(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetMovingAverageConfiguration(System.Int32,System.Int32)">
             <summary>
              Sets the length of a `moving averaging &lt;https://en.wikipedia.org/wiki/Moving_average&gt;`__
              for the resistance and temperature.
              
              Setting the length to 1 will turn the averaging off. With less
              averaging, there is more noise on the data.
              
              New data is gathered every 20ms. With a moving average of length 1000 the resulting
              averaging window has a length of 20s. If you want to do long term measurements the longest
              moving average will give the cleanest results.
              
              The default values match the non-changeable averaging settings of the old PTC Bricklet 1.0
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetMovingAverageConfiguration(System.Int32@,System.Int32@)">
             <summary>
              Returns the moving average configuration as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetMovingAverageConfiguration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetSensorConnectedCallbackConfiguration(System.Boolean)">
             <summary>
              If you enable this callback, the <see cref="E:Tinkerforge.BrickletPTCV2.SensorConnectedCallback" /> callback is triggered
              every time a Pt sensor is connected/disconnected.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetSensorConnectedCallbackConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetSensorConnectedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletPTCV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletPTCV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletPTCV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletPTCV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.OnResistanceCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPTCV2.OnSensorConnectedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletParticulateMatter">
             <summary>
              Measures Particulate Matter concentration (PM1.0, PM2.5 and PM10)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_PM_CONCENTRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_PM_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_SENSOR_INFO">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_PM_CONCENTRATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_PM_CONCENTRATION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_PM_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_PM_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletParticulateMatter.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletParticulateMatter.PMConcentrationCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMConcentrationCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletParticulateMatter.GetPMConcentration(System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletParticulateMatter.PMConcentrationEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletParticulateMatter.PMCountCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMCountCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletParticulateMatter.GetPMCount(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletParticulateMatter.PMCountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetPMConcentration(System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the particulate matter concentration, broken down as:
              
              * PM\ :sub:`1.0`\ ,
              * PM\ :sub:`2.5`\  and
              * PM\ :sub:`10.0`\ .
              
              If the sensor is disabled (see <see cref="M:Tinkerforge.BrickletParticulateMatter.SetEnable(System.Boolean)" />) then the last known good
              values from the sensor are returned.
              
              If you want to get the values periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletParticulateMatter.PMConcentrationCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMConcentrationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetPMCount(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the number of particulates in 100 ml of air, broken down by their
              diameter:
              
              * greater 0.3µm,
              * greater 0.5µm,
              * greater 1.0µm,
              * greater 2.5µm,
              * greater 5.0µm and
              * greater 10.0µm.
              
              If the sensor is disabled (see <see cref="M:Tinkerforge.BrickletParticulateMatter.SetEnable(System.Boolean)" />) then the last known good
              value from the sensor is returned.
              
              If you want to get the values periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletParticulateMatter.PMCountCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMCountCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetEnable(System.Boolean)">
             <summary>
              Enables/Disables the fan and the laser diode of the sensors.
              
              The sensor takes about 30 seconds after it is enabled to settle and produce stable
              values.
              
              The laser diode has a lifetime of about 8000 hours. If you want to measure in
              an interval with a long idle time (e.g. hourly) you should turn the
              laser diode off between the measurements.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetEnable">
             <summary>
              Returns the state of the sensor as set by <see cref="M:Tinkerforge.BrickletParticulateMatter.SetEnable(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetSensorInfo(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns information about the sensor:
              
              * the sensor version number,
              * the last error code reported by the sensor (0 means no error) and
              * the number of framing and checksum errors that occurred in the communication
                with the sensor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetPMConcentrationCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletParticulateMatter.PMConcentrationCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetPMConcentrationCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMConcentrationCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetPMCountCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletParticulateMatter.PMCountCallback" /> callback
              is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetPMCountCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletParticulateMatter.SetPMCountCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletParticulateMatter.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletParticulateMatter.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletParticulateMatter.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletParticulateMatter.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.OnPMConcentrationCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletParticulateMatter.OnPMCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPerformanceDC">
             <summary>
              Drives one brushed DC motor with up to 36V and 10A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_MOTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_DRIVE_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_PWM_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_POWER_STATISTICS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_THERMAL_SHUTDOWN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_THERMAL_SHUTDOWN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_GPIO_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_GPIO_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_GPIO_ACTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_GPIO_ACTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_GPIO_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_CW_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_CW_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_CCW_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_CCW_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_GPIO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_GPIO_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_EMERGENCY_SHUTDOWN_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_EMERGENCY_SHUTDOWN_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_VELOCITY_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_VELOCITY_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_CURRENT_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_CURRENT_VELOCITY_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.DRIVE_MODE_DRIVE_BRAKE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.DRIVE_MODE_DRIVE_COAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_NORMAL_STOP_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_NORMAL_STOP_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_FULL_BRAKE_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_FULL_BRAKE_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_CALLBACK_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_ACTION_CALLBACK_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CW_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CW_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CW_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CW_LED_CONFIG_SHOW_CW_AS_FORWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CW_LED_CONFIG_SHOW_CW_AS_BACKWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CCW_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CCW_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CCW_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CCW_LED_CONFIG_SHOW_CCW_AS_FORWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.CCW_LED_CONFIG_SHOW_CCW_AS_BACKWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_LED_CONFIG_SHOW_GPIO_ACTIVE_HIGH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.GPIO_LED_CONFIG_SHOW_GPIO_ACTIVE_LOW">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPerformanceDC.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPerformanceDC.EmergencyShutdownCallback">
             <summary>
              This callback is triggered if either the current consumption
              is too high or the temperature of the driver chip is too high
              (above 150°C) or the user defined thermal shutdown is triggered (see <see cref="M:Tinkerforge.BrickletPerformanceDC.SetThermalShutdown(System.Byte)" />).
              n case of a voltage below 6V (input voltage) this
              callback is triggered as well.
              
              If this callback is triggered, the driver chip gets disabled at the same time.
              That means, <see cref="M:Tinkerforge.BrickletPerformanceDC.SetEnabled(System.Boolean)" /> has to be called to drive the motor again.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPerformanceDC.EmergencyShutdownEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPerformanceDC.VelocityReachedCallback">
             <summary>
              This callback is triggered whenever a set velocity is reached. For example:
              If a velocity of 0 is present, acceleration is set to 5000 and velocity
              to 10000, the <see cref="E:Tinkerforge.BrickletPerformanceDC.VelocityReachedCallback" /> callback will be triggered after about
              2 seconds, when the set velocity is actually reached.
              
              <note>
               Since we can't get any feedback from the DC motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickletPerformanceDC.SetMotion(System.Int32,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPerformanceDC.VelocityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPerformanceDC.CurrentVelocityCallback">
             <summary>
              This callback is triggered with the period that is set by
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)" />. The parameter is the *current*
              velocity used by the motor.
              
              The <see cref="E:Tinkerforge.BrickletPerformanceDC.CurrentVelocityCallback" /> callback is only triggered after the set period
              if there is a change in the velocity.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPerformanceDC.CurrentVelocityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPerformanceDC.GPIOStateCallback">
             <summary>
              This callback is triggered by GPIO changes if it is activated through <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOAction(System.Byte,System.Int64)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPerformanceDC.GPIOStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetEnabled(System.Boolean)">
             <summary>
              Enables/Disables the driver chip. The driver parameters can be configured
              (velocity, acceleration, etc) before it is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetEnabled">
             <summary>
              Returns *true* if the driver chip is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetVelocity(System.Int16)">
             <summary>
              Sets the velocity of the motor. Whereas -32767 is full speed backward,
              0 is stop and 32767 is full speed forward. Depending on the
              acceleration (see <see cref="M:Tinkerforge.BrickletPerformanceDC.SetMotion(System.Int32,System.Int32)" />), the motor is not immediately
              brought to the velocity but smoothly accelerated.
              
              The velocity describes the duty cycle of the PWM with which the motor is
              controlled, e.g. a velocity of 3277 sets a PWM with a 10% duty cycle.
              You can not only control the duty cycle of the PWM but also the frequency,
              see <see cref="M:Tinkerforge.BrickletPerformanceDC.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the motor. This value is different
              from <see cref="M:Tinkerforge.BrickletPerformanceDC.GetVelocity" /> whenever the motor is currently accelerating
              to a goal set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetVelocity(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetMotion(System.Int32,System.Int32)">
             <summary>
              Sets the acceleration and deceleration of the motor. It is given in *velocity/s*.
              An acceleration of 10000 means, that every second the velocity is increased
              by 10000 (or about 30% duty cycle).
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 16000 (about 50% duty cycle) in 10 seconds, you should set
              an acceleration of 1600.
              
              If acceleration and deceleration is set to 0, there is no speed ramping, i.e. a
              new velocity is immediately given to the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetMotion(System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration/deceleration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetMotion(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickletPerformanceDC.SetVelocity(System.Int16)" /> with 0 if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetDriveMode(System.Byte)">
             <summary>
              Sets the drive mode. Possible modes are:
              
              * 0 = Drive/Brake
              * 1 = Drive/Coast
              
              These modes are different kinds of motor controls.
              
              In Drive/Brake mode, the motor is always either driving or braking. There
              is no freewheeling. Advantages are: A more linear correlation between
              PWM and velocity, more exact accelerations and the possibility to drive
              with slower velocities.
              
              In Drive/Coast mode, the motor is always either driving or freewheeling.
              Advantages are: Less current consumption and less demands on the motor and
              driver chip.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetDriveMode">
             <summary>
              Returns the drive mode, as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetDriveMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetPWMFrequency(System.Int32)">
             <summary>
              Sets the frequency of the PWM with which the motor is driven.
              Often a high frequency
              is less noisy and the motor runs smoother. However, with a low frequency
              there are less switches and therefore fewer switching losses. Also with
              most motors lower frequencies enable higher torque.
              
              If you have no idea what all this means, just ignore this function and use
              the default frequency, it will very likely work fine.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetPWMFrequency">
             <summary>
              Returns the PWM frequency as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetPWMFrequency(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetPowerStatistics(System.Int32@,System.Int32@,System.Int16@)">
             <summary>
              Returns input voltage, current usage and temperature of the driver.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetThermalShutdown(System.Byte)">
             <summary>
              Sets a temperature threshold that is used for thermal shutdown.
              
              Additionally to this user defined threshold the driver chip will shut down at a
              temperature of 150°C.
              
              If a thermal shutdown is triggered the driver is disabled and has to be
              explicitly re-enabled with <see cref="M:Tinkerforge.BrickletPerformanceDC.SetEnabled(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetThermalShutdown">
             <summary>
              Returns the thermal shutdown temperature as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetThermalShutdown(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)">
             <summary>
              Sets the GPIO configuration for the given channel.
              You can configure a debounce and the deceleration that is used if the action is
              configured as ``normal stop``. See <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOAction(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetGPIOConfiguration(System.Byte,System.Int32@,System.Int32@)">
             <summary>
              Returns the GPIO configuration for a channel as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetGPIOAction(System.Byte,System.Int64)">
             <summary>
              Sets the GPIO action for the given channel.
              
              The action can be a normal stop, a full brake or a callback. Each for a rising
              edge or falling edge. The actions are a bitmask they can be used at the same time.
              You can for example trigger a full brake and a callback at the same time or for
              rising and falling edge.
              
              The deceleration speed for the normal stop can be configured with
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetGPIOAction(System.Byte)">
             <summary>
              Returns the GPIO action for a channel as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOAction(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetGPIOState">
             <summary>
              Returns the GPIO state for both channels. True if the state is ``high`` and
              false if the state is ``low``.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetErrorLEDConfig(System.Byte)">
             <summary>
              Configures the error LED to be either turned off, turned on, blink in
              heartbeat mode or show an error.
              
              If the LED is configured to show errors it has three different states:
              
              * Off: No error present.
              * 1s interval blinking: Input voltage too low (below 6V).
              * 250ms interval blinking: Overtemperature or overcurrent.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetErrorLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetErrorLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetCWLEDConfig(System.Byte)">
             <summary>
              Configures the CW LED to be either turned off, turned on, blink in
              heartbeat mode or if the motor turn clockwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetCWLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetCWLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetCCWLEDConfig(System.Byte)">
             <summary>
              Configures the CCW LED to be either turned off, turned on, blink in
              heartbeat mode or if the motor turn counter-clockwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetCCWLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetCCWLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetGPIOLEDConfig(System.Byte,System.Byte)">
             <summary>
              Configures the GPIO LED to be either turned off, turned on, blink in
              heartbeat mode or the GPIO state.
              
              The GPIO LED can be configured for both channels.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetGPIOLEDConfig(System.Byte)">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetGPIOLEDConfig(System.Byte,System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetEmergencyShutdownCallbackConfiguration(System.Boolean)">
             <summary>
              Enable/Disable <see cref="E:Tinkerforge.BrickletPerformanceDC.EmergencyShutdownCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetEmergencyShutdownCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetEmergencyShutdownCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetVelocityReachedCallbackConfiguration(System.Boolean)">
             <summary>
              Enable/Disable <see cref="E:Tinkerforge.BrickletPerformanceDC.VelocityReachedCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetVelocityReachedCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetVelocityReachedCallbackConfiguration(System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletPerformanceDC.CurrentVelocityCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetCurrentVelocityCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetCurrentVelocityCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletPerformanceDC.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletPerformanceDC.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletPerformanceDC.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletPerformanceDC.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.OnEmergencyShutdownCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.OnVelocityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.OnCurrentVelocityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPerformanceDC.OnGPIOStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoBuzzer">
             <summary>
              Creates 1kHz beep
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoBuzzer.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoBuzzer.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoBuzzer.FUNCTION_BEEP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoBuzzer.FUNCTION_MORSE_CODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoBuzzer.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoBuzzer.BeepFinishedCallback">
             <summary>
              This callback is triggered if a beep set by <see cref="M:Tinkerforge.BrickletPiezoBuzzer.Beep(System.Int64)" /> is finished
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoBuzzer.BeepFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoBuzzer.BeepFinished">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoBuzzer.MorseCodeFinishedCallback">
             <summary>
              This callback is triggered if the playback of the morse code set by
              <see cref="M:Tinkerforge.BrickletPiezoBuzzer.MorseCode(System.String)" /> is finished.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoBuzzer.MorseCodeFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoBuzzer.MorseCodeFinished">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.Beep(System.Int64)">
             <summary>
              Beeps for the given duration.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.MorseCode(System.String)">
             <summary>
              Sets morse code that will be played by the piezo buzzer. The morse code
              is given as a string consisting of "." (dot), "-" (minus) and " " (space)
              for *dits*, *dahs* and *pauses*. Every other character is ignored.
              
              For example: If you set the string "...---...", the piezo buzzer will beep
              nine times with the durations "short short short long long long short
              short short".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.OnBeepFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoBuzzer.OnMorseCodeFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeaker">
             <summary>
              Creates beep with configurable frequency
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.FUNCTION_BEEP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.FUNCTION_MORSE_CODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.FUNCTION_CALIBRATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.BEEP_DURATION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeaker.BEEP_DURATION_INFINITE">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeaker.BeepFinishedCallback">
             <summary>
              This callback is triggered if a beep set by <see cref="M:Tinkerforge.BrickletPiezoSpeaker.Beep(System.Int64,System.Int32)" /> is finished
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeaker.BeepFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeaker.BeepFinished">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeaker.MorseCodeFinishedCallback">
             <summary>
              This callback is triggered if the playback of the morse code set by
              <see cref="M:Tinkerforge.BrickletPiezoSpeaker.MorseCode(System.String,System.Int32)" /> is finished.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeaker.MorseCodeFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeaker.MorseCodeFinished">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.Beep(System.Int64,System.Int32)">
             <summary>
              Beeps with the given frequency for the given duration.
              
              .. versionchanged:: 2.0.2$nbsp;(Plugin)
                 A duration of 0 stops the current beep if any, the frequency parameter is
                 ignored. A duration of 4294967295 results in an infinite beep.
              
              The Piezo Speaker Bricklet can only approximate the frequency, it will play
              the best possible match by applying the calibration (see <see cref="M:Tinkerforge.BrickletPiezoSpeaker.Calibrate" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.MorseCode(System.String,System.Int32)">
             <summary>
              Sets morse code that will be played by the piezo buzzer. The morse code
              is given as a string consisting of "." (dot), "-" (minus) and " " (space)
              for *dits*, *dahs* and *pauses*. Every other character is ignored.
              
              For example: If you set the string "...---...", the piezo buzzer will beep
              nine times with the durations "short short short long long long short
              short short".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.Calibrate">
             <summary>
              The Piezo Speaker Bricklet can play 512 different tones. This function
              plays each tone and measures the exact frequency back. The result is a
              mapping between setting value and frequency. This mapping is stored
              in the EEPROM and loaded on startup.
              
              The Bricklet should come calibrated, you only need to call this
              function (once) every time you reflash the Bricklet plugin.
              
              Returns *true* after the calibration finishes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.OnBeepFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeaker.OnMorseCodeFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeakerV2">
             <summary>
              Creates beep and alarm with configurable volume and frequency
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_SET_BEEP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_BEEP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_SET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_UPDATE_VOLUME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_UPDATE_FREQUENCY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BEEP_DURATION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BEEP_DURATION_INFINITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.ALARM_DURATION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.ALARM_DURATION_INFINITE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletPiezoSpeakerV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeakerV2.BeepFinishedCallback">
             <summary>
              This callback is triggered if a beep set by <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetBeep(System.Int32,System.Byte,System.Int64)" /> is finished
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeakerV2.BeepFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletPiezoSpeakerV2.AlarmFinishedCallback">
             <summary>
              This callback is triggered if a alarm set by <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetAlarm(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int64)" /> is finished
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletPiezoSpeakerV2.AlarmFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.SetBeep(System.Int32,System.Byte,System.Int64)">
             <summary>
              Beeps with the given frequency and volume for the duration.
              
              A duration of 0 stops the current beep if any is ongoing.
              A duration of 4294967295 results in an infinite beep.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetBeep(System.Int32@,System.Byte@,System.Int64@,System.Int64@)">
             <summary>
              Returns the last beep settings as set by <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetBeep(System.Int32,System.Byte,System.Int64)" />. If a beep is currently
              running it also returns the remaining duration of the beep.
              
              If the frequency or volume is updated during a beep (with <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.UpdateFrequency(System.Int32)" />
              or <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.UpdateVolume(System.Byte)" />) this function returns the updated value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.SetAlarm(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int64)">
             <summary>
              Creates an alarm (a tone that goes back and force between two specified frequencies).
              
              The following parameters can be set:
              
              * Start Frequency: Start frequency of the alarm.
              * End Frequency: End frequency of the alarm.
              * Step Size: Size of one step of the sweep between the start/end frequencies.
              * Step Delay: Delay between two steps (duration of time that one tone is used in a sweep).
              * Duration: Duration of the alarm.
              
              A duration of 0 stops the current alarm if any is ongoing.
              A duration of 4294967295 results in an infinite alarm.
              
              Below you can find two sets of example settings that you can try out. You can use
              these as a starting point to find an alarm signal that suits your application.
              
              Example 1: 10 seconds of loud annoying fast alarm
              
              * Start Frequency = 800
              * End Frequency = 2000
              * Step Size = 10
              * Step Delay = 1
              * Volume = 10
              * Duration = 10000
              
              Example 2: 10 seconds of soft siren sound with slow build-up
              
              * Start Frequency = 250
              * End Frequency = 750
              * Step Size = 1
              * Step Delay = 5
              * Volume = 0
              * Duration = 10000
              
              The following conditions must be met:
              
              * Start Frequency: has to be smaller than end frequency
              * End Frequency: has to be bigger than start frequency
              * Step Size: has to be small enough to fit into the frequency range
              * Step Delay: has to be small enough to fit into the duration
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetAlarm(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Byte@,System.Int64@,System.Int64@,System.Int32@)">
             <summary>
              Returns the last alarm settings as set by <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetAlarm(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int64)" />. If an alarm is currently
              running it also returns the remaining duration of the alarm as well as the
              current frequency of the alarm.
              
              If the volume is updated during an alarm (with <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.UpdateVolume(System.Byte)" />)
              this function returns the updated value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.UpdateVolume(System.Byte)">
             <summary>
              Updates the volume of an ongoing beep or alarm.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.UpdateFrequency(System.Int32)">
             <summary>
              Updates the frequency of an ongoing beep.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletPiezoSpeakerV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.OnBeepFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletPiezoSpeakerV2.OnAlarmFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLED">
             <summary>
              Controls one RGB LED
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLED.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLED.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLED.FUNCTION_SET_RGB_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLED.FUNCTION_GET_RGB_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLED.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLED.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLED.SetRGBValue(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the *r*, *g* and *b* values for the LED.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLED.GetRGBValue(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the *r*, *g* and *b* values of the LED as set by <see cref="M:Tinkerforge.BrickletRGBLED.SetRGBValue(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLED.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLEDButton">
             <summary>
              Push button with built-in RGB LED
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_SET_COLOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_COLOR">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_BUTTON_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_SET_COLOR_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_COLOR_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BUTTON_STATE_PRESSED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BUTTON_STATE_RELEASED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDButton.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRGBLEDButton.ButtonStateChangedCallback">
             <summary>
              This callback is triggered every time the button state changes from pressed to
              released or from released to pressed.
              
              The parameter is the current state of the button.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLEDButton.ButtonStateChangedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.SetColor(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the color of the LED.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetColor(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the LED color as set by <see cref="M:Tinkerforge.BrickletRGBLEDButton.SetColor(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetButtonState">
             <summary>
              Returns the current state of the button (either pressed or released).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.SetColorCalibration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets a color calibration. Some colors appear brighter then others,
              so a calibration may be necessary for uniform colors.
              
              The calibration is saved in flash. You don't need to call this
              function on every startup.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetColorCalibration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the color calibration as set by <see cref="M:Tinkerforge.BrickletRGBLEDButton.SetColorCalibration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRGBLEDButton.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRGBLEDButton.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRGBLEDButton.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRGBLEDButton.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDButton.OnButtonStateChangedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLEDMatrix">
             <summary>
              RGB LED Matrix with 8x8 pixel
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_RED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_RED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_GREEN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_GREEN">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_BLUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_BLUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_FRAME_DURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_DRAW_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_SUPPLY_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDMatrix.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedCallback">
             <summary>
              This callback is triggered as soon as a new frame write is started.
              The LED values are double buffered, so you can send the LED values
              for the next frame directly after this callback is triggered.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])">
             <summary>
              Sets the 64 red LED values of the matrix.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetRed">
             <summary>
              Returns the red LED values as set by <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])">
             <summary>
              Sets the 64 green LED values of the matrix.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetGreen">
             <summary>
              Returns the green LED values as set by <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])">
             <summary>
              Sets the 64 blue LED values of the matrix.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetBlue">
             <summary>
              Returns the blue LED values as set by <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetFrameDuration(System.Int32)">
             <summary>
              Sets the frame duration.
              
              Example: If you want to achieve 20 frames per second, you should
              set the frame duration to 50ms (50ms * 20 = 1 second).
              
              Set this value to 0 to turn the automatic frame write mechanism off.
              
              Approach:
              
              * Call <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetFrameDuration(System.Int32)" /> with value &gt; 0.
              * Set LED values for first frame with <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])" />.
              * Wait for <see cref="E:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedCallback" /> callback.
              * Set LED values for second frame with <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])" />.
              * Wait for <see cref="E:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedCallback" /> callback.
              * and so on.
              
              For frame duration of 0 see <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.DrawFrame" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetFrameDuration">
             <summary>
              Returns the frame duration as set by <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetFrameDuration(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.DrawFrame">
             <summary>
              If you set the frame duration to 0 (see <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetFrameDuration(System.Int32)" />), you can use this
              function to transfer the frame to the matrix.
              
              Approach:
              
              * Call <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetFrameDuration(System.Int32)" /> with 0.
              * Set LED values for first frame with <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])" />.
              * Call <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.DrawFrame" />.
              * Wait for <see cref="E:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedCallback" /> callback.
              * Set LED values for second frame with <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetRed(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetGreen(System.Byte[])" />, <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBlue(System.Byte[])" />.
              * Call <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.DrawFrame" />.
              * Wait for <see cref="E:Tinkerforge.BrickletRGBLEDMatrix.FrameStartedCallback" /> callback.
              * and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetSupplyVoltage">
             <summary>
              Returns the current supply voltage of the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRGBLEDMatrix.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDMatrix.OnFrameStartedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRGBLEDV2">
             <summary>
              Controls one RGB LED
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_SET_RGB_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_RGB_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRGBLEDV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.SetRGBValue(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the *r*, *g* and *b* values for the LED.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetRGBValue(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the *r*, *g* and *b* values of the LED as set by <see cref="M:Tinkerforge.BrickletRGBLEDV2.SetRGBValue(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRGBLEDV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRGBLEDV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRGBLEDV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRGBLEDV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRGBLEDV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232">
             <summary>
              Communicates with RS232 devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_WRITE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_READ">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_ENABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_DISABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_IS_READ_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_SET_BREAK_CONDITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_SET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_GET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_READ_FRAME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_300">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_600">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_1200">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_2400">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_4800">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_9600">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_14400">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_19200">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_28800">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_38400">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_57600">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_115200">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.BAUDRATE_230400">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.PARITY_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.PARITY_ODD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.PARITY_EVEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.PARITY_FORCED_PARITY_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.PARITY_FORCED_PARITY_0">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.STOPBITS_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.STOPBITS_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.WORDLENGTH_5">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.WORDLENGTH_6">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.WORDLENGTH_7">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.WORDLENGTH_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.HARDWARE_FLOWCONTROL_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.HARDWARE_FLOWCONTROL_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.SOFTWARE_FLOWCONTROL_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.SOFTWARE_FLOWCONTROL_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.ERROR_OVERRUN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.ERROR_PARITY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232.ERROR_FRAMING">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232.ReadCallback">
             <summary>
              This callback is called if new data is available. The message has
              a maximum size of 60 characters. The actual length of the message
              is given in addition.
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletRS232.EnableReadCallback" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232.ReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232.ErrorCallback">
             <summary>
              This callback is called if an error occurs.
              Possible errors are overrun, parity or framing error.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232.ErrorEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232.FrameReadableCallback">
             <summary>
              This callback is called if at least one frame of data is readable. The frame size is configured with <see cref="M:Tinkerforge.BrickletRS232.SetFrameReadableCallbackConfiguration(System.Byte)" />.
              The frame count parameter is the number of frames that can be read.
              This callback is triggered only once until <see cref="M:Tinkerforge.BrickletRS232.Read(System.Char[]@,System.Byte@)" /> or <see cref="M:Tinkerforge.BrickletRS232.ReadFrame(System.Char[]@,System.Byte@)" /> is called. This means, that if you have configured a frame size of X bytes,
              you can read exactly X bytes using the <see cref="M:Tinkerforge.BrickletRS232.ReadFrame(System.Char[]@,System.Byte@)" /> function, every time the callback triggers without checking the frame count parameter.
              
              .. versionadded:: 2.0.4$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232.FrameReadableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.Write(System.Char[],System.Byte)">
             <summary>
              Writes a string of up to 60 characters to the RS232 interface. The string
              can be binary data, ASCII or similar is not necessary.
              
              The length of the string has to be given as an additional parameter.
              
              The return value is the number of bytes that could be written.
              
              See <see cref="M:Tinkerforge.BrickletRS232.SetConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" /> for configuration possibilities
              regarding baudrate, parity and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.Read(System.Char[]@,System.Byte@)">
             <summary>
              Returns the currently buffered message. The maximum length
              of message is 60. If the returned length is 0, no new data was available.
              
              Instead of polling with this function, you can also use
              callbacks. See <see cref="M:Tinkerforge.BrickletRS232.EnableReadCallback" /> and <see cref="E:Tinkerforge.BrickletRS232.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.EnableReadCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletRS232.ReadCallback" /> callback. This will disable the <see cref="E:Tinkerforge.BrickletRS232.FrameReadableCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.DisableReadCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletRS232.ReadCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.IsReadCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletRS232.ReadCallback" /> callback is enabled,
              *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.SetConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the configuration for the RS232 communication.
              
              Hard-/Software flow control can either be on or off but not both simultaneously on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.GetConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS232.SetConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.SetBreakCondition(System.Int32)">
             <summary>
              Sets a break condition (the TX output is forced to a logic 0 state).
              The parameter sets the hold-time of the break condition.
              
              .. versionadded:: 2.0.2$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.SetFrameReadableCallbackConfiguration(System.Byte)">
             <summary>
              Configures the <see cref="E:Tinkerforge.BrickletRS232.FrameReadableCallback" /> callback. The frame size is the number of bytes, that have to be readable to trigger the callback.
              A frame size of 0 disables the callback. A frame size greater than 0 enables the callback and disables the <see cref="E:Tinkerforge.BrickletRS232.ReadCallback" /> callback.
              
              By default the callback is disabled.
              
              .. versionadded:: 2.0.4$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.GetFrameReadableCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletRS232.SetFrameReadableCallbackConfiguration(System.Byte)" />.
              
              .. versionadded:: 2.0.4$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.ReadFrame(System.Char[]@,System.Byte@)">
             <summary>
              Returns up to one frame of bytes from the read buffer.
              The frame size is configured with <see cref="M:Tinkerforge.BrickletRS232.SetFrameReadableCallbackConfiguration(System.Byte)" />.
              If the returned length is 0, no new data was available.
              
              .. versionadded:: 2.0.4$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.OnReadCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.OnErrorCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232.OnFrameReadableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232V2">
             <summary>
              Communicates with RS232 devices
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_WRITE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_READ_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_ENABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_DISABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_IS_READ_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_BUFFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_BUFFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_BUFFER_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.PARITY_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.PARITY_ODD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.PARITY_EVEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STOPBITS_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STOPBITS_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.WORDLENGTH_5">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.WORDLENGTH_6">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.WORDLENGTH_7">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.WORDLENGTH_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FLOWCONTROL_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FLOWCONTROL_SOFTWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.FLOWCONTROL_HARDWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS232V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232V2.ReadLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232V2.ReadLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232V2.ErrorCountCallback">
             <summary>
              This callback is called if a new error occurs. It returns
              the current overrun and parity error count.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232V2.ErrorCountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232V2.FrameReadableCallback">
             <summary>
              This callback is called if at least one frame of data is readable. The frame size is configured with <see cref="M:Tinkerforge.BrickletRS232V2.SetFrameReadableCallbackConfiguration(System.Int32)" />.
              The frame count parameter is the number of frames that can be read.
              This callback is triggered only once until <see cref="M:Tinkerforge.BrickletRS232V2.Read(System.Int32)" /> is called. This means, that if you have configured a frame size of X bytes,
              you can read exactly X bytes using the <see cref="M:Tinkerforge.BrickletRS232V2.Read(System.Int32)" /> function, every time the callback triggers without checking the frame count parameter.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232V2.FrameReadableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS232V2.ReadCallback">
             <summary>
              This callback is called if new data is available.
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletRS232V2.EnableReadCallback" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for message.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS232V2.ReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.WriteLowLevel(System.Int32,System.Int32,System.Char[])">
             <summary>
              Writes characters to the RS232 interface. The characters can be binary data,
              ASCII or similar is not necessary.
              
              The return value is the number of characters that were written.
              
              See <see cref="M:Tinkerforge.BrickletRS232V2.SetConfiguration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" /> for configuration possibilities
              regarding baud rate, parity and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.ReadLowLevel(System.Int32,System.Int32@,System.Int32@,System.Char[]@)">
             <summary>
              Returns up to *length* characters from receive buffer.
              
              Instead of polling with this function, you can also use
              callbacks. But note that this function will return available
              data only when the read callback is disabled.
              See <see cref="M:Tinkerforge.BrickletRS232V2.EnableReadCallback" /> and <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.EnableReadCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback. This will disable the <see cref="E:Tinkerforge.BrickletRS232V2.FrameReadableCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.DisableReadCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.IsReadCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback is enabled,
              *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetConfiguration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the configuration for the RS232 communication.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetConfiguration(System.Int64@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS232V2.SetConfiguration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetBufferConfig(System.Int32,System.Int32)">
             <summary>
              Sets the send and receive buffer size in byte. In total the buffers have to be
              10240 byte (10KiB) in size, the minimum buffer size is 1024 byte (1KiB) for each.
              
              The current buffer content is lost if this function is called.
              
              The send buffer holds data that is given by <see cref="M:Tinkerforge.BrickletRS232V2.Write(System.Char[])" /> and
              can not be written yet. The receive buffer holds data that is
              received through RS232 but could not yet be send to the
              user, either by <see cref="M:Tinkerforge.BrickletRS232V2.Read(System.Int32)" /> or through <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetBufferConfig(System.Int32@,System.Int32@)">
             <summary>
              Returns the buffer configuration as set by <see cref="M:Tinkerforge.BrickletRS232V2.SetBufferConfig(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetBufferStatus(System.Int32@,System.Int32@)">
             <summary>
              Returns the currently used bytes for the send and received buffer.
              
              See <see cref="M:Tinkerforge.BrickletRS232V2.SetBufferConfig(System.Int32,System.Int32)" /> for buffer size configuration.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetErrorCount(System.Int64@,System.Int64@)">
             <summary>
              Returns the current number of overrun and parity errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetFrameReadableCallbackConfiguration(System.Int32)">
             <summary>
              Configures the <see cref="E:Tinkerforge.BrickletRS232V2.FrameReadableCallback" /> callback. The frame size is the number of bytes, that have to be readable to trigger the callback.
              A frame size of 0 disables the callback. A frame size greater than 0 enables the callback and disables the <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback.
              
              By default the callback is disabled.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetFrameReadableCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletRS232V2.SetFrameReadableCallbackConfiguration(System.Int32)" />.
              
              .. versionadded:: 2.0.3$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRS232V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRS232V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRS232V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS232V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.Write(System.Char[])">
             <summary>
              Writes characters to the RS232 interface. The characters can be binary data,
              ASCII or similar is not necessary.
              
              The return value is the number of characters that were written.
              
              See <see cref="M:Tinkerforge.BrickletRS232V2.SetConfiguration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" /> for configuration possibilities
              regarding baud rate, parity and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.Read(System.Int32)">
             <summary>
              Returns up to *length* characters from receive buffer.
              
              Instead of polling with this function, you can also use
              callbacks. But note that this function will return available
              data only when the read callback is disabled.
              See <see cref="M:Tinkerforge.BrickletRS232V2.EnableReadCallback" /> and <see cref="E:Tinkerforge.BrickletRS232V2.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.OnReadLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.OnErrorCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS232V2.OnFrameReadableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485">
             <summary>
              Communicates with RS485/Modbus devices with full- or half-duplex
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_WRITE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_READ_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_ENABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_DISABLE_READ_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_IS_READ_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_RS485_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_RS485_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_MODBUS_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_MODBUS_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_COMMUNICATION_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_BUFFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_BUFFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_BUFFER_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_ENABLE_ERROR_COUNT_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_DISABLE_ERROR_COUNT_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_IS_ERROR_COUNT_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_MODBUS_COMMON_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_REPORT_EXCEPTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_READ_COILS_REQUEST_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_READ_COILS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_READ_HOLDING_REGISTERS_REQUEST_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_READ_HOLDING_REGISTERS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_WRITE_SINGLE_COIL_REQUEST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_WRITE_SINGLE_COIL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_WRITE_SINGLE_REGISTER_REQUEST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_WRITE_SINGLE_REGISTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_WRITE_MULTIPLE_COILS_REQUEST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_WRITE_MULTIPLE_COILS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_WRITE_MULTIPLE_REGISTERS_REQUEST">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_WRITE_MULTIPLE_REGISTERS_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_READ_DISCRETE_INPUTS_REQUEST_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_READ_DISCRETE_INPUTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_SLAVE_ANSWER_READ_INPUT_REGISTERS_REQUEST_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_MODBUS_MASTER_READ_INPUT_REGISTERS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_FRAME_READABLE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.PARITY_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.PARITY_ODD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.PARITY_EVEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STOPBITS_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STOPBITS_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.WORDLENGTH_5">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.WORDLENGTH_6">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.WORDLENGTH_7">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.WORDLENGTH_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.DUPLEX_HALF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.DUPLEX_FULL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.MODE_RS485">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.MODE_MODBUS_MASTER_RTU">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.MODE_MODBUS_SLAVE_RTU">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.COMMUNICATION_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.COMMUNICATION_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_TIMEOUT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_SUCCESS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_ILLEGAL_FUNCTION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_ILLEGAL_DATA_ADDRESS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_ILLEGAL_DATA_VALUE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_SLAVE_DEVICE_FAILURE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_ACKNOWLEDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_SLAVE_DEVICE_BUSY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_MEMORY_PARITY_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_GATEWAY_PATH_UNAVAILABLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.EXCEPTION_CODE_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRS485.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ReadLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ReadLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ErrorCountCallback">
             <summary>
              This callback is called if a new error occurs. It returns
              the current overrun and parity error count.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ErrorCountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveReadCoilsRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to read coils. The parameters are
              request ID of the request, the number of the first coil to be read and the number of coils to
              be read as received by the request. The number of the first coil is called starting address for backwards compatibility reasons.
              It is not an address, but instead a coil number in the range of 1 to 65536.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadCoilsRequest(System.Byte,System.Boolean[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveReadCoilsRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveReadHoldingRegistersRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to read holding registers. The parameters
              are request ID of the request, the number of the first holding register to be read and the number of holding
              registers to be read as received by the request. The number of the first holding register is called starting address for backwards compatibility reasons.
              It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is omitted.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadHoldingRegistersRequest(System.Byte,System.Int32[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveReadHoldingRegistersRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleCoilRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to write a single coil. The parameters
              are request ID of the request, the number of the coil and the value of coil to be
              written as received by the request. The number of the coil is called coil address for backwards compatibility reasons.
              It is not an address, but instead a coil number in the range of 1 to 65536.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteSingleCoilRequest(System.Byte)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleCoilRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleCoilResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to write a single coil.
              
              The parameters are
              request ID of the request and exception code of the response.
              
              Any non-zero exception code indicates a problem.
              If the exception code is greater than 0 then the number represents a Modbus
              exception code. If it is less than 0 then it represents other errors. For
              example, -1 indicates that the request timed out or that the master did not receive
              any valid response of the request within the master request timeout period as set
              by <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleCoilResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleRegisterRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to write a single holding register. The parameters
              are request ID of the request, the number of the holding register and the register value to
              be written as received by the request. The number of the holding register is called starting address for backwards compatibility reasons.
              It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is omitted.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteSingleRegisterRequest(System.Byte)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleRegisterRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleRegisterResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to write a single register.
              
              The parameters are
              request ID of the request and exception code of the response.
              
              Any non-zero exception code
              indicates a problem. If the exception code is greater than 0 then the number
              represents a Modbus exception code. If it is less than 0 then it represents
              other errors. For example, -1 indicates that the request timed out or that the
              master did not receive any valid response of the request within the master request
              timeout period as set by <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleRegisterResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoilsResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to read coils.
              
              The parameters are
              request ID of the request and exception code of the response.
              
              Any non-zero exception code
              indicates a problem. If the exception code is greater than 0 then the number
              represents a Modbus exception code. If it is less than 0 then it represents
              other errors. For example, -1 indicates that the request timedout or that the
              master did not receive any valid response of the request within the master request
              timeout period as set by <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoilsResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegistersResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to write multiple registers.
              
              The parameters
              are request ID of the request and exception code of the response.
              
              Any non-zero
              exception code indicates a problem. If the exception code is greater than 0 then
              the number represents a Modbus exception code. If it is less than 0 then it
              represents other errors. For example, -1 indicates that the request timedout or
              that the master did not receive any valid response of the request within the master
              request timeout period as set by <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegistersResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveReadDiscreteInputsRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to read discrete inputs. The parameters
              are request ID of the request, the number of the first discrete input and the number of discrete
              inputs to be read as received by the request. The number of the first discrete input is called starting address for backwards compatibility reasons.
              It is not an address, but instead a discrete input number in the range of 1 to 65536. The prefix digit 1 (for discrete input) is omitted.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadDiscreteInputsRequest(System.Byte,System.Boolean[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveReadDiscreteInputsRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveReadInputRegistersRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to read input registers. The parameters
              are request ID of the request, the number of the first input register and the number of input
              registers to be read as received by the request. The number of the first input register is called starting address for backwards compatibility reasons.
              It is not an address, but instead a input register number in the range of 1 to 65536. The prefix digit 3 (for input register) is omitted.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadInputRegistersRequest(System.Byte,System.Int32[])" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveReadInputRegistersRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.FrameReadableCallback">
             <summary>
              This callback is called if at least one frame of data is readable. The frame size is configured with <see cref="M:Tinkerforge.BrickletRS485.SetFrameReadableCallbackConfiguration(System.Int32)" />.
              The frame count parameter is the number of frames that can be read.
              This callback is triggered only once until <see cref="M:Tinkerforge.BrickletRS485.Read(System.Int32)" /> is called. This means, that if you have configured a frame size of X bytes,
              you can read exactly X bytes using the <see cref="M:Tinkerforge.BrickletRS485.Read(System.Int32)" /> function, every time the callback triggers without checking the frame count parameter.
              
              .. versionadded:: 2.0.5$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.FrameReadableEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ReadCallback">
             <summary>
              This callback is called if new data is available.
              
              To enable this callback, use <see cref="M:Tinkerforge.BrickletRS485.EnableReadCallback" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for message.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ReadEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to read coils.
              
              The parameters are request ID
              of the request, exception code of the response and the data as received by the
              response.
              
              Any non-zero exception code indicates a problem. If the exception code
              is greater than 0 then the number represents a Modbus exception code. If it is
              less than 0 then it represents other errors. For example, -1 indicates that
              the request timed out or that the master did not receive any valid response of the
              request within the master request timeout period as set by
              <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for coils.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to read holding registers.
              
              The parameters are
              request ID of the request, exception code of the response and the data as received
              by the response.
              
              Any non-zero exception code indicates a problem. If the exception
              code is greater than 0 then the number represents a Modbus exception code. If
              it is less than 0 then it represents other errors. For example, -1 indicates that
              the request timed out or that the master did not receive any valid response of the
              request within the master request timeout period as set by
              <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for holdingRegisters.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to write multiple coils. The parameters
              are request ID of the request, the number of the first coil and the data to be written as
              received by the request. The number of the first coil is called starting address for backwards compatibility reasons.
              It is not an address, but instead a coil number in the range of 1 to 65536.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteMultipleCoilsRequest(System.Byte)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for coils.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestCallback">
             <summary>
              This callback is called only in Modbus slave mode when the slave receives a
              valid request from a Modbus master to write multiple holding registers. The parameters
              are request ID of the request, the number of the first holding register and the data to be written as
              received by the request. The number of the first holding register is called starting address for backwards compatibility reasons.
              It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is omitted.
              
              To send a response of this request use <see cref="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteMultipleRegistersRequest(System.Byte)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for registers.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to read discrete inputs.
              
              The parameters are
              request ID of the request, exception code of the response and the data as received
              by the response.
              
              Any non-zero exception code indicates a problem. If the exception
              code is greater than 0 then the number represents a Modbus exception code. If
              it is less than 0 then it represents other errors. For example, -1 indicates that
              the request timedout or that the master did not receive any valid response of the
              request within the master request timeout period as set by
              <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for discreteInputs.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseCallback">
             <summary>
              This callback is called only in Modbus master mode when the master receives a
              valid response of a request to read input registers.
              
              The parameters are
              request ID of the request, exception code of the response and the data as received
              by the response.
              
              Any non-zero exception code indicates a problem. If the exception
              code is greater than 0 then the number represents a Modbus exception code. If
              it is less than 0 then it represents other errors. For example, -1 indicates that
              the request timedout or that the master did not receive any valid response of the
              request within the master request timeout period as set by
              <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for inputRegisters.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.WriteLowLevel(System.Int32,System.Int32,System.Char[])">
             <summary>
              Writes characters to the RS485 interface. The characters can be binary data,
              ASCII or similar is not necessary.
              
              The return value is the number of characters that were written.
              
              See <see cref="M:Tinkerforge.BrickletRS485.SetRS485Configuration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" /> for configuration possibilities
              regarding baudrate, parity and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ReadLowLevel(System.Int32,System.Int32@,System.Int32@,System.Char[]@)">
             <summary>
              Returns up to *length* characters from receive buffer.
              
              Instead of polling with this function, you can also use
              callbacks. But note that this function will return available
              data only when the read callback is disabled.
              See <see cref="M:Tinkerforge.BrickletRS485.EnableReadCallback" /> and <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.EnableReadCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback. This will disable the <see cref="E:Tinkerforge.BrickletRS485.FrameReadableCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.DisableReadCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.IsReadCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback is enabled,
              *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetRS485Configuration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the configuration for the RS485 communication.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetRS485Configuration(System.Int64@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetRS485Configuration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)">
             <summary>
              Sets the configuration for the RS485 Modbus communication. Available options:
              
              * Slave Address: Address to be used as the Modbus slave address in Modbus slave mode. Valid Modbus slave address range is 1 to 247.
              * Master Request Timeout: Specifies how long the master should wait for a response from a slave when in Modbus master mode.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetModbusConfiguration(System.Byte@,System.Int64@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetModbusConfiguration(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetMode(System.Byte)">
             <summary>
              Sets the mode of the Bricklet in which it operates. Available options are
              
              * RS485,
              * Modbus Master RTU and
              * Modbus Slave RTU.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetMode">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetCommunicationLEDConfig(System.Byte)">
             <summary>
              Sets the communication LED configuration. By default the LED shows RS485
              communication traffic by flickering.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetCommunicationLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetCommunicationLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetErrorLEDConfig(System.Byte)">
             <summary>
              Sets the error LED configuration.
              
              By default the error LED turns on if there is any error (see <see cref="E:Tinkerforge.BrickletRS485.ErrorCountCallback" />
              callback). If you call this function with the SHOW ERROR option again, the LED
              will turn off until the next error occurs.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetErrorLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetErrorLEDConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetBufferConfig(System.Int32,System.Int32)">
             <summary>
              Sets the send and receive buffer size in byte. In sum there is
              10240 byte (10KiB) buffer available and the minimum buffer size
              is 1024 byte (1KiB) for both.
              
              The current buffer content is lost if this function is called.
              
              The send buffer holds data that was given by <see cref="M:Tinkerforge.BrickletRS485.Write(System.Char[])" /> and
              could not be written yet. The receive buffer holds data that is
              received through RS485 but could not yet be send to the
              user, either by <see cref="M:Tinkerforge.BrickletRS485.Read(System.Int32)" /> or through <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetBufferConfig(System.Int32@,System.Int32@)">
             <summary>
              Returns the buffer configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetBufferConfig(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetBufferStatus(System.Int32@,System.Int32@)">
             <summary>
              Returns the currently used bytes for the send and received buffer.
              
              See <see cref="M:Tinkerforge.BrickletRS485.SetBufferConfig(System.Int32,System.Int32)" /> for buffer size configuration.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.EnableErrorCountCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletRS485.ErrorCountCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.DisableErrorCountCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletRS485.ErrorCountCallback" /> callback.
              
              By default the callback is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.IsErrorCountCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletRS485.ErrorCountCallback" /> callback is enabled,
              *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetErrorCount(System.Int64@,System.Int64@)">
             <summary>
              Returns the current number of overrun and parity errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetModbusCommonErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the current number of errors occurred in Modbus mode.
              
              * Timeout Error Count: Number of timeouts occurred.
              * Checksum Error Count: Number of failures due to Modbus frame CRC16 checksum mismatch.
              * Frame Too Big Error Count: Number of times frames were rejected because they exceeded maximum Modbus frame size which is 256 bytes.
              * Illegal Function Error Count: Number of errors when an unimplemented or illegal function is requested. This corresponds to Modbus exception code 1.
              * Illegal Data Address Error Count: Number of errors due to invalid data address. This corresponds to Modbus exception code 2.
              * Illegal Data Value Error Count: Number of errors due to invalid data value. This corresponds to Modbus exception code 3.
              * Slave Device Failure Error Count: Number of errors occurred on the slave device which were unrecoverable. This corresponds to Modbus exception code 4.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveReportException(System.Byte,System.Int16)">
             <summary>
              In Modbus slave mode this function can be used to report a Modbus exception for
              a Modbus master request.
              
              * Request ID: Request ID of the request received by the slave.
              * Exception Code: Modbus exception code to report to the Modbus master.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadCoilsRequestLowLevel(System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read coils.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Coils: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadCoilsRequestCallback" /> callback
              with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterReadCoils(System.Byte,System.Int64,System.Int32)">
             <summary>
              In Modbus master mode this function can be used to read coils from a slave. This
              function creates a Modbus function code 1 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first coil to read. For backwards compatibility reasons this parameter is called Starting Address. It is not an address, but instead a coil number in the range of 1 to 65536.
              * Count: Number of coils to read.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadCoilsResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be
              matched with the Request ID returned from this function to verify that the callback
              is indeed for a particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadHoldingRegistersRequestLowLevel(System.Byte,System.Int32,System.Int32,System.Int32[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read holding registers.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Holding Registers: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadHoldingRegistersRequestCallback" />
              callback with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegisters(System.Byte,System.Int64,System.Int32)">
             <summary>
              In Modbus master mode this function can be used to read holding registers from a slave.
              This function creates a Modbus function code 3 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first holding register to read. For backwards compatibility reasons this parameter is called Starting Address. It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is implicit and must be omitted.
              * Count: Number of holding registers to read.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadHoldingRegistersResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteSingleCoilRequest(System.Byte)">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              write a single coil.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleCoilRequestCallback" />
              callback with the Request ID as provided by the arguments of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleCoil(System.Byte,System.Int64,System.Boolean)">
             <summary>
              In Modbus master mode this function can be used to write a single coil of a slave.
              This function creates a Modbus function code 5 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Coil Address: Number of the coil to be written. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead a coil number in the range of 1 to 65536.
              * Coil Value: Value to be written.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleCoilResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteSingleRegisterRequest(System.Byte)">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              write a single register.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteSingleRegisterRequestCallback" />
              callback with the Request ID, Register Address and Register Value as provided by
              the arguments of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleRegister(System.Byte,System.Int64,System.Int32)">
             <summary>
              In Modbus master mode this function can be used to write a single holding register of a
              slave. This function creates a Modbus function code 6 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Register Address: Number of the holding register to be written. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is implicit and must be omitted.
              * Register Value: Value to be written.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteSingleRegisterResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteMultipleCoilsRequest(System.Byte)">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              write multiple coils.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleCoilsRequestCallback" />
              callback with the Request ID of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoilsLowLevel(System.Byte,System.Int64,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              In Modbus master mode this function can be used to write multiple coils of a slave.
              This function creates a Modbus function code 15 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first coil to write. For backwards compatibility reasons, this parameter is called Starting Address.It is not an address, but instead a coil number in the range of 1 to 65536.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoilsResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerWriteMultipleRegistersRequest(System.Byte)">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              write multiple registers.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveWriteMultipleRegistersRequestCallback" />
              callback with the Request ID of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegistersLowLevel(System.Byte,System.Int64,System.Int32,System.Int32,System.Int32[])">
             <summary>
              In Modbus master mode this function can be used to write multiple registers of a slave.
              This function creates a Modbus function code 16 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first holding register to write. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is implicit and must be omitted.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegistersResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadDiscreteInputsRequestLowLevel(System.Byte,System.Int32,System.Int32,System.Boolean[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read discrete inputs.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Discrete Inputs: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadDiscreteInputsRequestCallback" />
              callback with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputs(System.Byte,System.Int64,System.Int32)">
             <summary>
              In Modbus master mode this function can be used to read discrete inputs from a slave.
              This function creates a Modbus function code 2 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first discrete input to read. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead a discrete input number in the range of 1 to 65536. The prefix digit 1 (for discrete input) is implicit and must be omitted.
              * Count: Number of discrete inputs to read.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadDiscreteInputsResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadInputRegistersRequestLowLevel(System.Byte,System.Int32,System.Int32,System.Int32[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read input registers.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Input Registers: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadInputRegistersRequestCallback" /> callback
              with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegisters(System.Byte,System.Int64,System.Int32)">
             <summary>
              In Modbus master mode this function can be used to read input registers from a slave.
              This function creates a Modbus function code 4 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first input register to read. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead an input register number in the range of 1 to 65536. The prefix digit 3 (for input register) is implicit and must be omitted.
              * Count: Number of input registers to read.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterReadInputRegistersResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetFrameReadableCallbackConfiguration(System.Int32)">
             <summary>
              Configures the <see cref="E:Tinkerforge.BrickletRS485.FrameReadableCallback" /> callback. The frame size is the number of bytes, that have to be readable to trigger the callback.
              A frame size of 0 disables the callback. A frame size greater than 0 enables the callback and disables the <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback.
              
              By default the callback is disabled.
              
              .. versionadded:: 2.0.5$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetFrameReadableCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetFrameReadableCallbackConfiguration(System.Int32)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRS485.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRS485.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRS485.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRS485.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.Write(System.Char[])">
             <summary>
              Writes characters to the RS485 interface. The characters can be binary data,
              ASCII or similar is not necessary.
              
              The return value is the number of characters that were written.
              
              See <see cref="M:Tinkerforge.BrickletRS485.SetRS485Configuration(System.Int64,System.Byte,System.Byte,System.Byte,System.Byte)" /> for configuration possibilities
              regarding baudrate, parity and so on.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.Read(System.Int32)">
             <summary>
              Returns up to *length* characters from receive buffer.
              
              Instead of polling with this function, you can also use
              callbacks. But note that this function will return available
              data only when the read callback is disabled.
              See <see cref="M:Tinkerforge.BrickletRS485.EnableReadCallback" /> and <see cref="E:Tinkerforge.BrickletRS485.ReadCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadCoilsRequest(System.Byte,System.Boolean[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read coils.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Coils: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadCoilsRequestCallback" /> callback
              with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadHoldingRegistersRequest(System.Byte,System.Int32[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read holding registers.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Holding Registers: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadHoldingRegistersRequestCallback" />
              callback with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoils(System.Byte,System.Int64,System.Boolean[])">
             <summary>
              In Modbus master mode this function can be used to write multiple coils of a slave.
              This function creates a Modbus function code 15 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first coil to write. For backwards compatibility reasons, this parameter is called Starting Address.It is not an address, but instead a coil number in the range of 1 to 65536.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleCoilsResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegisters(System.Byte,System.Int64,System.Int32[])">
             <summary>
              In Modbus master mode this function can be used to write multiple registers of a slave.
              This function creates a Modbus function code 16 request.
              
              * Slave Address: Address of the target Modbus slave.
              * Starting Address: Number of the first holding register to write. For backwards compatibility reasons, this parameter is called Starting Address. It is not an address, but instead a holding register number in the range of 1 to 65536. The prefix digit 4 (for holding register) is implicit and must be omitted.
              
              Upon success the function will return a non-zero request ID which will represent
              the current request initiated by the Modbus master. In case of failure the returned
              request ID will be 0.
              
              When successful this function will also invoke the <see cref="E:Tinkerforge.BrickletRS485.ModbusMasterWriteMultipleRegistersResponseCallback" />
              callback. In this callback the Request ID provided by the callback argument must be matched
              with the Request ID returned from this function to verify that the callback is indeed for a
              particular request.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadDiscreteInputsRequest(System.Byte,System.Boolean[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read discrete inputs.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Discrete Inputs: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadDiscreteInputsRequestCallback" />
              callback with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.ModbusSlaveAnswerReadInputRegistersRequest(System.Byte,System.Int32[])">
             <summary>
              In Modbus slave mode this function can be used to answer a master request to
              read input registers.
              
              * Request ID: Request ID of the corresponding request that is being answered.
              * Input Registers: Data that is to be sent to the Modbus master for the corresponding request.
              
              This function must be called from the <see cref="E:Tinkerforge.BrickletRS485.ModbusSlaveReadInputRegistersRequestCallback" /> callback
              with the Request ID as provided by the argument of the callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnReadLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnErrorCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveReadCoilsRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterReadCoilsResponseLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveReadHoldingRegistersRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterReadHoldingRegistersResponseLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveWriteSingleCoilRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterWriteSingleCoilResponseCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveWriteSingleRegisterRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterWriteSingleRegisterResponseCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveWriteMultipleCoilsRequestLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterWriteMultipleCoilsResponseCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveWriteMultipleRegistersRequestLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterWriteMultipleRegistersResponseCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveReadDiscreteInputsRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterReadDiscreteInputsResponseLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusSlaveReadInputRegistersRequestCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnModbusMasterReadInputRegistersResponseLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRS485.OnFrameReadableCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClock">
             <summary>
              Battery-backed real-time clock
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_SET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_TIMESTAMP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_SET_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_SET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_DATE_TIME_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_SET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_MONDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_TUESDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_WEDNESDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_THURSDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_FRIDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_SATURDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.WEEKDAY_SUNDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.ALARM_MATCH_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClock.ALARM_INTERVAL_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClock.DateTimeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletRealTimeClock.SetDateTimeCallbackPeriod(System.Int64)" />. The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletRealTimeClock.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)" /> and <see cref="M:Tinkerforge.BrickletRealTimeClock.GetTimestamp" /> combined.
              
              The <see cref="E:Tinkerforge.BrickletRealTimeClock.DateTimeCallback" /> callback is only triggered if the date or time changed
              since the last triggering.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClock.DateTimeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClock.DateTime">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClock.AlarmCallback">
             <summary>
              This callback is triggered every time the current date and time matches the
              configured alarm (see <see cref="M:Tinkerforge.BrickletRealTimeClock.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)" />). The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletRealTimeClock.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)" /> and <see cref="M:Tinkerforge.BrickletRealTimeClock.GetTimestamp" /> combined.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClock.AlarmEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClock.Alarm">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.SetDateTime(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the current date (including weekday) and the current time.
              
              If the backup battery is installed then the real-time clock keeps date and
              time even if the Bricklet is not powered by a Brick.
              
              The real-time clock handles leap year and inserts the 29th of February
              accordingly. But leap seconds, time zones and daylight saving time are not
              handled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the current date (including weekday) and the current time of the
              real-time clock.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetTimestamp">
             <summary>
              Returns the current date and the time of the real-time clock.
              The timestamp has an effective resolution of hundredths of a
              second and is an offset to 2000-01-01 00:00:00.000.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.SetOffset(System.Int16)">
             <summary>
              Sets the offset the real-time clock should compensate for in 2.17 ppm steps
              between -277.76 ppm (-128) and +275.59 ppm (127).
              
              The real-time clock time can deviate from the actual time due to the frequency
              deviation of its 32.768 kHz crystal. Even without compensation (factory
              default) the resulting time deviation should be at most ±20 ppm (±52.6
              seconds per month).
              
              This deviation can be calculated by comparing the same duration measured by the
              real-time clock (``rtc_duration``) an accurate reference clock
              (``ref_duration``).
              
              For best results the configured offset should be set to 0 ppm first and then a
              duration of at least 6 hours should be measured.
              
              The new offset (``new_offset``) can be calculated from the currently configured
              offset (``current_offset``) and the measured durations as follow::
              
                new_offset = current_offset - round(1000000 * (rtc_duration - ref_duration) / rtc_duration / 2.17)
              
              If you want to calculate the offset, then we recommend using the calibration
              dialog in Brick Viewer, instead of doing it manually.
              
              The offset is saved in the EEPROM of the Bricklet and only needs to be
              configured once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetOffset">
             <summary>
              Returns the offset as set by <see cref="M:Tinkerforge.BrickletRealTimeClock.SetOffset(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.SetDateTimeCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletRealTimeClock.DateTimeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletRealTimeClock.DateTimeCallback" /> Callback is only triggered if the date or time changed
              since the last triggering.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetDateTimeCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletRealTimeClock.SetDateTimeCallbackPeriod(System.Int64)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)">
             <summary>
              Configures a repeatable alarm. The <see cref="E:Tinkerforge.BrickletRealTimeClock.AlarmCallback" /> callback is triggered if the
              current date and time matches the configured alarm.
              
              Setting a parameter to -1 means that it should be disabled and doesn't take part
              in the match. Setting all parameters to -1 disables the alarm completely.
              
              For example, to make the alarm trigger every day at 7:30 AM it can be
              configured as (-1, -1, 7, 30, -1, -1, -1). The hour is set to match 7 and the
              minute is set to match 30. The alarm is triggered if all enabled parameters
              match.
              
              The interval has a special role. It allows to make the alarm reconfigure itself.
              This is useful if you need a repeated alarm that cannot be expressed by matching
              the current date and time. For example, to make the alarm trigger every 23
              seconds it can be configured as (-1, -1, -1, -1, -1, -1, 23). Internally the
              Bricklet will take the current date and time, add 23 seconds to it and set the
              result as its alarm. The first alarm will be triggered 23 seconds after the
              call. Because the interval is not -1, the Bricklet will do the same again
              internally, take the current date and time, add 23 seconds to it and set that
              as its alarm. This results in a repeated alarm that triggers every 23 seconds.
              
              The interval can also be used in combination with the other parameters. For
              example, configuring the alarm as (-1, -1, 7, 30, -1, -1, 300) results in an
              alarm that triggers every day at 7:30 AM and is then repeated every 5 minutes.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetAlarm(System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int32@)">
             <summary>
              Returns the alarm configuration as set by <see cref="M:Tinkerforge.BrickletRealTimeClock.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.OnDateTimeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClock.OnAlarmCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClockV2">
             <summary>
              Battery-backed real-time clock
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_DATE_TIME">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_TIMESTAMP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_OFFSET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_DATE_TIME_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_DATE_TIME_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_ALARM">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_MONDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_TUESDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_WEDNESDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_THURSDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_FRIDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_SATURDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.WEEKDAY_SUNDAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.ALARM_MATCH_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.ALARM_INTERVAL_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRealTimeClockV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClockV2.DateTimeCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetDateTimeCallbackConfiguration(System.Int64)" />. The parameters are the
              same as for <see cref="M:Tinkerforge.BrickletRealTimeClockV2.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Int64@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClockV2.DateTimeEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRealTimeClockV2.AlarmCallback">
             <summary>
              This callback is triggered every time the current date and time matches the
              configured alarm (see <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)" />). The parameters are the same
              as for <see cref="M:Tinkerforge.BrickletRealTimeClockV2.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Int64@)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRealTimeClockV2.AlarmEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetDateTime(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the current date (including weekday) and the current time.
              
              If the backup battery is installed then the real-time clock keeps date and
              time even if the Bricklet is not powered by a Brick.
              
              The real-time clock handles leap year and inserts the 29th of February
              accordingly. But leap seconds, time zones and daylight saving time are not
              handled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetDateTime(System.Int32@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Int64@)">
             <summary>
              Returns the current date (including weekday) and the current time of the
              real-time.
              
              The timestamp represents the current date and the the current time of the
              real-time clock converted to milliseconds and is an offset to 2000-01-01 00:00:00.0000.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetTimestamp">
             <summary>
              Returns the current date and the time of the real-time clock converted to
              milliseconds. The timestamp has an effective resolution of hundredths of a
              second and is an offset to 2000-01-01 00:00:00.0000.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetOffset(System.Int16)">
             <summary>
              Sets the offset the real-time clock should compensate for in 2.17 ppm steps
              between -277.76 ppm (-128) and +275.59 ppm (127).
              
              The real-time clock time can deviate from the actual time due to the frequency
              deviation of its 32.768 kHz crystal. Even without compensation (factory
              default) the resulting time deviation should be at most ±20 ppm (±52.6
              seconds per month).
              
              This deviation can be calculated by comparing the same duration measured by the
              real-time clock (``rtc_duration``) an accurate reference clock
              (``ref_duration``).
              
              For best results the configured offset should be set to 0 ppm first and then a
              duration of at least 6 hours should be measured.
              
              The new offset (``new_offset``) can be calculated from the currently configured
              offset (``current_offset``) and the measured durations as follow::
              
                new_offset = current_offset - round(1000000 * (rtc_duration - ref_duration) / rtc_duration / 2.17)
              
              If you want to calculate the offset, then we recommend using the calibration
              dialog in Brick Viewer, instead of doing it manually.
              
              The offset is saved in the EEPROM of the Bricklet and only needs to be
              configured once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetOffset">
             <summary>
              Returns the offset as set by <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetOffset(System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetDateTimeCallbackConfiguration(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletRealTimeClockV2.DateTimeCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetDateTimeCallbackConfiguration">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetDateTimeCallbackConfiguration(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)">
             <summary>
              Configures a repeatable alarm. The <see cref="E:Tinkerforge.BrickletRealTimeClockV2.AlarmCallback" /> callback is triggered if the
              current date and time matches the configured alarm.
              
              Setting a parameter to -1 means that it should be disabled and doesn't take part
              in the match. Setting all parameters to -1 disables the alarm completely.
              
              For example, to make the alarm trigger every day at 7:30 AM it can be
              configured as (-1, -1, 7, 30, -1, -1, -1). The hour is set to match 7 and the
              minute is set to match 30. The alarm is triggered if all enabled parameters
              match.
              
              The interval has a special role. It allows to make the alarm reconfigure itself.
              This is useful if you need a repeated alarm that cannot be expressed by matching
              the current date and time. For example, to make the alarm trigger every 23
              seconds it can be configured as (-1, -1, -1, -1, -1, -1, 23). Internally the
              Bricklet will take the current date and time, add 23 seconds to it and set the
              result as its alarm. The first alarm will be triggered 23 seconds after the
              call. Because the interval is not -1, the Bricklet will do the same again
              internally, take the current date and time, add 23 seconds to it and set that
              as its alarm. This results in a repeated alarm that triggers every 23 seconds.
              
              The interval can also be used in combination with the other parameters. For
              example, configuring the alarm as (-1, -1, 7, 30, -1, -1, 300) results in an
              alarm that triggers every day at 7:30 AM and is then repeated every 5 minutes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetAlarm(System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int32@)">
             <summary>
              Returns the alarm configuration as set by <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetAlarm(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRealTimeClockV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRealTimeClockV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.OnDateTimeCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRealTimeClockV2.OnAlarmCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitch">
             <summary>
              Controls remote mains switches
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_SWITCH_SOCKET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_GET_SWITCHING_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_SET_REPEATS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_GET_REPEATS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_SWITCH_SOCKET_A">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_SWITCH_SOCKET_B">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_DIM_SOCKET_B">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_SWITCH_SOCKET_C">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.SWITCH_TO_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.SWITCH_TO_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.SWITCHING_STATE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitch.SWITCHING_STATE_BUSY">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitch.SwitchingDoneCallback">
             <summary>
              This callback is triggered whenever the switching state changes
              from busy to ready, see <see cref="M:Tinkerforge.BrickletRemoteSwitch.GetSwitchingState" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitch.SwitchingDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitch.SwitchingDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.SwitchSocket(System.Byte,System.Byte,System.Byte)">
             <summary>
              This function is deprecated, use <see cref="M:Tinkerforge.BrickletRemoteSwitch.SwitchSocketA(System.Byte,System.Byte,System.Byte)" /> instead.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.GetSwitchingState">
             <summary>
              Returns the current switching state. If the current state is busy, the
              Bricklet is currently sending a code to switch a socket. It will not
              accept any requests to switch sockets until the state changes to ready.
              
              How long the switching takes is dependent on the number of repeats, see
              <see cref="M:Tinkerforge.BrickletRemoteSwitch.SetRepeats(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.SetRepeats(System.Byte)">
             <summary>
              Sets the number of times the code is sent when one of the switch socket
              functions is called. The repeats basically correspond to the amount of time
              that a button of the remote is pressed.
              
              Some dimmers are controlled by the length of a button pressed,
              this can be simulated by increasing the repeats.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.GetRepeats">
             <summary>
              Returns the number of repeats as set by <see cref="M:Tinkerforge.BrickletRemoteSwitch.SetRepeats(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.SwitchSocketA(System.Byte,System.Byte,System.Byte)">
             <summary>
              To switch a type A socket you have to give the house code, receiver code and the
              state (on or off) you want to switch to.
              
              A detailed description on how you can figure out the house and receiver code
              can be found :ref:`here &lt;remote_switch_bricklet_type_a_house_and_receiver_code&gt;`.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.SwitchSocketB(System.Int64,System.Byte,System.Byte)">
             <summary>
              To switch a type B socket you have to give the address, unit and the state
              (on or off) you want to switch to.
              
              To switch all devices with the same address use 255 for the unit.
              
              A detailed description on how you can teach a socket the address and unit can
              be found :ref:`here &lt;remote_switch_bricklet_type_b_address_and_unit&gt;`.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.DimSocketB(System.Int64,System.Byte,System.Byte)">
             <summary>
              To control a type B dimmer you have to give the address, unit and the
              dim value you want to set the dimmer to.
              
              A detailed description on how you can teach a dimmer the address and unit can
              be found :ref:`here &lt;remote_switch_bricklet_type_b_address_and_unit&gt;`.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.SwitchSocketC(System.Char,System.Byte,System.Byte)">
             <summary>
              To switch a type C socket you have to give the system code, device code and the
              state (on or off) you want to switch to.
              
              A detailed description on how you can figure out the system and device code
              can be found :ref:`here &lt;remote_switch_bricklet_type_c_system_and_device_code&gt;`.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitch.OnSwitchingDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitchV2">
             <summary>
              Controls remote mains switches and receives signals from remotes
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_SWITCHING_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SET_REPEATS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_REPEATS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SWITCH_SOCKET_A">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SWITCH_SOCKET_B">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_DIM_SOCKET_B">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SWITCH_SOCKET_C">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SET_REMOTE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_REMOTE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_REMOTE_STATUS_A">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_REMOTE_STATUS_B">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_REMOTE_STATUS_C">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.SWITCHING_STATE_READY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.SWITCHING_STATE_BUSY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.SWITCH_TO_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.SWITCH_TO_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.REMOTE_TYPE_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.REMOTE_TYPE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.REMOTE_TYPE_C">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRemoteSwitchV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitchV2.SwitchingDoneCallback">
             <summary>
              This callback is triggered whenever the switching state changes
              from busy to ready, see <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.GetSwitchingState" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitchV2.SwitchingDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusACallback">
             <summary>
              Returns the house code, receiver code, switch state (on/off) and number of repeats for
              remote type A.
              
              The repeats are the number of received identical data packets. The longer the button is pressed,
              the higher the repeat number. The callback is triggered with every repeat.
              
              You have to enable the callback with <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" />. The number
              of repeats that you can set in the configuration is the minimum number of repeats that have
              to be seen before the callback is triggered for the first time.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusAEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusBCallback">
             <summary>
              Returns the address (unique per remote), unit (button number), switch state (on/off) and number of repeats for
              remote type B.
              
              If the remote supports dimming the dim value is used instead of the switch state.
              
              The repeats are the number of received identical data packets. The longer the button is pressed,
              the higher the repeat number. The callback is triggered with every repeat.
              
              You have to enable the callback with <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" />. The number
              of repeats that you can set in the configuration is the minimum number of repeats that have
              to be seen before the callback is triggered for the first time.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusBEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusCCallback">
             <summary>
              Returns the system code, device code, switch state (on/off) and number of repeats for
              remote type C.
              
              The repeats are the number of received identical data packets. The longer the button is pressed,
              the higher the repeat number. The callback is triggered with every repeat.
              
              You have to enable the callback with <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" />. The number
              of repeats that you can set in the configuration is the minimum number of repeats that have
              to be seen before the callback is triggered for the first time.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusCEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetSwitchingState">
             <summary>
              Returns the current switching state. If the current state is busy, the
              Bricklet is currently sending a code to switch a socket. It will not
              accept any calls of switch socket functions until the state changes to ready.
              
              How long the switching takes is dependent on the number of repeats, see
              <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRepeats(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SetRepeats(System.Byte)">
             <summary>
              Sets the number of times the code is sent when one of the Switch Socket
              functions is called. The repeats basically correspond to the amount of time
              that a button of the remote is pressed.
              
              Some dimmers are controlled by the length of a button pressed,
              this can be simulated by increasing the repeats.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetRepeats">
             <summary>
              Returns the number of repeats as set by <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRepeats(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SwitchSocketA(System.Byte,System.Byte,System.Byte)">
             <summary>
              To switch a type A socket you have to give the house code, receiver code and the
              state (on or off) you want to switch to.
              
              A detailed description on how you can figure out the house and receiver code
              can be found :ref:`here &lt;remote_switch_bricklet_type_a_house_and_receiver_code&gt;`.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SwitchSocketB(System.Int64,System.Byte,System.Byte)">
             <summary>
              To switch a type B socket you have to give the address, unit and the state
              (on or off) you want to switch to.
              
              To switch all devices with the same address use 255 for the unit.
              
              A detailed description on how you can teach a socket the address and unit can
              be found :ref:`here &lt;remote_switch_bricklet_type_b_address_and_unit&gt;`.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.DimSocketB(System.Int64,System.Byte,System.Byte)">
             <summary>
              To control a type B dimmer you have to give the address, unit and the
              dim value you want to set the dimmer to.
              
              A detailed description on how you can teach a dimmer the address and unit can
              be found :ref:`here &lt;remote_switch_bricklet_type_b_address_and_unit&gt;`.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SwitchSocketC(System.Char,System.Byte,System.Byte)">
             <summary>
              To switch a type C socket you have to give the system code, device code and the
              state (on or off) you want to switch to.
              
              A detailed description on how you can figure out the system and device code
              can be found :ref:`here &lt;remote_switch_bricklet_type_c_system_and_device_code&gt;`.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)">
             <summary>
              Sets the configuration for **receiving** data from a remote of type A, B or C.
              
              * Remote Type: A, B or C depending on the type of remote you want to receive.
              * Minimum Repeats: The minimum number of repeated data packets until the callback
                is triggered (if enabled).
              * Callback Enabled: Enable or disable callback (see <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusACallback" /> callback,
                <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusBCallback" /> callback and <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusCCallback" /> callback).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetRemoteConfiguration(System.Byte@,System.Int32@,System.Boolean@)">
             <summary>
              Returns the remote configuration as set by <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetRemoteStatusA(System.Byte@,System.Byte@,System.Byte@,System.Int32@)">
             <summary>
              Returns the house code, receiver code, switch state (on/off) and number of
              repeats for remote type A.
              
              Repeats == 0 means there was no button press. Repeats &gt;= 1 means there
              was a button press with the specified house/receiver code. The repeats are the
              number of received identical data packets. The longer the button is pressed,
              the higher the repeat number.
              
              Use the callback to get this data automatically when a button is pressed,
              see <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" /> and <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusACallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetRemoteStatusB(System.Int64@,System.Byte@,System.Byte@,System.Byte@,System.Int32@)">
             <summary>
              Returns the address (unique per remote), unit (button number), switch state
              (on/off) and number of repeats for remote type B.
              
              If the remote supports dimming the dim value is used instead of the switch state.
              
              If repeats=0 there was no button press. If repeats &gt;= 1 there
              was a button press with the specified address/unit. The repeats are the number of received
              identical data packets. The longer the button is pressed, the higher the repeat number.
              
              Use the callback to get this data automatically when a button is pressed,
              see <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" /> and <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusBCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetRemoteStatusC(System.Char@,System.Byte@,System.Byte@,System.Int32@)">
             <summary>
              Returns the system code, device code, switch state (on/off) and number of repeats for
              remote type C.
              
              If repeats=0 there was no button press. If repeats &gt;= 1 there
              was a button press with the specified system/device code. The repeats are the number of received
              identical data packets. The longer the button is pressed, the higher the repeat number.
              
              Use the callback to get this data automatically when a button is pressed,
              see <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetRemoteConfiguration(System.Byte,System.Int32,System.Boolean)" /> and <see cref="E:Tinkerforge.BrickletRemoteSwitchV2.RemoteStatusCCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRemoteSwitchV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.OnSwitchingDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.OnRemoteStatusACallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.OnRemoteStatusBCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRemoteSwitchV2.OnRemoteStatusCCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoder">
             <summary>
              360° rotary encoder with push-button
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_GET_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_SET_COUNT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_GET_COUNT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_SET_COUNT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_GET_COUNT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_IS_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoder.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.CountCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackPeriod(System.Int64)" />. The parameter is the count of
              the encoder.
              
              The <see cref="E:Tinkerforge.BrickletRotaryEncoder.CountCallback" /> callback is only triggered if the count has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoder.CountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.Count">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.CountReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the count of the encoder.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoder.CountReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.CountReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.PressedCallback">
             <summary>
              This callback is triggered when the button is pressed.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoder.PressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.Pressed">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.ReleasedCallback">
             <summary>
              This callback is triggered when the button is released.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoder.ReleasedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoder.Released">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.GetCount(System.Boolean)">
             <summary>
              Returns the current count of the encoder. If you set reset
              to true, the count is set back to 0 directly after the
              current count is read.
              
              The encoder has 24 steps per rotation
              
              Turning the encoder to the left decrements the counter,
              so a negative count is possible.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletRotaryEncoder.CountCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletRotaryEncoder.CountCallback" /> callback is only triggered if the count has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.GetCountCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletRotaryEncoder.CountReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the count is *outside* the min and max values"
               "'i'",    "Callback is triggered when the count is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the count is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the count is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.GetCountCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletRotaryEncoder.CountReachedCallback" />
              
              is triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetCountCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletRotaryEncoder.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.IsPressed">
             <summary>
              Returns *true* if the button is pressed and *false* otherwise.
              
              It is recommended to use the <see cref="E:Tinkerforge.BrickletRotaryEncoder.PressedCallback" /> and <see cref="E:Tinkerforge.BrickletRotaryEncoder.ReleasedCallback" /> callbacks
              to handle the button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.OnCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.OnCountReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.OnPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoder.OnReleasedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoderV2">
             <summary>
              360° rotary encoder with push-button
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_SET_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_IS_PRESSED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryEncoderV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoderV2.CountCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.GetCount(System.Boolean)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoderV2.CountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoderV2.PressedCallback">
             <summary>
              This callback is triggered when the button is pressed.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoderV2.PressedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryEncoderV2.ReleasedCallback">
             <summary>
              This callback is triggered when the button is released.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryEncoderV2.ReleasedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetCount(System.Boolean)">
             <summary>
              Returns the current count of the encoder. If you set reset
              to true, the count is set back to 0 directly after the
              current count is read.
              
              The encoder has 24 steps per rotation.
              
              Turning the encoder to the left decrements the counter,
              so a negative count is possible.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletRotaryEncoderV2.CountCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletRotaryEncoderV2.CountCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletRotaryEncoderV2.CountCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetCountCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.IsPressed">
             <summary>
              Returns *true* if the button is pressed and *false* otherwise.
              
              It is recommended to use the <see cref="E:Tinkerforge.BrickletRotaryEncoderV2.PressedCallback" /> and <see cref="E:Tinkerforge.BrickletRotaryEncoderV2.ReleasedCallback" /> callbacks
              to handle the button.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRotaryEncoderV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.OnCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.OnPressedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryEncoderV2.OnReleasedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPoti">
             <summary>
              300° rotary potentiometer
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_SET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_POSITION_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_SET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_POSITION_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPoti.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.PositionCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackPeriod(System.Int64)" />. The parameter is the position of
              the rotary potentiometer.
              
              The <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionCallback" /> callback is only triggered if the position has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPoti.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.Position">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the
              analog value of the rotary potentiometer.
              
              The <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueCallback" /> callback is only triggered if the position has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPoti.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.PositionReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the position of the rotary potentiometer.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPoti.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.PositionReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the rotary potentiometer.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPoti.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPoti.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetPosition">
             <summary>
              Returns the position of the rotary potentiometer. The value is
              between -150° (turned left) and 150° (turned right).
              
              If you want to get the position periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletRotaryPoti.GetPosition" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletRotaryPoti.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletRotaryPoti.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionCallback" /> callback is only triggered if the position has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetPositionCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the position is *outside* the min and max values"
               "'i'",    "Callback is triggered when the position is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the position is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the position is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetPositionCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletRotaryPoti.PositionReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletRotaryPoti.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletRotaryPoti.SetPositionCallbackThreshold(System.Char,System.Int16,System.Int16)" />,
              * <see cref="M:Tinkerforge.BrickletRotaryPoti.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletRotaryPoti.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPoti.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPotiV2">
             <summary>
              300° rotary potentiometer
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_SET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_POSITION_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletRotaryPotiV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletRotaryPotiV2.PositionCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletRotaryPotiV2.GetPosition" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletRotaryPotiV2.PositionEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetPosition">
             <summary>
              Returns the position of the rotary potentiometer. The value is
              between -150° (turned left) and 150° (turned right).
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletRotaryPotiV2.PositionCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletRotaryPotiV2.PositionCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletRotaryPotiV2.PositionCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetPositionCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetPositionCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletRotaryPotiV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletRotaryPotiV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletRotaryPotiV2.OnPositionCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSegmentDisplay4x7">
             <summary>
              Four 7-segment displays with switchable colon
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.FUNCTION_SET_SEGMENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.FUNCTION_GET_SEGMENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.FUNCTION_START_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.FUNCTION_GET_COUNTER_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSegmentDisplay4x7.CounterFinishedCallback">
             <summary>
              This callback is triggered when the counter (see <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7.StartCounter(System.Int16,System.Int16,System.Int16,System.Int64)" />) is
              finished.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSegmentDisplay4x7.CounterFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSegmentDisplay4x7.CounterFinished">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.SetSegments(System.Byte[],System.Byte,System.Boolean)">
             <summary>
              The 7-segment display can be set with bitmaps. Every bit controls one
              segment:
              
              .. image:: /Images/Bricklets/bricklet_segment_display_4x7_bit_order.png
                 :scale: 100 %
                 :alt: Bit order of one segment
                 :align: center
              
              For example to set a "5" you would want to activate segments 0, 2, 3, 5 and 6.
              This is represented by the number 0b01101101 = 0x6d = 109.
              
              The brightness can be set between 0 (dark) and 7 (bright). The colon
              parameter turns the colon of the display on or off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.GetSegments(System.Byte[]@,System.Byte@,System.Boolean@)">
             <summary>
              Returns the segment, brightness and color data as set by
              <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7.SetSegments(System.Byte[],System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.StartCounter(System.Int16,System.Int16,System.Int16,System.Int64)">
             <summary>
              Starts a counter with the *from* value that counts to the *to*
              value with the each step incremented by *increment*.
              *length* is the pause between each increment.
              
              Example: If you set *from* to 0, *to* to 100, *increment* to 1 and
              *length* to 1000, a counter that goes from 0 to 100 with one second
              pause between each increment will be started.
              
              Using a negative increment allows to count backwards.
              
              You can stop the counter at every time by calling <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7.SetSegments(System.Byte[],System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.GetCounterValue">
             <summary>
              Returns the counter value that is currently shown on the display.
              
              If there is no counter running a 0 will be returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7.OnCounterFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSegmentDisplay4x7V2">
             <summary>
              Four 7-segment displays with switchable dots
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_SEGMENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_SEGMENTS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_BRIGHTNESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_BRIGHTNESS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_NUMERIC_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_SELECTED_SEGMENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_SELECTED_SEGMENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_START_COUNTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_COUNTER_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSegmentDisplay4x7V2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSegmentDisplay4x7V2.CounterFinishedCallback">
             <summary>
              This callback is triggered when the counter (see <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.StartCounter(System.Int16,System.Int16,System.Int16,System.Int64)" />) is
              finished.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSegmentDisplay4x7V2.CounterFinishedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetSegments(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean)">
             <summary>
              Sets the segments of the Segment Display 4x7 Bricklet 2.0 segment-by-segment.
              
              The data is split into the four digits, two colon dots and the tick mark.
              
              The indices of the segments in the digit and colon parameters are as follows:
              
              .. image:: /Images/Bricklets/bricklet_segment_display_4x7_v2_segment_index.png
                 :scale: 100 %
                 :alt: Indices of segments
                 :align: center
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetSegments(System.Boolean[]@,System.Boolean[]@,System.Boolean[]@,System.Boolean[]@,System.Boolean[]@,System.Boolean@)">
             <summary>
              Returns the segment data as set by <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetSegments(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetBrightness(System.Byte)">
             <summary>
              The brightness can be set between 0 (dark) and 7 (bright).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetBrightness">
             <summary>
              Returns the brightness as set by <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetBrightness(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetNumericValue(System.Int16[])">
             <summary>
              Sets a numeric value for each of the digits. They represent:
              
              * -2: minus sign
              * -1: blank
              * 0-9: 0-9
              * 10: A
              * 11: b
              * 12: C
              * 13: d
              * 14: E
              * 15: F
              
              Example: A call with [-2, -1, 4, 2] will result in a display of "- 42".
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetSelectedSegment(System.Byte,System.Boolean)">
             <summary>
              Turns one specified segment on or off.
              
              The indices of the segments are as follows:
              
              .. image:: /Images/Bricklets/bricklet_segment_display_4x7_v2_selected_segment_index.png
                 :scale: 100 %
                 :alt: Indices of selected segments
                 :align: center
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetSelectedSegment(System.Byte)">
             <summary>
              Returns the value of a single segment.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.StartCounter(System.Int16,System.Int16,System.Int16,System.Int64)">
             <summary>
              Starts a counter with the *from* value that counts to the *to*
              value with the each step incremented by *increment*.
              *length* is the pause between each increment.
              
              Example: If you set *from* to 0, *to* to 100, *increment* to 1 and
              *length* to 1000, a counter that goes from 0 to 100 with one second
              pause between each increment will be started.
              
              Using a negative *increment* allows to count backwards.
              
              You can stop the counter at every time by calling <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetSegments(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean)" />
              or <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetNumericValue(System.Int16[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetCounterValue">
             <summary>
              Returns the counter value that is currently shown on the display.
              
              If there is no counter running a 0 will be returned.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSegmentDisplay4x7V2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSegmentDisplay4x7V2.OnCounterFinishedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletServoV2">
             <summary>
              Drives up to 10 RC Servos
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_ENABLE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_MOTION_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_MOTION_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_PULSE_WIDTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_PULSE_WIDTH">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_DEGREE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_DEGREE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_SERVO_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_SERVO_CURRENT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_SERVO_CURRENT_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_INPUT_VOLTAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_INPUT_VOLTAGE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_OVERALL_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_CURRENT_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_CURRENT_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_POSITION_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_POSITION_REACHED_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletServoV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletServoV2.PositionReachedCallback">
             <summary>
              This callback is triggered when a position set by <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" />
              is reached. If the new position matches the current position then the
              callback is not triggered, because the servo didn't move.
              The parameters are the servo and the position that is reached.
              
              You can enable this callback with <see cref="M:Tinkerforge.BrickletServoV2.SetPositionReachedCallbackConfiguration(System.Int32,System.Boolean)" />.
              
              <note>
               Since we can't get any feedback from the servo, this only works if the
               velocity (see <see cref="M:Tinkerforge.BrickletServoV2.SetMotionConfiguration(System.Int32,System.Int64,System.Int64,System.Int64)" />) is set smaller or equal to the
               maximum velocity of the servo. Otherwise the servo will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletServoV2.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetStatus(System.Boolean[]@,System.Int16[]@,System.Int16[]@,System.Int32[]@,System.Int32@)">
             <summary>
              Returns the status information of the Servo Bricklet 2.0.
              
              The status includes
              
              * for each channel if it is enabled or disabled,
              * for each channel the current position,
              * for each channel the current velocity,
              * for each channel the current usage and
              * the input voltage.
              
              Please note that the position and the velocity is a snapshot of the
              current position and velocity of the servo in motion.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetEnable(System.Int32,System.Boolean)">
             <summary>
              Enables a servo channel (0 to 9). If a servo is enabled, the configured position,
              velocity, acceleration, etc. are applied immediately.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetEnabled(System.Int32)">
             <summary>
              Returns *true* if the specified servo channel is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)">
             <summary>
              Sets the position in °/100 for the specified servo channel.
              
              The default range of the position is -9000 to 9000, but it can be specified
              according to your servo with <see cref="M:Tinkerforge.BrickletServoV2.SetDegree(System.Int32,System.Int16,System.Int16)" />.
              
              If you want to control a linear servo or RC brushless motor controller or
              similar with the Servo Brick, you can also define lengths or speeds with
              <see cref="M:Tinkerforge.BrickletServoV2.SetDegree(System.Int32,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetPosition(System.Int32)">
             <summary>
              Returns the position of the specified servo channel as set by <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetCurrentPosition(System.Int32)">
             <summary>
              Returns the *current* position of the specified servo channel. This may not be the
              value of <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" /> if the servo is currently approaching a
              position goal.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetCurrentVelocity(System.Int32)">
             <summary>
              Returns the *current* velocity of the specified servo channel. This may not be the
              velocity specified by <see cref="M:Tinkerforge.BrickletServoV2.SetMotionConfiguration(System.Int32,System.Int64,System.Int64,System.Int64)" />. if the servo is
              currently approaching a velocity goal.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetMotionConfiguration(System.Int32,System.Int64,System.Int64,System.Int64)">
             <summary>
              Sets the maximum velocity of the specified servo channel in °/100s as well as
              the acceleration and deceleration in °/100s²
              
              With a velocity of 0 °/100s the position will be set immediately (no velocity).
              
              With an acc-/deceleration of 0 °/100s² the velocity will be set immediately
              (no acc-/deceleration).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetMotionConfiguration(System.Int32,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the motion configuration as set by <see cref="M:Tinkerforge.BrickletServoV2.SetMotionConfiguration(System.Int32,System.Int64,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetPulseWidth(System.Int32,System.Int64,System.Int64)">
             <summary>
              Sets the minimum and maximum pulse width of the specified servo channel in µs.
              
              Usually, servos are controlled with a
              `PWM &lt;https://en.wikipedia.org/wiki/Pulse-width_modulation&gt;`__, whereby the
              length of the pulse controls the position of the servo. Every servo has
              different minimum and maximum pulse widths, these can be specified with
              this function.
              
              If you have a datasheet for your servo that specifies the minimum and
              maximum pulse width, you should set the values accordingly. If your servo
              comes without any datasheet you have to find the values via trial and error.
              
              Both values have a range from 1 to 65535 (unsigned 16-bit integer). The
              minimum must be smaller than the maximum.
              
              The default values are 1000µs (1ms) and 2000µs (2ms) for minimum and
              maximum pulse width.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetPulseWidth(System.Int32,System.Int64@,System.Int64@)">
             <summary>
              Returns the minimum and maximum pulse width for the specified servo channel as set by
              <see cref="M:Tinkerforge.BrickletServoV2.SetPulseWidth(System.Int32,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetDegree(System.Int32,System.Int16,System.Int16)">
             <summary>
              Sets the minimum and maximum degree for the specified servo channel (by default
              given as °/100).
              
              This only specifies the abstract values between which the minimum and maximum
              pulse width is scaled. For example: If you specify a pulse width of 1000µs
              to 2000µs and a degree range of -90° to 90°, a call of <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" />
              with 0 will result in a pulse width of 1500µs
              (-90° = 1000µs, 90° = 2000µs, etc.).
              
              Possible usage:
              
              * The datasheet of your servo specifies a range of 200° with the middle position
                at 110°. In this case you can set the minimum to -9000 and the maximum to 11000.
              * You measure a range of 220° on your servo and you don't have or need a middle
                position. In this case you can set the minimum to 0 and the maximum to 22000.
              * You have a linear servo with a drive length of 20cm, In this case you could
                set the minimum to 0 and the maximum to 20000. Now you can set the Position
                with <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" /> with a resolution of cm/100. Also the velocity will
                have a resolution of cm/100s and the acceleration will have a resolution of
                cm/100s².
              * You don't care about units and just want the highest possible resolution. In
                this case you should set the minimum to -32767 and the maximum to 32767.
              * You have a brushless motor with a maximum speed of 10000 rpm and want to
                control it with a RC brushless motor controller. In this case you can set the
                minimum to 0 and the maximum to 10000. <see cref="M:Tinkerforge.BrickletServoV2.SetPosition(System.Int32,System.Int16)" /> now controls the rpm.
              
              Both values have a possible range from -32767 to 32767
              (signed 16-bit integer). The minimum must be smaller than the maximum.
              
              The default values are -9000 and 9000 for the minimum and maximum degree.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetDegree(System.Int32,System.Int16@,System.Int16@)">
             <summary>
              Returns the minimum and maximum degree for the specified servo channel as set by
              <see cref="M:Tinkerforge.BrickletServoV2.SetDegree(System.Int32,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetPeriod(System.Int32,System.Int64)">
             <summary>
              Sets the period of the specified servo channel in µs.
              
              Usually, servos are controlled with a
              `PWM &lt;https://en.wikipedia.org/wiki/Pulse-width_modulation&gt;`__. Different
              servos expect PWMs with different periods. Most servos run well with a
              period of about 20ms.
              
              If your servo comes with a datasheet that specifies a period, you should
              set it accordingly. If you don't have a datasheet and you have no idea
              what the correct period is, the default value (19.5ms) will most likely
              work fine.
              
              The minimum possible period is 1µs and the maximum is 1000000µs.
              
              The default value is 19.5ms (19500µs).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetPeriod(System.Int32)">
             <summary>
              Returns the period for the specified servo channel as set by <see cref="M:Tinkerforge.BrickletServoV2.SetPeriod(System.Int32,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetServoCurrent(System.Int32)">
             <summary>
              Returns the current consumption of the specified servo channel in mA.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetServoCurrentConfiguration(System.Int32,System.Byte)">
             <summary>
              Sets the averaging duration of the current measurement for the specified servo channel in ms.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetServoCurrentConfiguration(System.Int32)">
             <summary>
              Returns the servo current configuration for the specified servo channel as set
              by <see cref="M:Tinkerforge.BrickletServoV2.SetServoCurrentConfiguration(System.Int32,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetInputVoltageConfiguration(System.Byte)">
             <summary>
              Sets the averaging duration of the input voltage measurement for the specified servo channel in ms.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetInputVoltageConfiguration">
             <summary>
              Returns the input voltage configuration as set by <see cref="M:Tinkerforge.BrickletServoV2.SetInputVoltageConfiguration(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetOverallCurrent">
             <summary>
              Returns the current consumption of all servos together in mA.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetInputVoltage">
             <summary>
              Returns the input voltage in mV. The input voltage is
              given via the black power input connector on the Servo Brick.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetCurrentCalibration(System.Int16[])">
             <summary>
              Sets an offset value (in mA) for each channel.
              
              Note: On delivery the Servo Bricklet 2.0 is already calibrated.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetCurrentCalibration">
             <summary>
              Returns the current calibration as set by <see cref="M:Tinkerforge.BrickletServoV2.SetCurrentCalibration(System.Int16[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetPositionReachedCallbackConfiguration(System.Int32,System.Boolean)">
             <summary>
              Enable/Disable <see cref="E:Tinkerforge.BrickletServoV2.PositionReachedCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetPositionReachedCallbackConfiguration(System.Int32)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletServoV2.SetPositionReachedCallbackConfiguration(System.Int32,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletServoV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletServoV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletServoV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletServoV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletServoV2.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2">
             <summary>
              Silently drives one bipolar stepper motor with up to 46V and 1.6A per phase
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_MAX_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_CURRENT_VELOCITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_SPEED_RAMPING">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_FULL_BRAKE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_CURRENT_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_TARGET_POSITION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_REMAINING_STEPS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_STEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_STEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_DRIVE_FORWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_DRIVE_BACKWARD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_STOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_INPUT_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_MOTOR_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_BASIC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_BASIC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_SPREADCYCLE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_SPREADCYCLE_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_STEALTH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_STEALTH_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_COOLSTEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_COOLSTEP_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_MISC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_MISC_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_ERROR_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_DRIVER_STATUS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_MINIMUM_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_TIME_BASE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_ALL_DATA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_ALL_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_ALL_DATA_CALLBACK_CONFIGURATON">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_GPIO_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_GPIO_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_GPIO_ACTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_GPIO_ACTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_GPIO_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STEP_RESOLUTION_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CHOPPER_MODE_SPREAD_CYCLE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CHOPPER_MODE_FAST_DECAY">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FREEWHEEL_MODE_NORMAL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FREEWHEEL_MODE_FREEWHEELING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FREEWHEEL_MODE_COIL_SHORT_LS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.FREEWHEEL_MODE_COIL_SHORT_HS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_UP_STEP_INCREMENT_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_UP_STEP_INCREMENT_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_UP_STEP_INCREMENT_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_UP_STEP_INCREMENT_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_DOWN_STEP_DECREMENT_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_DOWN_STEP_DECREMENT_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_DOWN_STEP_DECREMENT_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.CURRENT_DOWN_STEP_DECREMENT_32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.MINIMUM_CURRENT_HALF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.MINIMUM_CURRENT_QUARTER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STALLGUARD_MODE_STANDARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STALLGUARD_MODE_FILTERED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OPEN_LOAD_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OPEN_LOAD_PHASE_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OPEN_LOAD_PHASE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OPEN_LOAD_PHASE_AB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.SHORT_TO_GROUND_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.SHORT_TO_GROUND_PHASE_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.SHORT_TO_GROUND_PHASE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.SHORT_TO_GROUND_PHASE_AB">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OVER_TEMPERATURE_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OVER_TEMPERATURE_WARNING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.OVER_TEMPERATURE_LIMIT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_STOP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_ACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_RUN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_DEACCELERATION">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_DIRECTION_CHANGE_TO_FORWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATE_DIRECTION_CHANGE_TO_BACKWARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_NONE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_NORMAL_STOP_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_NORMAL_STOP_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_FULL_BRAKE_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_FULL_BRAKE_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_CALLBACK_RISING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.GPIO_ACTION_CALLBACK_FALLING_EDGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.ERROR_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.ERROR_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.ERROR_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.ERROR_LED_CONFIG_SHOW_ERROR">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSilentStepperV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSilentStepperV2.UnderVoltageCallback">
             <summary>
              This callback is triggered when the input voltage drops below the value set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMinimumVoltage(System.Int32)" />. The parameter is the current voltage.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2.UnderVoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSilentStepperV2.PositionReachedCallback">
             <summary>
              This callback is triggered when a position set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" /> or
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" /> is reached.
              
              <note>
               Since we can't get any feedback from the stepper motor, this only works if the
               acceleration (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" />) is set smaller or equal to the
               maximum acceleration of the motor. Otherwise the motor will lag behind the
               control value and the callback will be triggered too early.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2.PositionReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSilentStepperV2.AllDataCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetAllCallbackConfiguration(System.Int64)" />. The parameters are: the current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2.AllDataEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSilentStepperV2.NewStateCallback">
             <summary>
              This callback is triggered whenever the Silent Stepper Bricklet 2.0 enters a new state.
              It returns the new state as well as the previous state.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2.NewStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSilentStepperV2.GPIOStateCallback">
             <summary>
              This callback is triggered by GPIO changes if it is activated through <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOAction(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSilentStepperV2.GPIOStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)">
             <summary>
              Sets the maximum velocity of the stepper motor.
              This function does *not* start the motor, it merely sets the maximum
              velocity the stepper motor is accelerated to. To get the motor running use
              either <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveBackward" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetMaxVelocity">
             <summary>
              Returns the velocity as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetCurrentVelocity">
             <summary>
              Returns the *current* velocity of the stepper motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)">
             <summary>
              Sets the acceleration and deacceleration of the stepper motor.
              An acceleration of 1000 means, that
              every second the velocity is increased by 1000 *steps/s*.
              
              For example: If the current velocity is 0 and you want to accelerate to a
              velocity of 8000 *steps/s* in 10 seconds, you should set an acceleration
              of 800 *steps/s²*.
              
              An acceleration/deacceleration of 0 means instantaneous
              acceleration/deacceleration (not recommended)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetSpeedRamping(System.Int32@,System.Int32@)">
             <summary>
              Returns the acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.FullBrake">
             <summary>
              Executes an active full brake.
              
              <note type="caution">
               This function is for emergency purposes,
               where an immediate brake is necessary. Depending on the current velocity and
               the strength of the motor, a full brake can be quite violent.
              </note>
              
              Call <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> if you just want to stop the motor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetCurrentPosition(System.Int32)">
             <summary>
              Sets the current steps of the internal step counter. This can be used to
              set the current position to 0 when some kind of starting position
              is reached (e.g. when a CNC machine reaches a corner).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetCurrentPosition">
             <summary>
              Returns the current position of the stepper motor in steps. On startup
              the position is 0. The steps are counted with all possible driving
              functions (<see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" />, <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" />, <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveBackward" />). It also is possible to reset the steps to 0 or
              set them to any other desired value with <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetCurrentPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)">
             <summary>
              Sets the target position of the stepper motor in steps. For example,
              if the current position of the motor is 500 and <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" /> is
              called with 1000, the stepper motor will drive 500 steps forward. It will
              use the velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" />.
              
              A call of <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" /> with the parameter *x* is equivalent to
              a call of <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" /> with the parameter
              (*x* - <see cref="M:Tinkerforge.BrickletSilentStepperV2.GetCurrentPosition" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetTargetPosition">
             <summary>
              Returns the last target position as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTargetPosition(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)">
             <summary>
              Sets the number of steps the stepper motor should run. Positive values
              will drive the motor forward and negative values backward.
              The velocity, acceleration and deacceleration as set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetSteps">
             <summary>
              Returns the last steps as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetRemainingSteps">
             <summary>
              Returns the remaining steps of the last call of <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" />.
              For example, if <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSteps(System.Int32)" /> is called with 2000 and
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.GetRemainingSteps" /> is called after the motor has run for 500 steps,
              it will return 1500.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetStepConfiguration(System.Byte,System.Boolean)">
             <summary>
              Sets the step resolution from full-step up to 1/256-step.
              
              If interpolation is turned on, the Silent Stepper Bricklet 2.0 will always interpolate
              your step inputs as 1/256-step. If you use full-step mode with interpolation, each
              step will generate 256 1/256 steps.
              
              For maximum torque use full-step without interpolation. For maximum resolution use
              1/256-step. Turn interpolation on to make the Stepper driving less noisy.
              
              If you often change the speed with high acceleration you should turn the
              interpolation off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetStepConfiguration(System.Byte@,System.Boolean@)">
             <summary>
              Returns the step mode as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetStepConfiguration(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.DriveForward">
             <summary>
              Drives the stepper motor forward until <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveBackward" /> or
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> is called. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.DriveBackward">
             <summary>
              Drives the stepper motor backward until <see cref="M:Tinkerforge.BrickletSilentStepperV2.DriveForward" /> or
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> is triggered. The velocity, acceleration and deacceleration as
              set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMaxVelocity(System.Int32)" /> and <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" /> will be used.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.Stop">
             <summary>
              Stops the stepper motor with the deacceleration as set by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetSpeedRamping(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetInputVoltage">
             <summary>
              Returns the external input voltage. The external input voltage is
              given via the black power input connector on the Silent Stepper Bricklet 2.0.
              
              If there is an external input voltage and a stack input voltage, the motor
              will be driven by the external input voltage. If there is only a stack
              voltage present, the motor will be driven by this voltage.
              
              <note type="caution">
               This means, if you have a high stack voltage and a low external voltage,
               the motor will be driven with the low external voltage. If you then remove
               the external connection, it will immediately be driven by the high
               stack voltage
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetMotorCurrent(System.Int32)">
             <summary>
              Sets the current with which the motor will be driven.
              
              <note type="caution">
               Do not set this value above the specifications of your stepper motor.
               Otherwise it may damage your motor.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetMotorCurrent">
             <summary>
              Returns the current as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMotorCurrent(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetEnabled(System.Boolean)">
             <summary>
              Enables/Disables the driver chip. The driver parameters can be configured (maximum velocity,
              acceleration, etc) before it is enabled.
              
              <note type="caution">
               Disabling the driver chip while the motor is still turning can damage the
               driver chip. The motor should be stopped calling <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> function
               before disabling the motor power. The <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> function will **not**
               wait until the motor is actually stopped. You have to explicitly wait for the
               appropriate time after calling the <see cref="M:Tinkerforge.BrickletSilentStepperV2.Stop" /> function before calling
               the <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetEnabled(System.Boolean)" /> with false function.
              </note>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetEnabled">
             <summary>
              Returns *true* if the stepper driver is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
              Sets the basic configuration parameters for the different modes (Stealth, Coolstep, Classic).
              
              * Standstill Current: This value can be used to lower the current during stand still. This might
                be reasonable to reduce the heating of the motor and the Bricklet 2.0. When the motor is in standstill
                the configured motor phase current will be driven until the configured
                Power Down Time is elapsed. After that the phase current will be reduced to the standstill
                current. The elapsed time for this reduction can be configured with the Standstill Delay Time.
                The maximum allowed value is the configured maximum motor current
                (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMotorCurrent(System.Int32)" />).
              
              * Motor Run Current: The value sets the motor current when the motor is running.
                Use a value of at least one half of the global maximum motor current for a good
                microstep performance. The maximum allowed value is the current
                motor current. The API maps the entered value to 1/32 ... 32/32 of the maximum
                motor current. This value should be used to change the motor current during motor movement,
                whereas the global maximum motor current should not be changed while the motor is moving
                (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMotorCurrent(System.Int32)" />).
              
              * Standstill Delay Time: Controls the duration for motor power down after a motion
                as soon as standstill is detected and the Power Down Time is expired. A high Standstill Delay
                Time results in a smooth transition that avoids motor jerk during power down.
              
              * Power Down Time: Sets the delay time after a stand still.
              
              * Stealth Threshold: Sets the upper threshold for Stealth mode.
                If the velocity of the motor goes above this value, Stealth mode is turned
                off. Otherwise it is turned on. In Stealth mode the torque declines with high speed.
              
              * Coolstep Threshold: Sets the lower threshold for Coolstep mode.
                The Coolstep Threshold needs to be above the Stealth Threshold.
              
              * Classic Threshold: Sets the lower threshold for classic mode.
                In classic mode the stepper becomes more noisy, but the torque is maximized.
              
              * High Velocity Chopper Mode: If High Velocity Chopper Mode is enabled, the stepper control
                is optimized to run the stepper motors at high velocities.
              
              If you want to use all three thresholds make sure that
              Stealth Threshold &lt; Coolstep Threshold &lt; Classic Threshold.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetBasicConfiguration(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetSpreadcycleConfiguration(System.Byte,System.Boolean,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte,System.Boolean)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the Spreadcycle configuration parameters. Spreadcycle is a chopper algorithm which actively
              controls the motor current flow. More information can be found in the TMC2130 datasheet on page
              47 (7 spreadCycle and Classic Chopper).
              
              * Slow Decay Duration: Controls duration of off time setting of slow decay phase.
                0 = driver disabled, all bridges off. Use 1 only with Comparator Blank time &gt;= 2.
              
              * Enable Random Slow Decay: Set to false to fix chopper off time as set by Slow Decay Duration.
                If you set it to true, Decay Duration is randomly modulated.
              
              * Fast Decay Duration: Sets the fast decay duration. This parameters is
                only used if the Chopper Mode is set to Fast Decay.
              
              * Hysteresis Start Value: Sets the hysteresis start value. This parameter is
                only used if the Chopper Mode is set to Spread Cycle.
              
              * Hysteresis End Value: Sets the hysteresis end value. This parameter is
                only used if the Chopper Mode is set to Spread Cycle.
              
              * Sine Wave Offset: Sets the sine wave offset. This parameters is
                only used if the Chopper Mode is set to Fast Decay. 1/512 of the value becomes added to the absolute
                value of the sine wave.
              
              * Chopper Mode: 0 = Spread Cycle, 1 = Fast Decay.
              
              * Comparator Blank Time: Sets the blank time of the comparator. Available values are
              
                * 0 = 16 clocks,
                * 1 = 24 clocks,
                * 2 = 36 clocks and
                * 3 = 54 clocks.
              
                A value of 1 or 2 is recommended for most applications.
              
              * Fast Decay Without Comparator: If set to true the current comparator usage for termination of the
                fast decay cycle is disabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetSpreadcycleConfiguration(System.Byte@,System.Boolean@,System.Byte@,System.Byte@,System.Int16@,System.Int16@,System.Byte@,System.Byte@,System.Boolean@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the configuration relevant for Stealth mode.
              
              * Enable Stealth: If set to true the stealth mode is enabled, if set to false the
                stealth mode is disabled, even if the speed is below the threshold set in <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
              
              * Amplitude: If autoscale is disabled, the PWM amplitude is scaled by this value. If autoscale is enabled,
                this value defines the maximum PWM amplitude change per half wave.
              
              * Gradient: If autoscale is disabled, the PWM gradient is scaled by this value. If autoscale is enabled,
                this value defines the maximum PWM gradient. With autoscale a value above 64 is recommended,
                otherwise the regulation might not be able to measure the current.
              
              * Enable Autoscale: If set to true, automatic current control is used. Otherwise the user defined
                amplitude and gradient are used.
              
              * Force Symmetric: If true, A symmetric PWM cycle is enforced. Otherwise the PWM value may change within each
                PWM cycle.
              
              * Freewheel Mode: The freewheel mode defines the behavior in stand still if the Standstill Current
                (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />) is set to 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetStealthConfiguration(System.Boolean@,System.Byte@,System.Byte@,System.Boolean@,System.Boolean@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetCoolstepConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Int16,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets the configuration relevant for Coolstep.
              
              * Minimum Stallguard Value: If the Stallguard result falls below this value*32, the motor current
                is increased to reduce motor load angle. A value of 0 turns Coolstep off.
              
              * Maximum Stallguard Value: If the Stallguard result goes above
                (Min Stallguard Value + Max Stallguard Value + 1) * 32, the motor current is decreased to save
                energy.
              
              * Current Up Step Width: Sets the up step increment per Stallguard value. The value range is 0-3,
                corresponding to the increments 1, 2, 4 and 8.
              
              * Current Down Step Width: Sets the down step decrement per Stallguard value. The value range is 0-3,
                corresponding to the decrements 1, 2, 8 and 16.
              
              * Minimum Current: Sets the minimum current for Coolstep current control. You can choose between
                half and quarter of the run current.
              
              * Stallguard Threshold Value: Sets the level for stall output (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)" />).
                A lower value gives a higher sensitivity. You have to find a suitable value for your
                motor by trial and error, 0 works for most motors.
              
              * Stallguard Mode: Set to 0 for standard resolution or 1 for filtered mode. In filtered mode the Stallguard
                signal will be updated every four full-steps.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetCoolstepConfiguration(System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Int16@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetCoolstepConfiguration(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Int16,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetMiscConfiguration(System.Boolean,System.Byte)">
             <summary>
              Note: If you don't know what any of this means you can very likely keep all of
              the values as default!
              
              Sets miscellaneous configuration parameters.
              
              * Disable Short To Ground Protection: Set to false to enable short to ground protection, otherwise
                it is disabled.
              
              * Synchronize Phase Frequency: With this parameter you can synchronize the chopper for both phases
                of a two phase motor to avoid the occurrence of a beat. The value range is 0-15. If set to 0,
                the synchronization is turned off. Otherwise the synchronization is done through the formula
                f_sync = f_clk/(value*64). In Classic Mode the synchronization is automatically switched off.
                f_clk is 12.8MHz.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetMiscConfiguration(System.Boolean@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMiscConfiguration(System.Boolean,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetErrorLEDConfig(System.Byte)">
             <summary>
              Configures the error LED to be either turned off, turned on, blink in
              heartbeat mode or show an error.
              
              If the LED is configured to show errors it has three different states:
              
              * Off: No error present.
              * 250ms interval blink: Overtemperature warning.
              * 1s interval blink: Input voltage too small.
              * full red: motor disabled because of short to ground in phase a or b or because of overtemperature.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetErrorLEDConfig">
             <summary>
              Returns the LED configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetErrorLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)">
             <summary>
              Returns the current driver status.
              
              * Open Load: Indicates if an open load is present on phase A, B or both. This could mean that there is a problem
                with the wiring of the motor. False detection can occur in fast motion as well as during stand still.
              
              * Short To Ground: Indicates if a short to ground is present on phase A, B or both. If this is detected the driver
                automatically becomes disabled and stays disabled until it is enabled again manually.
              
              * Over Temperature: The over temperature indicator switches to "Warning" if the driver IC warms up. The warning flag
                is expected during long duration stepper uses. If the temperature limit is reached the indicator switches
                to "Limit". In this case the driver becomes disabled until it cools down again.
              
              * Motor Stalled: Is true if a motor stall was detected.
              
              * Actual Motor Current: Indicates the actual current control scaling as used in Coolstep mode.
                It represents a multiplier of 1/32 to 32/32 of the
                ``Motor Run Current`` as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />. Example: If a ``Motor Run Current``
                of 1000mA was set and the returned value is 15, the ``Actual Motor Current`` is 16/32*1000mA = 500mA.
              
              * Stallguard Result: Indicates the load of the motor. A lower value signals a higher load. Per trial and error
                you can find out which value corresponds to a suitable torque for the velocity used in your application.
                After that you can use this threshold value to find out if a motor stall becomes probable and react on it (e.g.
                decrease velocity).
                During stand still this value can not be used for stall detection, it shows the chopper on-time for motor coil A.
              
              * Stealth Voltage Amplitude: Shows the actual PWM scaling. In Stealth mode it can be used to detect motor load and
                stall if autoscale is enabled (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetStealthConfiguration(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)" />).
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetMinimumVoltage(System.Int32)">
             <summary>
              Sets the minimum voltage, below which the <see cref="E:Tinkerforge.BrickletSilentStepperV2.UnderVoltageCallback" /> callback
              is triggered. The minimum possible value that works with the Silent Stepper
              Bricklet 2.0 is 8V.
              You can use this function to detect the discharge of a battery that is used
              to drive the stepper motor. If you have a fixed power supply, you likely do
              not need this functionality.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetMinimumVoltage">
             <summary>
              Returns the minimum voltage as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetMinimumVoltage(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetTimeBase(System.Int64)">
             <summary>
              Sets the time base of the velocity and the acceleration of the Silent Stepper
              Bricklet 2.0.
              
              For example, if you want to make one step every 1.5 seconds, you can set
              the time base to 15 and the velocity to 10. Now the velocity is
              10steps/15s = 1steps/1.5s.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetTimeBase">
             <summary>
              Returns the time base as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetTimeBase(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetAllData(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the following parameters: The current velocity,
              the current position, the remaining steps, the stack voltage, the external
              voltage and the current consumption of the stepper motor.
              
              The current consumption is calculated by multiplying the ``Actual Motor Current``
              value (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBasicConfiguration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />) with the ``Motor Run Current``
              (see <see cref="M:Tinkerforge.BrickletSilentStepperV2.GetDriverStatus(System.Byte@,System.Byte@,System.Byte@,System.Boolean@,System.Byte@,System.Boolean@,System.Byte@,System.Byte@)" />). This is an internal calculation of the
              driver, not an independent external measurement.
              
              The current consumption calculation was broken up to firmware 2.0.1, it is fixed
              since firmware 2.0.2.
              
              There is also a callback for this function, see <see cref="E:Tinkerforge.BrickletSilentStepperV2.AllDataCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetAllCallbackConfiguration(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletSilentStepperV2.AllDataCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetAllDataCallbackConfiguraton">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetAllCallbackConfiguration(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)">
             <summary>
              Sets the GPIO configuration for the given channel.
              You can configure a debounce and the deceleration that is used if the action is
              configured as ``normal stop``. See <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOAction(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetGPIOConfiguration(System.Byte,System.Int32@,System.Int32@)">
             <summary>
              Returns the GPIO configuration for a channel as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOAction(System.Byte,System.Int64)">
             <summary>
              Sets the GPIO action for the given channel.
              
              The action can be a normal stop, a full brake or a callback. Each for a rising
              edge or falling edge. The actions are a bitmask they can be used at the same time.
              You can for example trigger a full brake and a callback at the same time or for
              rising and falling edge.
              
              The deceleration speed for the normal stop can be configured with
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOConfiguration(System.Byte,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetGPIOAction(System.Byte)">
             <summary>
              Returns the GPIO action for a channel as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetGPIOAction(System.Byte,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetGPIOState">
             <summary>
              Returns the GPIO state for both channels. True if the state is ``high`` and
              false if the state is ``low``.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletSilentStepperV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSilentStepperV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.OnUnderVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.OnPositionReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.OnAllDataCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.OnNewStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSilentStepperV2.OnGPIOStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSolidStateRelay">
             <summary>
              Controls AC and DC Solid State Relays
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.FUNCTION_SET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.FUNCTION_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelay.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSolidStateRelay.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever the monoflop timer reaches 0.
              The parameter is the current state of the relay
              (the state after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSolidStateRelay.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSolidStateRelay.MonoflopDone">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.SetState(System.Boolean)">
             <summary>
              Sets the state of the relays *true* means on and *false* means off.
              
              A running monoflop timer will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.GetState">
             <summary>
              Returns the state of the relay, *true* means on and *false* means off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.SetMonoflop(System.Boolean,System.Int64)">
             <summary>
              The first parameter  is the desired state of the relay (*true* means on
              and *false* means off). The second parameter indicates the time that
              the relay should hold the state.
              
              If this function is called with the parameters (true, 1500):
              The relay will turn on and in 1.5s it will turn off again.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a Solid State Relay Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds. The relay will be on all the time. If now the RS485
              connection is lost, the relay will turn off in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.GetMonoflop(System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns the current state and the time as set by
              <see cref="M:Tinkerforge.BrickletSolidStateRelay.SetMonoflop(System.Boolean,System.Int64)" /> as well as the remaining time until the state flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelay.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSolidStateRelayV2">
             <summary>
              Controls AC and DC Solid State Relays
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_SET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_SET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_MONOFLOP">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSolidStateRelayV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSolidStateRelayV2.MonoflopDoneCallback">
             <summary>
              This callback is triggered whenever the monoflop timer reaches 0.
              The parameter is the current state of the relay
              (the state after the monoflop).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSolidStateRelayV2.MonoflopDoneEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.SetState(System.Boolean)">
             <summary>
              Sets the state of the relays *true* means on and *false* means off.
              
              A running monoflop timer will be aborted if this function is called.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetState">
             <summary>
              Returns the state of the relay, *true* means on and *false* means off.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.SetMonoflop(System.Boolean,System.Int64)">
             <summary>
              The first parameter  is the desired state of the relay (*true* means on
              and *false* means off). The second parameter indicates the time that
              the relay should hold the state.
              
              If this function is called with the parameters (true, 1500):
              The relay will turn on and in 1.5s it will turn off again.
              
              A monoflop can be used as a failsafe mechanism. For example: Lets assume you
              have a RS485 bus and a Solid State Relay Bricklet connected to one of the slave
              stacks. You can now call this function every second, with a time parameter
              of two seconds. The relay will be on all the time. If now the RS485
              connection is lost, the relay will turn off in at most two seconds.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetMonoflop(System.Boolean@,System.Int64@,System.Int64@)">
             <summary>
              Returns the current state and the time as set by
              <see cref="M:Tinkerforge.BrickletSolidStateRelayV2.SetMonoflop(System.Boolean,System.Int64)" /> as well as the remaining time until the state flips.
              
              If the timer is not running currently, the remaining time will be returned
              as 0.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletSolidStateRelayV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletSolidStateRelayV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletSolidStateRelayV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSolidStateRelayV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSolidStateRelayV2.OnMonoflopDoneCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundIntensity">
             <summary>
              Measures sound intensity
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_GET_INTENSITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_SET_INTENSITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_GET_INTENSITY_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_SET_INTENSITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_GET_INTENSITY_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundIntensity.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundIntensity.IntensityCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackPeriod(System.Int64)" />. The parameter is the intensity
              of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityCallback" /> callback is only triggered if the intensity has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundIntensity.IntensityEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundIntensity.Intensity">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundIntensity.IntensityReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the intensity of the encoder.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletSoundIntensity.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundIntensity.IntensityReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundIntensity.IntensityReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.GetIntensity">
             <summary>
              Returns the current sound intensity.
              
              The value corresponds to the
              `upper envelop &lt;https://en.wikipedia.org/wiki/Envelope_(waves)&gt;`__
              of the signal of the microphone capsule.
              
              If you want to get the intensity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityCallback" /> callback is only triggered if the intensity has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.GetIntensityCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the intensity is *outside* the min and max values"
               "'i'",    "Callback is triggered when the intensity is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the intensity is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the intensity is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.GetIntensityCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletSoundIntensity.IntensityReachedCallback" />
              
              is triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletSoundIntensity.SetIntensityCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletSoundIntensity.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.OnIntensityCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundIntensity.OnIntensityReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundPressureLevel">
             <summary>
              Measures Sound Pressure Level in dB(A/B/C/D/Z)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_DECIBEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_DECIBEL_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_DECIBEL_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_SPECTRUM_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_SPECTRUM_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_SPECTRUM_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FFT_SIZE_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FFT_SIZE_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FFT_SIZE_512">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.FFT_SIZE_1024">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_A">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_C">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_D">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_Z">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.WEIGHTING_ITU_R_468">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletSoundPressureLevel.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundPressureLevel.DecibelCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetDecibelCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletSoundPressureLevel.GetDecibel" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundPressureLevel.DecibelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundPressureLevel.SpectrumLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletSoundPressureLevel.SpectrumCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundPressureLevel.SpectrumLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletSoundPressureLevel.SpectrumCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetSpectrumCallbackConfiguration(System.Int64)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletSoundPressureLevel.GetSpectrum" />.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for spectrum.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletSoundPressureLevel.SpectrumEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetDecibel">
             <summary>
              Returns the measured sound pressure in decibels.
              
              The Bricklet supports the weighting standards dB(A), dB(B), dB(C), dB(D),
              dB(Z) and ITU-R 468. You can configure the weighting with <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" />.
              
              By default dB(A) will be used.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletSoundPressureLevel.DecibelCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetDecibelCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetDecibelCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletSoundPressureLevel.DecibelCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletSoundPressureLevel.DecibelCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetDecibelCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetDecibelCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetSpectrumLowLevel(System.Int32@,System.Int32@,System.Int32[]@)">
             <summary>
              Returns the frequency spectrum. The length of the spectrum is between
              512 (FFT size 1024) and 64 (FFT size 128). See <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" />.
              
              Each array element is one bin of the FFT. The first bin is always the
              DC offset and the other bins have a size between 40Hz (FFT size 1024) and
              320Hz (FFT size 128).
              
              In sum the frequency of the spectrum always has a range from 0 to
              20480Hz (the FFT is applied to samples with a frequency of 40960Hz).
              
              The returned data is already equalized, which means that the microphone
              frequency response is compensated and the weighting function is applied
              (see <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" /> for the available weighting standards). Use
              dB(Z) if you need the unaltered spectrum.
              
              The values are not in dB form yet. If you want a proper dB scale of the
              spectrum you have to apply the formula f(x) = 20*log10(max(1, x/sqrt(2)))
              on each value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetSpectrumCallbackConfiguration(System.Int64)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletSoundPressureLevel.SpectrumCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
              
              Every new measured spectrum will be send at most once. Set the period to 1 to
              make sure that you get every spectrum.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetSpectrumCallbackConfiguration">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletSoundPressureLevel.GetSpectrumCallbackConfiguration" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)">
             <summary>
              Sets the Sound Pressure Level Bricklet configuration.
              
              With different FFT sizes the Bricklet has a different
              amount of samples per second and the size of the FFT bins
              changes. The higher the FFT size the more precise is the result
              of the dB(X) calculation.
              
              Available FFT sizes are:
              
              * 1024: 512 bins, 10 samples per second, each bin has size 40Hz
              * 512: 256 bins, 20 samples per second, each bin has size 80Hz
              * 256: 128 bins, 40 samples per second, each bin has size 160Hz
              * 128: 64 bins, 80 samples per second, each bin has size 320Hz
              
              The Bricklet supports different weighting functions. You can choose
              between dB(A), dB(B), dB(C), dB(D), dB(Z) and ITU-R 468.
              
              dB(A/B/C/D) are the standard dB weighting curves. dB(A) is
              often used to measure volumes at concerts etc. dB(Z) has a
              flat response, no weighting is applied. ITU-R 468 is an ITU
              weighting standard mostly used in the UK and Europe.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetConfiguration(System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletSoundPressureLevel.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.GetSpectrum">
             <summary>
              Returns the frequency spectrum. The length of the spectrum is between
              512 (FFT size 1024) and 64 (FFT size 128). See <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" />.
              
              Each array element is one bin of the FFT. The first bin is always the
              DC offset and the other bins have a size between 40Hz (FFT size 1024) and
              320Hz (FFT size 128).
              
              In sum the frequency of the spectrum always has a range from 0 to
              20480Hz (the FFT is applied to samples with a frequency of 40960Hz).
              
              The returned data is already equalized, which means that the microphone
              frequency response is compensated and the weighting function is applied
              (see <see cref="M:Tinkerforge.BrickletSoundPressureLevel.SetConfiguration(System.Byte,System.Byte)" /> for the available weighting standards). Use
              dB(Z) if you need the unaltered spectrum.
              
              The values are not in dB form yet. If you want a proper dB scale of the
              spectrum you have to apply the formula f(x) = 20*log10(max(1, x/sqrt(2)))
              on each value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.OnDecibelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletSoundPressureLevel.OnSpectrumLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperature">
             <summary>
              Measures ambient temperature with 0.5°C accuracy
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_SET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_SET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_SET_I2C_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_I2C_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.I2C_MODE_FAST">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperature.I2C_MODE_SLOW">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperature.TemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              temperature of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletTemperature.TemperatureCallback" /> callback is only triggered if the temperature has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperature.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperature.Temperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperature.TemperatureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the temperature of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletTemperature.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperature.TemperatureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperature.TemperatureReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetTemperature">
             <summary>
              Returns the temperature of the sensor.
              
              If you want to get the temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletTemperature.TemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletTemperature.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletTemperature.TemperatureCallback" /> callback is only triggered if the temperature has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletTemperature.TemperatureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetTemperatureCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletTemperature.TemperatureReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletTemperature.SetTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletTemperature.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.SetI2CMode(System.Byte)">
             <summary>
              Sets the I2C mode. Possible modes are:
              
              * 0: Fast (400kHz)
              * 1: Slow (100kHz)
              
              If you have problems with obvious outliers in the
              Temperature Bricklet measurements, they may be caused by EMI issues.
              In this case it may be helpful to lower the I2C speed.
              
              It is however not recommended to lower the I2C speed in applications where
              a high throughput needs to be achieved.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetI2CMode">
             <summary>
              Returns the I2C mode as set by <see cref="M:Tinkerforge.BrickletTemperature.SetI2CMode(System.Byte)" />.
              
              .. versionadded:: 2.0.1$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperature.OnTemperatureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIR">
             <summary>
              Measures contactless object temperature between -70°C and +380°C
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_AMBIENT_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_OBJECT_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_EMISSIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_EMISSIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_AMBIENT_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_AMBIENT_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_OBJECT_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_OBJECT_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_AMBIENT_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_AMBIENT_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_OBJECT_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_OBJECT_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIR.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              ambient temperature of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureCallback" /> callback is only triggered if the ambient
              temperature has changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              object temperature of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureCallback" /> callback is only triggered if the object
              temperature has changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the ambient temperature of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" /> is reached.
              The parameter is the object temperature of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetAmbientTemperature">
             <summary>
              Returns the ambient temperature of the sensor.
              
              If you want to get the ambient temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetObjectTemperature">
             <summary>
              Returns the object temperature of the sensor, i.e. the temperature
              of the surface of the object the sensor is aimed at.
              
              The temperature of different materials is dependent on their `emissivity
              &lt;https://en.wikipedia.org/wiki/Emissivity&gt;`__. The emissivity of the material
              can be set with <see cref="M:Tinkerforge.BrickletTemperatureIR.SetEmissivity(System.Int32)" />.
              
              If you want to get the object temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetEmissivity(System.Int32)">
             <summary>
              Sets the `emissivity &lt;https://en.wikipedia.org/wiki/Emissivity&gt;`__ that is
              used to calculate the surface temperature as returned by
              <see cref="M:Tinkerforge.BrickletTemperatureIR.GetObjectTemperature" />.
              
              The emissivity is usually given as a value between 0.0 and 1.0. A list of
              emissivities of different materials can be found
              `here &lt;https://www.infrared-thermography.com/material.htm&gt;`__.
              
              The parameter of <see cref="M:Tinkerforge.BrickletTemperatureIR.SetEmissivity(System.Int32)" /> has to be given with a factor of
              65535 (16-bit). For example: An emissivity of 0.1 can be set with the
              value 6553, an emissivity of 0.5 with the value 32767 and so on.
              
              <note>
               If you need a precise measurement for the object temperature, it is
               absolutely crucial that you also provide a precise emissivity.
              </note>
              
              The emissivity is stored in non-volatile memory and will still be used after a restart or power cycle of the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetEmissivity">
             <summary>
              Returns the emissivity as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetEmissivity(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureCallback" /> callback is only triggered if the temperature has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetAmbientTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureCallback" /> callback is
              triggered periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureCallback" /> callback is only triggered if the temperature
              has changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetObjectTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the ambient temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the ambient temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the ambient temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the ambient temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetAmbientTemperatureCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the object temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the object temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the object temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the object temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetObjectTemperatureCallbackThreshold(System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletTemperatureIR.AmbientTemperatureReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletTemperatureIR.ObjectTemperatureReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletTemperatureIR.SetAmbientTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />,
              * <see cref="M:Tinkerforge.BrickletTemperatureIR.SetObjectTemperatureCallbackThreshold(System.Char,System.Int16,System.Int16)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletTemperatureIR.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.OnAmbientTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.OnObjectTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.OnAmbientTemperatureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIR.OnObjectTemperatureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIRV2">
             <summary>
              Measures contactless object temperature between -70°C and +380°C
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_AMBIENT_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_AMBIENT_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_AMBIENT_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_OBJECT_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_OBJECT_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_OBJECT_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_EMISSIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_EMISSIVITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureIRV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIRV2.AmbientTemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetAmbientTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletTemperatureIRV2.GetAmbientTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIRV2.AmbientTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureIRV2.ObjectTemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetObjectTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletTemperatureIRV2.GetObjectTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureIRV2.ObjectTemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetAmbientTemperature">
             <summary>
              Returns the ambient temperature of the sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletTemperatureIRV2.AmbientTemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetAmbientTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetAmbientTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletTemperatureIRV2.AmbientTemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletTemperatureIRV2.AmbientTemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetAmbientTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetAmbientTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetObjectTemperature">
             <summary>
              Returns the object temperature of the sensor, i.e. the temperature
              of the surface of the object the sensor is aimed at.
              
              The temperature of different materials is dependent on their `emissivity
              &lt;https://en.wikipedia.org/wiki/Emissivity&gt;`__. The emissivity of the material
              can be set with <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetEmissivity(System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletTemperatureIRV2.ObjectTemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetObjectTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetObjectTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletTemperatureIRV2.ObjectTemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletTemperatureIRV2.ObjectTemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetObjectTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetObjectTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetEmissivity(System.Int32)">
             <summary>
              Sets the `emissivity &lt;https://en.wikipedia.org/wiki/Emissivity&gt;`__ that is
              used to calculate the surface temperature as returned by
              <see cref="M:Tinkerforge.BrickletTemperatureIRV2.GetObjectTemperature" />.
              
              The emissivity is usually given as a value between 0.0 and 1.0. A list of
              emissivities of different materials can be found
              `here &lt;https://www.infrared-thermography.com/material.htm&gt;`__.
              
              The parameter of <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetEmissivity(System.Int32)" /> has to be given with a factor of
              65535 (16-bit). For example: An emissivity of 0.1 can be set with the
              value 6553, an emissivity of 0.5 with the value 32767 and so on.
              
              <note>
               If you need a precise measurement for the object temperature, it is
               absolutely crucial that you also provide a precise emissivity.
              </note>
              
              The emissivity is stored in non-volatile memory and will still be
              used after a restart or power cycle of the Bricklet.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetEmissivity">
             <summary>
              Returns the emissivity as set by <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetEmissivity(System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletTemperatureIRV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureIRV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.OnAmbientTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureIRV2.OnObjectTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureV2">
             <summary>
              Measures ambient temperature with 0.2°C accuracy
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_SET_HEATER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_HEATER_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.HEATER_CONFIG_DISABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.HEATER_CONFIG_ENABLED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTemperatureV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTemperatureV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletTemperatureV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletTemperatureV2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTemperatureV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetTemperature">
             <summary>
              Returns the temperature measured by the sensor.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletTemperatureV2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletTemperatureV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletTemperatureV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletTemperatureV2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int16@,System.Int16@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int16,System.Int16)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.SetHeaterConfiguration(System.Byte)">
             <summary>
              Enables/disables the heater. The heater can be used to test the sensor.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetHeaterConfiguration">
             <summary>
              Returns the heater configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureV2.SetHeaterConfiguration(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletTemperatureV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletTemperatureV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletTemperatureV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletTemperatureV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTemperatureV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermalImaging">
             <summary>
              80x60 pixel thermal imaging camera
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_HIGH_CONTRAST_IMAGE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_TEMPERATURE_IMAGE_LOW_LEVEL">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_STATISTICS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_RESOLUTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_RESOLUTION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_SPOTMETER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_SPOTMETER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_HIGH_CONTRAST_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_HIGH_CONTRAST_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_IMAGE_TRANSFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_IMAGE_TRANSFER_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_FLUX_LINEAR_PARAMETERS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_FLUX_LINEAR_PARAMETERS">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.RESOLUTION_0_TO_6553_KELVIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.RESOLUTION_0_TO_655_KELVIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FFC_STATUS_NEVER_COMMANDED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FFC_STATUS_IMMINENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FFC_STATUS_IN_PROGRESS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.FFC_STATUS_COMPLETE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.IMAGE_TRANSFER_MANUAL_HIGH_CONTRAST_IMAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.IMAGE_TRANSFER_MANUAL_TEMPERATURE_IMAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.IMAGE_TRANSFER_CALLBACK_HIGH_CONTRAST_IMAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.IMAGE_TRANSFER_CALLBACK_TEMPERATURE_IMAGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermalImaging.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermalImaging.HighContrastImageLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletThermalImaging.HighContrastImageCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermalImaging.HighContrastImageLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermalImaging.TemperatureImageLowLevelCallback">
             <summary>
              <see cref="E:Tinkerforge.BrickletThermalImaging.TemperatureImageCallback" />
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermalImaging.TemperatureImageLowLevelEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermalImaging.HighContrastImageCallback">
             <summary>
              This callback is triggered with every new high contrast image if the transfer image
              config is configured for high contrast callback (see <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />).
              
              The data is organized as a 8-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 8-bit value represents one gray-scale image pixel that can directly be
              shown to a user on a display.
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for image.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermalImaging.HighContrastImageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermalImaging.TemperatureImageCallback">
             <summary>
              This callback is triggered with every new temperature image if the transfer image
              config is configured for temperature callback (see <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />).
              
              The data is organized as a 16-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 16-bit value represents one temperature measurement in either
              Kelvin/10 or Kelvin/100 (depending on the resolution set with <see cref="M:Tinkerforge.BrickletThermalImaging.SetResolution(System.Byte)" />).
              
              <note>
               If reconstructing the value fails, the callback is triggered with null for image.
              </note>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermalImaging.TemperatureImageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetHighContrastImageLowLevel(System.Int32@,System.Byte[]@)">
             <summary>
              Returns the current high contrast image. See `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Thermal_Imaging.html#high-contrast-image-vs-temperature-image&gt;`__
              for the difference between
              High Contrast and Temperature Image. If you don't know what to use
              the High Contrast Image is probably right for you.
              
              The data is organized as a 8-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 8-bit value represents one gray-scale image pixel that can directly be
              shown to a user on a display.
              
              Before you can use this function you have to enable it with
              <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetTemperatureImageLowLevel(System.Int32@,System.Int32[]@)">
             <summary>
              Returns the current temperature image. See `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Thermal_Imaging.html#high-contrast-image-vs-temperature-image&gt;`__
              for the difference between High Contrast and Temperature Image.
              If you don't know what to use the High Contrast Image is probably right for you.
              
              The data is organized as a 16-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 16-bit value represents one temperature measurement in either
              Kelvin/10 or Kelvin/100 (depending on the resolution set with <see cref="M:Tinkerforge.BrickletThermalImaging.SetResolution(System.Byte)" />).
              
              Before you can use this function you have to enable it with
              <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetStatistics(System.Int32[]@,System.Int32[]@,System.Byte@,System.Byte@,System.Boolean[]@)">
             <summary>
              Returns the spotmeter statistics, various temperatures, current resolution and status bits.
              
              The spotmeter statistics are:
              
              * Index 0: Mean Temperature.
              * Index 1: Maximum Temperature.
              * Index 2: Minimum Temperature.
              * Index 3: Pixel Count of spotmeter region of interest.
              
              The temperatures are:
              
              * Index 0: Focal Plain Array temperature.
              * Index 1: Focal Plain Array temperature at last FFC (Flat Field Correction).
              * Index 2: Housing temperature.
              * Index 3: Housing temperature at last FFC.
              
              The resolution is either `0 to 6553 Kelvin` or `0 to 655 Kelvin`. If the resolution is the former,
              the temperatures are in Kelvin/10, if it is the latter the temperatures are in Kelvin/100.
              
              FFC (Flat Field Correction) Status:
              
              * FFC Never Commanded: Only seen on startup before first FFC.
              * FFC Imminent: This state is entered 2 seconds prior to initiating FFC.
              * FFC In Progress: Flat field correction is started (shutter moves in front of lens and back). Takes about 1 second.
              * FFC Complete: Shutter is in waiting position again, FFC done.
              
              Temperature warning bits:
              
              * Index 0: Shutter lockout (if true shutter is locked out because temperature is outside -10°C to +65°C)
              * Index 1: Overtemperature shut down imminent (goes true 10 seconds before shutdown)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetResolution(System.Byte)">
             <summary>
              Sets the resolution. The Thermal Imaging Bricklet can either measure
              
              * from 0 to 6553 Kelvin (-273.15°C to +6279.85°C) with 0.1°C resolution or
              * from 0 to 655 Kelvin (-273.15°C to +381.85°C) with 0.01°C resolution.
              
              The accuracy is specified for -10°C to 450°C in the
              first range and -10°C and 140°C in the second range.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetResolution">
             <summary>
              Returns the resolution as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetResolution(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetSpotmeterConfig(System.Byte[])">
             <summary>
              Sets the spotmeter region of interest. The 4 values are
              
              * Index 0: Column start (has to be smaller then Column end).
              * Index 1: Row start (has to be smaller then Row end).
              * Index 2: Column end (has to be smaller then 80).
              * Index 3: Row end (has to be smaller then 60).
              
              The spotmeter statistics can be read out with <see cref="M:Tinkerforge.BrickletThermalImaging.GetStatistics(System.Int32[]@,System.Int32[]@,System.Byte@,System.Byte@,System.Boolean[]@)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetSpotmeterConfig">
             <summary>
              Returns the spotmeter config as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetSpotmeterConfig(System.Byte[])" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetHighContrastConfig(System.Byte[],System.Int32,System.Int32[],System.Int32)">
             <summary>
              Sets the high contrast region of interest, dampening factor, clip limit and empty counts.
              This config is only used in high contrast mode (see <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />).
              
              The high contrast region of interest consists of four values:
              
              * Index 0: Column start (has to be smaller or equal then Column end).
              * Index 1: Row start (has to be smaller then Row end).
              * Index 2: Column end (has to be smaller then 80).
              * Index 3: Row end (has to be smaller then 60).
              
              The algorithm to generate the high contrast image is applied to this region.
              
              Dampening Factor: This parameter is the amount of temporal dampening applied to the HEQ
              (history equalization) transformation function. An IIR filter of the form::
              
               (N / 256) * previous + ((256 - N) / 256) * current
              
              is applied, and the HEQ dampening factor
              represents the value N in the equation, i.e., a value that applies to the amount of
              influence the previous HEQ transformation function has on the current function. The
              lower the value of N the higher the influence of the current video frame whereas
              the higher the value of N the more influence the previous damped transfer function has.
              
              Clip Limit Index 0 (AGC HEQ Clip Limit High): This parameter defines the maximum number of pixels allowed
              to accumulate in any given histogram bin. Any additional pixels in a given bin are clipped.
              The effect of this parameter is to limit the influence of highly-populated bins on the
              resulting HEQ transformation function.
              
              Clip Limit Index 1 (AGC HEQ Clip Limit Low): This parameter defines an artificial population that is added to
              every non-empty histogram bin. In other words, if the Clip Limit Low is set to L, a bin
              with an actual population of X will have an effective population of L + X. Any empty bin
              that is nearby a populated bin will be given an artificial population of L. The effect of
              higher values is to provide a more linear transfer function; lower values provide a more
              non-linear (equalized) transfer function.
              
              Empty Counts: This parameter specifies the maximum number of pixels in a bin that will be
              interpreted as an empty bin. Histogram bins with this number of pixels or less will be
              processed as an empty bin.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetHighContrastConfig(System.Byte[]@,System.Int32@,System.Int32[]@,System.Int32@)">
             <summary>
              Returns the high contrast config as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetHighContrastConfig(System.Byte[],System.Int32,System.Int32[],System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)">
             <summary>
              The necessary bandwidth of this Bricklet is too high to use getter/callback or
              high contrast/temperature image at the same time. You have to configure the one
              you want to use, the Bricklet will optimize the internal configuration accordingly.
              
              Corresponding functions:
              
              * Manual High Contrast Image: <see cref="M:Tinkerforge.BrickletThermalImaging.GetHighContrastImage" />.
              * Manual Temperature Image: <see cref="M:Tinkerforge.BrickletThermalImaging.GetTemperatureImage" />.
              * Callback High Contrast Image: <see cref="E:Tinkerforge.BrickletThermalImaging.HighContrastImageCallback" /> callback.
              * Callback Temperature Image: <see cref="E:Tinkerforge.BrickletThermalImaging.TemperatureImageCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetImageTransferConfig">
             <summary>
              Returns the image transfer config, as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetFluxLinearParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              Sets the flux linear parameters that can be used for radiometry calibration.
              
              See FLIR document 102-PS245-100-01 for more details.
              
              .. versionadded:: 2.0.5$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetFluxLinearParameters(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the flux linear parameters, as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetFluxLinearParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />.
              
              .. versionadded:: 2.0.5$nbsp;(Plugin)
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletThermalImaging.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletThermalImaging.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletThermalImaging.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletThermalImaging.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetHighContrastImage">
             <summary>
              Returns the current high contrast image. See `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Thermal_Imaging.html#high-contrast-image-vs-temperature-image&gt;`__
              for the difference between
              High Contrast and Temperature Image. If you don't know what to use
              the High Contrast Image is probably right for you.
              
              The data is organized as a 8-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 8-bit value represents one gray-scale image pixel that can directly be
              shown to a user on a display.
              
              Before you can use this function you have to enable it with
              <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.GetTemperatureImage">
             <summary>
              Returns the current temperature image. See `here &lt;https://www.tinkerforge.com/en/doc/Hardware/Bricklets/Thermal_Imaging.html#high-contrast-image-vs-temperature-image&gt;`__
              for the difference between High Contrast and Temperature Image.
              If you don't know what to use the High Contrast Image is probably right for you.
              
              The data is organized as a 16-bit value 80x60 pixel matrix linearized in
              a one-dimensional array. The data is arranged line by line from top left to
              bottom right.
              
              Each 16-bit value represents one temperature measurement in either
              Kelvin/10 or Kelvin/100 (depending on the resolution set with <see cref="M:Tinkerforge.BrickletThermalImaging.SetResolution(System.Byte)" />).
              
              Before you can use this function you have to enable it with
              <see cref="M:Tinkerforge.BrickletThermalImaging.SetImageTransferConfig(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.OnHighContrastImageLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermalImaging.OnTemperatureImageLowLevelCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocouple">
             <summary>
              Measures temperature with thermocouples
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_SET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_TEMPERATURE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_SET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_TEMPERATURE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_ERROR_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.AVERAGING_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.AVERAGING_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.AVERAGING_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.AVERAGING_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.AVERAGING_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_E">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_J">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_K">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_N">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_R">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_S">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_T">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_G8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.TYPE_G32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FILTER_OPTION_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocouple.FILTER_OPTION_60HZ">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.TemperatureCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackPeriod(System.Int64)" />. The parameter is the
              temperature of the thermocouple.
              
              The <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureCallback" /> callback is only triggered if the temperature has
              changed since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocouple.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.Temperature">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.TemperatureReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the temperature of the thermocouple.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletThermocouple.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocouple.TemperatureReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.TemperatureReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.ErrorStateCallback">
             <summary>
              This Callback is triggered every time the error state changes
              (see <see cref="M:Tinkerforge.BrickletThermocouple.GetErrorState(System.Boolean@,System.Boolean@)" />).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocouple.ErrorStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocouple.ErrorState">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetTemperature">
             <summary>
              Returns the temperature of the thermocouple.
              
              If you want to get the temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureCallback" /> callback is only triggered if the temperature has changed
              since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetTemperatureCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the temperature is *outside* the min and max values"
               "'i'",    "Callback is triggered when the temperature is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the temperature is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the temperature is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetTemperatureCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callback
              
              * <see cref="E:Tinkerforge.BrickletThermocouple.TemperatureReachedCallback" />
              
              is triggered, if the threshold
              
              * <see cref="M:Tinkerforge.BrickletThermocouple.SetTemperatureCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keeps being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletThermocouple.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.SetConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              You can configure averaging size, thermocouple type and frequency
              filtering.
              
              Available averaging sizes are 1, 2, 4, 8 and 16 samples.
              
              As thermocouple type you can use B, E, J, K, N, R, S and T. If you have a
              different thermocouple or a custom thermocouple you can also use
              G8 and G32. With these types the returned value will not be in °C/100,
              it will be calculated by the following formulas:
              
              * G8: ``value = 8 * 1.6 * 2^17 * Vin``
              * G32: ``value = 32 * 1.6 * 2^17 * Vin``
              
              where Vin is the thermocouple input voltage.
              
              The frequency filter can be either configured to 50Hz or to 60Hz. You should
              configure it according to your utility frequency.
              
              The conversion time depends on the averaging and filter configuration, it can
              be calculated as follows:
              
              * 60Hz: ``time = 82 + (samples - 1) * 16.67``
              * 50Hz: ``time = 98 + (samples - 1) * 20``
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetConfiguration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletThermocouple.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetErrorState(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the current error state. There are two possible errors:
              
              * Over/Under Voltage and
              * Open Circuit.
              
              Over/Under Voltage happens for voltages below 0V or above 3.3V. In this case
              it is very likely that your thermocouple is defective. An Open Circuit error
              indicates that there is no thermocouple connected.
              
              You can use the <see cref="E:Tinkerforge.BrickletThermocouple.ErrorStateCallback" /> callback to automatically get triggered
              when the error state changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.OnTemperatureReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocouple.OnErrorStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocoupleV2">
             <summary>
              Measures temperature with thermocouples
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_SET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_TEMPERATURE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_ERROR_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.AVERAGING_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.AVERAGING_2">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.AVERAGING_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.AVERAGING_8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.AVERAGING_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_B">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_E">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_J">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_K">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_N">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_R">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_S">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_T">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_G8">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.TYPE_G32">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FILTER_OPTION_50HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.FILTER_OPTION_60HZ">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletThermocoupleV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocoupleV2.TemperatureCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletThermocoupleV2.GetTemperature" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocoupleV2.TemperatureEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletThermocoupleV2.ErrorStateCallback">
             <summary>
              This Callback is triggered every time the error state changes
              (see <see cref="M:Tinkerforge.BrickletThermocoupleV2.GetErrorState(System.Boolean@,System.Boolean@)" />).
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletThermocoupleV2.ErrorStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetTemperature">
             <summary>
              Returns the temperature of the thermocouple. The value is given in °C/100,
              e.g. a value of 4223 means that a temperature of 42.23 °C is measured.
              
              If you want to get the temperature periodically, it is recommended
              to use the <see cref="E:Tinkerforge.BrickletThermocoupleV2.TemperatureCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletThermocoupleV2.TemperatureCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletThermocoupleV2.TemperatureCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletThermocoupleV2.TemperatureCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetTemperatureCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetTemperatureCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.SetConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              You can configure averaging size, thermocouple type and frequency
              filtering.
              
              Available averaging sizes are 1, 2, 4, 8 and 16 samples.
              
              As thermocouple type you can use B, E, J, K, N, R, S and T. If you have a
              different thermocouple or a custom thermocouple you can also use
              G8 and G32. With these types the returned value will not be in °C/100,
              it will be calculated by the following formulas:
              
              * G8: ``value = 8 * 1.6 * 2^17 * Vin``
              * G32: ``value = 32 * 1.6 * 2^17 * Vin``
              
              where Vin is the thermocouple input voltage.
              
              The frequency filter can be either configured to 50Hz or to 60Hz. You should
              configure it according to your utility frequency.
              
              The conversion time depends on the averaging and filter configuration, it can
              be calculated as follows:
              
              * 60Hz: ``time = 82 + (samples - 1) * 16.67``
              * 50Hz: ``time = 98 + (samples - 1) * 20``
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetConfiguration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetErrorState(System.Boolean@,System.Boolean@)">
             <summary>
              Returns the current error state. There are two possible errors:
              
              * Over/Under Voltage and
              * Open Circuit.
              
              Over/Under Voltage happens for voltages below 0V or above 3.3V. In this case
              it is very likely that your thermocouple is defective. An Open Circuit error
              indicates that there is no thermocouple connected.
              
              You can use the <see cref="E:Tinkerforge.BrickletThermocoupleV2.ErrorStateCallback" /> callback to automatically get triggered
              when the error state changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletThermocoupleV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletThermocoupleV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.OnTemperatureCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletThermocoupleV2.OnErrorStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTilt">
             <summary>
              Detects inclination of Bricklet (tilt switch open/closed)
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.FUNCTION_GET_TILT_STATE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.FUNCTION_ENABLE_TILT_STATE_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.FUNCTION_DISABLE_TILT_STATE_CALLBACK">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.FUNCTION_IS_TILT_STATE_CALLBACK_ENABLED">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.TILT_STATE_CLOSED">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.TILT_STATE_OPEN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletTilt.TILT_STATE_CLOSED_VIBRATING">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTilt.TiltStateCallback">
             <summary>
              This callback provides the current tilt state. It is called every time the
              state changes.
              
              See <see cref="M:Tinkerforge.BrickletTilt.GetTiltState" /> for a description of the states.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletTilt.TiltStateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletTilt.TiltState">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.GetTiltState">
             <summary>
              Returns the current tilt state. The state can either be
              
              * 0 = Closed: The ball in the tilt switch closes the circuit.
              * 1 = Open: The ball in the tilt switch does not close the circuit.
              * 2 = Closed Vibrating: The tilt switch is in motion (rapid change between open and close).
              
              .. image:: /Images/Bricklets/bricklet_tilt_mechanics.jpg
                 :scale: 100 %
                 :alt: Tilt states
                 :align: center
                 :target: ../../_images/Bricklets/bricklet_tilt_mechanics.jpg
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.EnableTiltStateCallback">
             <summary>
              Enables the <see cref="E:Tinkerforge.BrickletTilt.TiltStateCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.DisableTiltStateCallback">
             <summary>
              Disables the <see cref="E:Tinkerforge.BrickletTilt.TiltStateCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.IsTiltStateCallbackEnabled">
             <summary>
              Returns *true* if the <see cref="E:Tinkerforge.BrickletTilt.TiltStateCallback" /> callback is enabled.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletTilt.OnTiltStateCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLight">
             <summary>
              Measures UV light
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_GET_UV_LIGHT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_SET_UV_LIGHT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_GET_UV_LIGHT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_SET_UV_LIGHT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_GET_UV_LIGHT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLight.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLight.UVLightCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackPeriod(System.Int64)" />. The parameter is the UV Light
              intensity of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletUVLight.UVLightCallback" /> callback is only triggered if the intensity has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLight.UVLightEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLight.UVLight">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLight.UVLightReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackThreshold(System.Char,System.Int64,System.Int64)" /> is reached.
              The parameter is the UV Light intensity of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletUVLight.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLight.UVLightReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLight.UVLightReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.GetUVLight">
             <summary>
              Returns the UV light intensity of the sensor.
              The sensor has already weighted the intensity with the erythemal
              action spectrum to get the skin-affecting irradiation.
              
              To get UV index you just have to divide the value by 250. For example, a UV
              light intensity of 500 is equivalent to an UV index of 2.
              
              If you want to get the intensity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLight.UVLightCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletUVLight.UVLightCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletUVLight.UVLightCallback" /> callback is only triggered if the intensity has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.GetUVLightCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackThreshold(System.Char,System.Int64,System.Int64)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletUVLight.UVLightReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the intensity is *outside* the min and max values"
               "'i'",    "Callback is triggered when the intensity is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the intensity is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the intensity is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.GetUVLightCallbackThreshold(System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackThreshold(System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletUVLight.UVLightReachedCallback" />,
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletUVLight.SetUVLightCallbackThreshold(System.Char,System.Int64,System.Int64)" />,
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletUVLight.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.OnUVLightCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLight.OnUVLightReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLightV2">
             <summary>
              Measures UV-A, UV-B and UV index
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVA">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_UVA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVA_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVB">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_UVB_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVB_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVI">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_UVI_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_UVI_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.INTEGRATION_TIME_50MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.INTEGRATION_TIME_100MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.INTEGRATION_TIME_200MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.INTEGRATION_TIME_400MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.INTEGRATION_TIME_800MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletUVLightV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLightV2.UVACallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVACallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletUVLightV2.GetUVA" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLightV2.UVAEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLightV2.UVBCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVBCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletUVLightV2.GetUVB" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLightV2.UVBEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletUVLightV2.UVICallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVICallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletUVLightV2.GetUVI" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletUVLightV2.UVIEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVA">
             <summary>
              Returns the UVA intensity of the sensor.
              The sensor has not weighted the intensity with the erythemal
              action spectrum to get the skin-affecting irradiation. Therefore, you cannot
              just divide the value by 250 to get the UVA index. To get the UV index use
              <see cref="M:Tinkerforge.BrickletUVLightV2.GetUVI" />.
              
              If the sensor is saturated, then -1 is returned, see <see cref="M:Tinkerforge.BrickletUVLightV2.SetConfiguration(System.Byte)" />.
              
              If you want to get the intensity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVACallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVACallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVACallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVACallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetUVACallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletUVLightV2.UVACallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletUVLightV2.UVACallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVACallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVACallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVB">
             <summary>
              Returns the UVB intensity of the sensor.
              The sensor has not weighted the intensity with the erythemal
              action spectrum to get the skin-affecting irradiation. Therefore, you cannot
              just divide the value by 250 to get the UVB index. To get the UV index use
              <see cref="M:Tinkerforge.BrickletUVLightV2.GetUVI" />.
              
              If the sensor is saturated, then -1 is returned, see <see cref="M:Tinkerforge.BrickletUVLightV2.SetConfiguration(System.Byte)" />.
              
              If you want to get the intensity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVBCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVBCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVBCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVBCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetUVBCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletUVLightV2.UVBCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletUVLightV2.UVBCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVBCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVBCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVI">
             <summary>
              Returns the UV index of the sensor, the index is given in 1/10.
              
              If the sensor is saturated, then -1 is returned, see <see cref="M:Tinkerforge.BrickletUVLightV2.SetConfiguration(System.Byte)" />.
              
              If you want to get the intensity periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVICallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVICallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletUVLightV2.UVICallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVICallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetUVICallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletUVLightV2.UVICallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletUVLightV2.UVICallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetUVICallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletUVLightV2.SetUVICallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetConfiguration(System.Byte)">
             <summary>
              Sets the configuration of the sensor. The integration time can be configured
              between 50 and 800 ms. With a shorter integration time the sensor reading updates
              more often but contains more noise. With a longer integration the sensor reading
              contains less noise but updates less often.
              
              With a longer integration time (especially 800 ms) and a higher UV intensity the
              sensor can be saturated. If this happens the UVA/UVB/UVI readings are all -1.
              In this case you need to choose a shorter integration time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetConfiguration">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletUVLightV2.SetConfiguration(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletUVLightV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletUVLightV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletUVLightV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletUVLightV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.OnUVACallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.OnUVBCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletUVLightV2.OnUVICallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltage">
             <summary>
              Measures DC voltage between 0V and 50V
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_ANALOG_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_SET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_SET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_ANALOG_VALUE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_SET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_SET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_ANALOG_VALUE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltage.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.VoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackPeriod(System.Int64)" />. The parameter is the voltage of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletVoltage.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltage.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.Voltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.AnalogValueCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackPeriod(System.Int64)" />. The parameter is the
              analog value of the sensor.
              
              The <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueCallback" /> callback is only triggered if the voltage has changed
              since the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltage.AnalogValueEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.AnalogValue">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.VoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletVoltage.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltage.VoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.VoltageReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.AnalogValueReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the analog value of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletVoltage.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltage.AnalogValueReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltage.AnalogValueReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetVoltage">
             <summary>
              Returns the voltage of the sensor.
              
              If you want to get the voltage periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltage.VoltageCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetAnalogValue">
             <summary>
              Returns the value as read by a 12-bit analog-to-digital converter.
              
              <note>
               The value returned by <see cref="M:Tinkerforge.BrickletVoltage.GetVoltage" /> is averaged over several samples
               to yield less noise, while <see cref="M:Tinkerforge.BrickletVoltage.GetAnalogValue" /> gives back raw
               unfiltered analog values. The only reason to use <see cref="M:Tinkerforge.BrickletVoltage.GetAnalogValue" /> is,
               if you need the full resolution of the analog-to-digital converter.
              </note>
              
              If you want the analog value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletVoltage.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletVoltage.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueCallback" /> callback is only triggered if the analog value has
              changed since the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetAnalogValueCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletVoltage.VoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the analog value is *outside* the min and max values"
               "'i'",    "Callback is triggered when the analog value is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the analog value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the analog value is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetAnalogValueCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletVoltage.VoltageReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletVoltage.AnalogValueReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletVoltage.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletVoltage.SetAnalogValueCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletVoltage.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.OnAnalogValueCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.OnVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltage.OnAnalogValueReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent">
             <summary>
              Measures power, DC voltage and DC current up to 720W/36V/20A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_POWER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_CURRENT_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_VOLTAGE_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_POWER_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_POWER_CALLBACK_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_CURRENT_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_VOLTAGE_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_POWER_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_POWER_CALLBACK_THRESHOLD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_SET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_DEBOUNCE_PERIOD">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_512">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.AVERAGING_1024">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_140US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_204US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_332US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_588US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_1_1MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_2_116MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_4_156MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrent.CONVERSION_TIME_8_244MS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.CurrentCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackPeriod(System.Int64)" />. The parameter is the current of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentCallback" /> callback is only triggered if the current has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.Current">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.VoltageCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackPeriod(System.Int64)" />. The parameter is the voltage of
              the sensor.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.Voltage">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.PowerCallback">
             <summary>
              This callback is triggered periodically with the period that is set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackPeriod(System.Int64)" />. The parameter is the power of the
              sensor.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerCallback" /> callback is only triggered if the power has changed since the
              last triggering.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.PowerEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.Power">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.CurrentReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the current of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.CurrentReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.CurrentReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.VoltageReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the voltage of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.VoltageReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.VoltageReached">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.PowerReachedCallback">
             <summary>
              This callback is triggered when the threshold as set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackThreshold(System.Char,System.Int32,System.Int32)" /> is reached.
              The parameter is the power of the sensor.
              
              If the threshold keeps being reached, the callback is triggered periodically
              with the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrent.PowerReachedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrent.PowerReached">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetCurrent">
             <summary>
              Returns the current.
              
              If you want to get the current periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetVoltage">
             <summary>
              Returns the voltage.
              
              If you want to get the voltage periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetPower">
             <summary>
              Returns the power.
              
              If you want to get the power periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerCallback" /> callback and set the period with
              <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the configuration of the Voltage/Current Bricklet. It is
              possible to configure number of averages as well as
              voltage and current conversion time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetConfiguration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetCalibration(System.Int32,System.Int32)">
             <summary>
              Since the shunt resistor that is used to measure the current is not
              perfectly precise, it needs to be calibrated by a multiplier and
              divisor if a very precise reading is needed.
              
              For example, if you are expecting a measurement of 1000mA and you
              are measuring 1023mA, you can calibrate the Voltage/Current Bricklet
              by setting the multiplier to 1000 and the divisor to 1023.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetCalibration(System.Int32@,System.Int32@)">
             <summary>
              Returns the calibration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCalibration(System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentCallback" /> callback is only triggered if the current has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetCurrentCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageCallback" /> callback is only triggered if the voltage has changed since
              the last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetVoltageCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackPeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackPeriod(System.Int64)">
             <summary>
              Sets the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              The <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerCallback" /> callback is only triggered if the power has changed since the
              last triggering.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetPowerCallbackPeriod">
             <summary>
              Returns the period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.GetPowerCallbackPeriod" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the current is *outside* the min and max values"
               "'i'",    "Callback is triggered when the current is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the current is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the current is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetCurrentCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the voltage is *outside* the min and max values"
               "'i'",    "Callback is triggered when the voltage is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the voltage is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the voltage is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetVoltageCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackThreshold(System.Char,System.Int32,System.Int32)">
             <summary>
              Sets the thresholds for the <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerReachedCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Callback is turned off"
               "'o'",    "Callback is triggered when the power is *outside* the min and max values"
               "'i'",    "Callback is triggered when the power is *inside* the min and max values"
               "'&lt;'",    "Callback is triggered when the power is smaller than the min value (max is ignored)"
               "'&gt;'",    "Callback is triggered when the power is greater than the min value (max is ignored)"
              </code>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetPowerCallbackThreshold(System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the threshold as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackThreshold(System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.SetDebouncePeriod(System.Int64)">
             <summary>
              Sets the period with which the threshold callbacks
              
              * <see cref="E:Tinkerforge.BrickletVoltageCurrent.CurrentReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletVoltageCurrent.VoltageReachedCallback" />,
              * <see cref="E:Tinkerforge.BrickletVoltageCurrent.PowerReachedCallback" />
              
              are triggered, if the thresholds
              
              * <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetCurrentCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetVoltageCallbackThreshold(System.Char,System.Int32,System.Int32)" />,
              * <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetPowerCallbackThreshold(System.Char,System.Int32,System.Int32)" />
              
              keep being reached.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetDebouncePeriod">
             <summary>
              Returns the debounce period as set by <see cref="M:Tinkerforge.BrickletVoltageCurrent.SetDebouncePeriod(System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnPowerCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnCurrentReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnVoltageReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrent.OnPowerReachedCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrentV2">
             <summary>
              Measures power, DC voltage and DC current up to 720W/36V/20A
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_CURRENT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_CURRENT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_CURRENT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_VOLTAGE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_VOLTAGE_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_POWER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_POWER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_POWER_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_CALIBRATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_1">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_4">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_16">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_64">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_128">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_256">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_512">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.AVERAGING_1024">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_140US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_204US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_332US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_588US">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_1_1MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_2_116MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_4_156MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.CONVERSION_TIME_8_244MS">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletVoltageCurrentV2.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrentV2.CurrentCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetCurrentCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.GetCurrent" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrentV2.CurrentEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrentV2.VoltageCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.GetVoltage" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrentV2.VoltageEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletVoltageCurrentV2.PowerCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetPowerCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.GetPower" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletVoltageCurrentV2.PowerEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetCurrent">
             <summary>
              Returns the current.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.CurrentCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetCurrentCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetCurrentCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.CurrentCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.CurrentCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetCurrentCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetCurrentCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetVoltage">
             <summary>
              Returns the voltage.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.VoltageCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.VoltageCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.VoltageCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetVoltageCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetVoltageCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetPower">
             <summary>
              Returns the power.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.PowerCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetPowerCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetPowerCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.PowerCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletVoltageCurrentV2.PowerCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetPowerCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int32@,System.Int32@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetPowerCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetConfiguration(System.Byte,System.Byte,System.Byte)">
             <summary>
              Sets the configuration of the Voltage/Current Bricklet 2.0. It is
              possible to configure number of averages as well as
              voltage and current conversion time.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetConfiguration(System.Byte@,System.Byte@,System.Byte@)">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetConfiguration(System.Byte,System.Byte,System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetCalibration(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              Since the ADC and the shunt resistor used for the measurements
              are not perfect they need to be calibrated by a multiplier and
              a divisor if a very precise reading is needed.
              
              For example, if you are expecting a current of 1000mA and you
              are measuring 1023mA, you can calibrate the Voltage/Current Bricklet
              by setting the current multiplier to 1000 and the divisor to 1023.
              The same applies for the voltage.
              
              The calibration will be saved on the EEPROM of the Voltage/Current
              Bricklet and only needs to be done once.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetCalibration(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
              Returns the calibration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetCalibration(System.Int32,System.Int32,System.Int32,System.Int32)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletVoltageCurrentV2.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.OnCurrentCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.OnVoltageCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletVoltageCurrentV2.OnPowerCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletXMC1400Breakout">
             <summary>
              Breakout for Infineon XMC1400 microcontroller
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.DEVICE_IDENTIFIER">
             <summary>
              Used to identify this device type in
              <see cref="E:Tinkerforge.IPConnection.EnumerateCallback" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.DEVICE_DISPLAY_NAME">
             <summary>
              The display name of this device.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_GPIO_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_GPIO_INPUT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_ADC_CHANNEL_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_ADC_CHANNEL_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_ADC_CHANNEL_VALUE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_ADC_VALUES">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_ADC_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_ADC_VALUES_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_COUNT_CALLBACK_CONFIGURATION">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_SPITFP_ERROR_COUNT">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_BOOTLOADER_MODE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_WRITE_FIRMWARE_POINTER">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_WRITE_FIRMWARE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_SET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_STATUS_LED_CONFIG">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_CHIP_TEMPERATURE">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_RESET">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_WRITE_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_READ_UID">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.FUNCTION_GET_IDENTITY">
             <summary>
              Function ID to be used with
              <see cref="M:Tinkerforge.Device.GetResponseExpected(System.Byte)" /> and
              <see cref="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.THRESHOLD_OPTION_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.THRESHOLD_OPTION_OUTSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.THRESHOLD_OPTION_INSIDE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.THRESHOLD_OPTION_SMALLER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.THRESHOLD_OPTION_GREATER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_TRISTATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_PULL_DOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_PULL_UP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_SAMPLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_INVERTED_TRISTATE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_INVERTED_PULL_DOWN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_INVERTED_PULL_UP">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_INPUT_INVERTED_SAMPLING">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_OUTPUT_PUSH_PULL">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_MODE_OUTPUT_OPEN_DRAIN">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_INPUT_HYSTERESIS_STANDARD">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.GPIO_INPUT_HYSTERESIS_LARGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_MODE_BOOTLOADER">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_MODE_FIRMWARE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_OK">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_INVALID_MODE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_NO_CHANGE">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.BOOTLOADER_STATUS_CRC_MISMATCH">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.STATUS_LED_CONFIG_OFF">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.STATUS_LED_CONFIG_ON">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.STATUS_LED_CONFIG_SHOW_HEARTBEAT">
             <summary>
             </summary>
            </member>
        <member name="F:Tinkerforge.BrickletXMC1400Breakout.STATUS_LED_CONFIG_SHOW_STATUS">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletXMC1400Breakout.ADCValuesCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetADCValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
              
              The parameters are the same as <see cref="M:Tinkerforge.BrickletXMC1400Breakout.GetADCValues" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletXMC1400Breakout.ADCValuesEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.BrickletXMC1400Breakout.CountCallback">
             <summary>
              This callback is triggered periodically according to the configuration set by
              <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
              
              The parameter is the same as <see cref="M:Tinkerforge.BrickletXMC1400Breakout.GetCount" />.
             </summary>
            </member>
        <member name="T:Tinkerforge.BrickletXMC1400Breakout.CountEventHandler">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.#ctor(System.String,Tinkerforge.IPConnection)">
             <summary>
              Creates an object with the unique device ID <c>uid</c> and adds  it to
              the IPConnection <c>ipcon</c>.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetGPIOConfig(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
             <summary>
              Example for a setter function. The values are the values that can be given to
              the XMC_GPIO_Init function. See communication.c in the firmware.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetGPIOInput(System.Byte,System.Byte)">
             <summary>
              Example for a getter function. Returns the result of a
              XMC_GPIO_GetInput call for the given port/pin.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetADCChannelConfig(System.Byte,System.Boolean)">
             <summary>
              Enables a ADC channel for the ADC driver example (adc.c/adc.h).
              
              There are 8 ADC channels and they correspond to the following pins:
              
              * Channel 0: P2_6
              * Channel 1: P2_8
              * Channel 2: P2_9
              * Channel 3: P2_10
              * Channel 4: P2_11
              * Channel 5: P2_0
              * Channel 6: P2_1
              * Channel 7: P2_2
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetADCChannelConfig(System.Byte)">
             <summary>
              Returns the config for the given channel as set by <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetADCChannelConfig(System.Byte,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetADCChannelValue(System.Byte)">
             <summary>
              Returns the 12-bit value of the given ADC channel of the ADC driver example.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetADCValues">
             <summary>
              Returns the values for all 8 ADC channels of the adc driver example.
              
              This example function also has a corresponding callback.
              
              See <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetADCValuesCallbackConfiguration(System.Int64,System.Boolean)" /> and <see cref="E:Tinkerforge.BrickletXMC1400Breakout.ADCValuesCallback" /> callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetADCValuesCallbackConfiguration(System.Int64,System.Boolean)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletXMC1400Breakout.ADCValuesCallback" />
              callback is triggered periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change within the
              period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetADCValuesCallbackConfiguration(System.Int64@,System.Boolean@)">
             <summary>
              Returns the callback configuration as set by
              <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetADCValuesCallbackConfiguration(System.Int64,System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetCount">
             <summary>
              Returns the value of the example count (see example.c).
              
              This example function uses the "add_callback_value_function"-helper in the
              generator. The getter as well as the callback and callback configuration
              functions are auto-generated for the API as well as the firmware.
              
              
              If you want to get the value periodically, it is recommended to use the
              <see cref="E:Tinkerforge.BrickletXMC1400Breakout.CountCallback" /> callback. You can set the callback configuration
              with <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)">
             <summary>
              The period is the period with which the <see cref="E:Tinkerforge.BrickletXMC1400Breakout.CountCallback" /> callback is triggered
              periodically. A value of 0 turns the callback off.
              
              If the `value has to change`-parameter is set to true, the callback is only
              triggered after the value has changed. If the value didn't change
              within the period, the callback is triggered immediately on change.
              
              If it is set to false, the callback is continuously triggered with the period,
              independent of the value.
              
              It is furthermore possible to constrain the callback with thresholds.
              
              The `option`-parameter together with min/max sets a threshold for the <see cref="E:Tinkerforge.BrickletXMC1400Breakout.CountCallback" /> callback.
              
              The following options are possible:
              
              <code>
               "Option", "Description"
              
               "'x'",    "Threshold is turned off"
               "'o'",    "Threshold is triggered when the value is *outside* the min and max values"
               "'i'",    "Threshold is triggered when the value is *inside* or equal to the min and max values"
               "'&lt;'",    "Threshold is triggered when the value is smaller than the min value (max is ignored)"
               "'&gt;'",    "Threshold is triggered when the value is greater than the min value (max is ignored)"
              </code>
              
              If the option is set to 'x' (threshold turned off) the callback is triggered with the fixed period.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetCountCallbackConfiguration(System.Int64@,System.Boolean@,System.Char@,System.Int64@,System.Int64@)">
             <summary>
              Returns the callback configuration as set by <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetCountCallbackConfiguration(System.Int64,System.Boolean,System.Char,System.Int64,System.Int64)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetSPITFPErrorCount(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
             <summary>
              Returns the error count for the communication between Brick and Bricklet.
              
              The errors are divided into
              
              * ACK checksum errors,
              * message checksum errors,
              * framing errors and
              * overflow errors.
              
              The errors counts are for errors that occur on the Bricklet side. All
              Bricks have a similar function that returns the errors on the Brick side.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetBootloaderMode(System.Byte)">
             <summary>
              Sets the bootloader mode and returns the status after the requested
              mode change was instigated.
              
              You can change from bootloader mode to firmware mode and vice versa. A change
              from bootloader mode to firmware mode will only take place if the entry function,
              device identifier and CRC are present and correct.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetBootloaderMode">
             <summary>
              Returns the current bootloader mode, see <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetBootloaderMode(System.Byte)" />.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetWriteFirmwarePointer(System.Int64)">
             <summary>
              Sets the firmware pointer for <see cref="M:Tinkerforge.BrickletXMC1400Breakout.WriteFirmware(System.Byte[])" />. The pointer has
              to be increased by chunks of size 64. The data is written to flash
              every 4 chunks (which equals to one page of size 256).
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.WriteFirmware(System.Byte[])">
             <summary>
              Writes 64 Bytes of firmware at the position as written by
              <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetWriteFirmwarePointer(System.Int64)" /> before. The firmware is written
              to flash every 4 chunks.
              
              You can only write firmware in bootloader mode.
              
              This function is used by Brick Viewer during flashing. It should not be
              necessary to call it in a normal user program.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.SetStatusLEDConfig(System.Byte)">
             <summary>
              Sets the status LED configuration. By default the LED shows
              communication traffic between Brick and Bricklet, it flickers once
              for every 10 received data packets.
              
              You can also turn the LED permanently on/off or show a heartbeat.
              
              If the Bricklet is in bootloader mode, the LED is will show heartbeat by default.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetStatusLEDConfig">
             <summary>
              Returns the configuration as set by <see cref="M:Tinkerforge.BrickletXMC1400Breakout.SetStatusLEDConfig(System.Byte)" />
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetChipTemperature">
             <summary>
              Returns the temperature as measured inside the microcontroller. The
              value returned is not the ambient temperature!
              
              The temperature is only proportional to the real temperature and it has bad
              accuracy. Practically it is only useful as an indicator for
              temperature changes.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.Reset">
             <summary>
              Calling this function will reset the Bricklet. All configurations
              will be lost.
              
              After a reset you have to create new device objects,
              calling functions on the existing ones will result in
              undefined behavior!
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.WriteUID(System.Int64)">
             <summary>
              Writes a new UID into flash. If you want to set a new UID
              you have to decode the Base58 encoded UID string into an
              integer first.
              
              We recommend that you use Brick Viewer to change the UID.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.ReadUID">
             <summary>
              Returns the current UID as an integer. Encode as
              Base58 to get the usual string version.
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
              
              The position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).
              A Bricklet connected to an :ref:`Isolator Bricklet &lt;isolator_bricklet&gt;` is always at
              position 'z'.
              
              The device identifier numbers can be found :ref:`here &lt;device_identifier&gt;`.
              |device_identifier_constant|
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.OnADCValuesCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.BrickletXMC1400Breakout.OnCountCallback(System.Byte[])">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.IPConnection">
             <summary>
              The IPConnection creates a TCP/IP connection to the Brick Daemon.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.ENUMERATION_TYPE_AVAILABLE">
             <summary>
              Device is available (enumeration triggered by user: Enumerate()).
              This enumeration type can occur multiple times for the same device.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.ENUMERATION_TYPE_CONNECTED">
             <summary>
              Device is newly connected (automatically send by Brick after
              establishing a communication connection). This indicates that the
              device has potentially lost its previous configuration and needs
              to be reconfigured.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.ENUMERATION_TYPE_DISCONNECTED">
             <summary>
              Device is disconnected (only possible for USB connection). In this
              case only uid and enumerationType are valid.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.CONNECT_REASON_REQUEST">
             <summary>
              Connection established after request from user.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.CONNECT_REASON_AUTO_RECONNECT">
             <summary>
              Connection after auto-reconnect.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.DISCONNECT_REASON_REQUEST">
             <summary>
              Disconnect was requested by user.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.DISCONNECT_REASON_ERROR">
             <summary>
              Disconnect because of an unresolvable error.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.DISCONNECT_REASON_SHUTDOWN">
             <summary>
              Disconnect initiated by Brick Daemon or WIFI/Ethernet Extension.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.CONNECTION_STATE_DISCONNECTED">
             <summary>
              No connection is established.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.CONNECTION_STATE_CONNECTED">
             <summary>
              A connection to the Brick Daemon or the WIFI/Ethernet Extension is
              established.
             </summary>
            </member>
        <member name="F:Tinkerforge.IPConnection.CONNECTION_STATE_PENDING">
             <summary>
              IP Connection is currently trying to connect.
             </summary>
            </member>
        <member name="E:Tinkerforge.IPConnection.EnumerateCallback">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.IPConnection.EnumerateEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.IPConnection.ConnectedCallback">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.IPConnection.ConnectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.IPConnection.Connected">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.IPConnection.DisconnectedCallback">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.IPConnection.DisconnectedEventHandler">
             <summary>
             </summary>
            </member>
        <member name="E:Tinkerforge.IPConnection.Disconnected">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.#ctor">
             <summary>
              Creates an IP Connection object that can be used to enumerate the
              available devices. It is also required for the constructor of
              Bricks and Bricklets.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Connect(System.String,System.Int32)">
             <summary>
              Creates a TCP/IP connection to the given *host* and *port*.
              The host and port can point to a Brick Daemon or to a WIFI/Ethernet
              Extension.
            
              Devices can only be controlled when the connection was established
              successfully.
            
              Blocks until the connection is established and throws an exception
              if there is no Brick Daemon or WIFI/Ethernet Extension listening
              at the given host and port.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Disconnect">
             <summary>
              Disconnects the TCP/IP connection from the Brick Daemon or the
              WIFI/Ethernet Extension.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Authenticate(System.String)">
             <summary>
              Performs an authentication handshake with the connected Brick Daemon or
              WIFI/Ethernet Extension. If the handshake succeeds the connection switches
              from non-authenticated to authenticated state and communication can
              continue as normal. If the handshake fails then the connection gets closed.
              Authentication can fail if the wrong secret was used or if authentication
              is not enabled at all on the Brick Daemon or the WIFI/Ethernet Extension.
            
              For more information about authentication see
              https://www.tinkerforge.com/en/doc/Tutorials/Tutorial_Authentication/Tutorial.html
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.GetConnectionState">
             <summary>
              Can return the following states:
            
              - CONNECTION_STATE_DISCONNECTED: No connection is established.
              - CONNECTION_STATE_CONNECTED: A connection to the Brick Daemon or
                the WIFI/Ethernet Extension  is established.
              - CONNECTION_STATE_PENDING: IP Connection is currently trying to
                connect.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.SetAutoReconnect(System.Boolean)">
             <summary>
              Enables or disables auto-reconnect. If auto-reconnect is enabled,
              the IP Connection will try to reconnect to the previously given
              host and port, if the connection is lost.
            
              Default value is *true*.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.GetAutoReconnect">
             <summary>
              Returns *true* if auto-reconnect is enabled, *false* otherwise.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.SetTimeout(System.Int32)">
             <summary>
              Sets the timeout in milliseconds for getters and for setters for
              which the response expected flag is activated.
            
              Default timeout is 2500.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.GetTimeout">
             <summary>
              Returns the timeout as set by SetTimeout.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Enumerate">
             <summary>
              Broadcasts an enumerate request. All devices will respond with an
              enumerate callback.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Wait">
             <summary>
              Stops the current thread until Unwait is called.
            
              This is useful if you rely solely on callbacks for events, if you
              want to wait for a specific callback or if the IP Connection was
              created in a thread.
            
              Wait and Unwait act in the same way as "acquire" and "release" of
              a semaphore.
             </summary>
            </member>
        <member name="M:Tinkerforge.IPConnection.Unwait">
             <summary>
              Unwaits the thread previously stopped by Wait.
            
              Wait and Unwait act in the same way as "acquire" and "release" of
              a semaphore.
             </summary>
            </member>
        <member name="T:Tinkerforge.TinkerforgeException">
             <summary>
              Base class for all Tinkerforge exceptions.
             </summary>
            </member>
        <member name="M:Tinkerforge.TinkerforgeException.#ctor">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.TinkerforgeException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.TimeoutException">
             <summary>
              Used to report timeout errors.
             </summary>
            </member>
        <member name="M:Tinkerforge.TimeoutException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.AlreadyConnectedException">
             <summary>
              Used to report if <see cref="M:Tinkerforge.IPConnection.Connect(System.String,System.Int32)" /> is
              called on an already connected IPConnection.
             </summary>
            </member>
        <member name="M:Tinkerforge.AlreadyConnectedException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.NotConnectedException">
             <summary>
              Used to report if a method is called on an unconnected IPConnection
              that requires a connected IPConnection.
             </summary>
            </member>
        <member name="M:Tinkerforge.NotConnectedException.#ctor">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.InvalidParameterException">
             <summary>
              Used to report if a method was called with an invalid parameter.
             </summary>
            </member>
        <member name="M:Tinkerforge.InvalidParameterException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.NotSupportedException">
             <summary>
              Used to report if not supported method was called.
             </summary>
            </member>
        <member name="M:Tinkerforge.NotSupportedException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.UnknownErrorCodeException">
             <summary>
              Used to report if device responds with an unknown error code.
             </summary>
            </member>
        <member name="M:Tinkerforge.UnknownErrorCodeException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.StreamOutOfSyncException">
             <summary>
              Used to report if a stream method call hit an out-of-sync condition.
             </summary>
            </member>
        <member name="M:Tinkerforge.StreamOutOfSyncException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.WrongDeviceTypeException">
             <summary>
              Used to report if the API bindings device class does not match the
              device identifier.
             </summary>
            </member>
        <member name="M:Tinkerforge.WrongDeviceTypeException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.DeviceReplacedException">
             <summary>
              Used to report if the device object got replaced by other device
              object and does no longer receive responses.
             </summary>
            </member>
        <member name="M:Tinkerforge.DeviceReplacedException.#ctor">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.WrongResponseLengthException">
             <summary>
              Used to report if a response does not have the expected length.
             </summary>
            </member>
        <member name="M:Tinkerforge.WrongResponseLengthException.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.UID">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.UID.#ctor(System.String)">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.UID.ToInt">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.UID.op_Explicit(Tinkerforge.UID)~System.Int32">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.UID.ToString">
             <summary>
             </summary>
            </member>
        <member name="T:Tinkerforge.Device">
             <summary>
              Base class for all Tinkerforge Brick and Bricklet classes.
             </summary>
            </member>
        <member name="P:Tinkerforge.Device.UID">
             <summary>
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.#ctor(System.String,Tinkerforge.IPConnection,System.Int32,System.String)">
             <summary>
              Creates the device object with the unique device ID *uid* and adds
              it to the IPConnection *ipcon*.
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.GetAPIVersion">
             <summary>
              Returns the API version (major, minor, revision) of the bindings
              for this device.
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.GetResponseExpected(System.Byte)">
             <summary>
              Returns the response expected flag for the function specified
              by the *functionId* parameter. It is *true* if the function is
              expected to send a response, *false* otherwise.
            
              For getter functions this is enabled by default and cannot be
              disabled, because those functions will always send a response.
              For callback configuration functions it is enabled by default
              too, but can be disabled via the SetResponseExpected function.
              For setter functions it is disabled by default and can be enabled.
            
              Enabling the response expected flag for a setter function allows
              to detect timeouts and other error conditions calls of this setter
              as well. The device will then send a response for this purpose.
              If this flag is disabled for a setter function then no response
              is sent and errors are silently ignored, because they cannot be
              detected.
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.SetResponseExpected(System.Byte,System.Boolean)">
             <summary>
              Changes the response expected flag of the function specified
              by the function ID parameter. This flag can only be changed
              for setter (default value: *false*) and callback configuration
              functions (default value: *true*). For getter functions it is
              always enabled.
            
              Enabling the response expected flag for a setter function allows
              to detect timeouts and other error conditions calls of this setter
              as well. The device will then send a response for this purpose.
              If this flag is disabled for a setter function then no response
              is sent and errors are silently ignored, because they cannot be
              detected.
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.SetResponseExpectedAll(System.Boolean)">
             <summary>
              Changes the response expected flag for all setter and callback
              configuration functions of this device at once.
             </summary>
            </member>
        <member name="M:Tinkerforge.Device.GetIdentity(System.String@,System.String@,System.Char@,System.Byte[]@,System.Byte[]@,System.Int32@)">
             <summary>
              Returns the UID, the UID where the Brick/Bricklet is connected to,
              the position, the hardware and firmware version as well as the
              device identifier.
             </summary>
            </member>
    </members>
</doc>
